.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS " 3 "" "" ""
.SH "NAME"
boost::log::sources::basic_exception_handler_logger \- Exception handler feature implementation\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sources/exception_handler_feature\&.hpp>

template<typename BaseT> 
class basic_exception_handler_logger : public BaseT {
public:
  // types
  typedef base_type::threading_model                                                               threading_model;         // Threading model being used\&. 
  typedef base_type::final_type                                                                    final_type;              // Final logger type\&. 
  typedef \fIunspecified\fR                                                                              exception_handler_type;  // Exception handler function type\&. 
  typedef strictest_lock< typename base_type::open_record_lock, no_lock< threading_model > >::type open_record_lock;        // Lock requirement for the open_record_unlocked method\&. 
  typedef strictest_lock< typename base_type::push_record_lock, no_lock< threading_model > >::type push_record_lock;        // Lock requirement for the push_record_unlocked method\&. 
  typedef \fIunspecified\fR                                                                              swap_lock;               // Lock requirement for the swap_unlocked method\&. 

  // construct/copy/destruct
  basic_exception_handler_logger();
  basic_exception_handler_logger(basic_exception_handler_logger const &);
  basic_exception_handler_logger(basic_exception_handler_logger &&);
  template<typename ArgsT> 
    explicit basic_exception_handler_logger(ArgsT const &);

  // public member functions
  template<typename HandlerT> void set_exception_handler(HandlerT const &);

  // protected member functions
  template<typename ArgsT> record open_record_unlocked(ArgsT const &);
  void push_record_unlocked(record &&);
  void swap_unlocked(basic_exception_handler_logger &);
};
.fi
.SH "DESCRIPTION"
.SS "basic_exception_handler_logger public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_exception_handler_logger();
.fi

.sp
Default constructor\&. The constructed logger does not have an exception handler\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_exception_handler_logger(basic_exception_handler_logger const & that);
.fi

.sp
Copy constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
basic_exception_handler_logger(basic_exception_handler_logger && that);
.fi

.sp
Move constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename ArgsT> 
  explicit basic_exception_handler_logger(ArgsT const & args);
.fi

.sp
Constructor with arguments\&. Passes arguments to other features\&.
.RE

.SS "basic_exception_handler_logger public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename HandlerT> 
  void set_exception_handler(HandlerT const & handler);
.fi

.sp
The method sets exception handler function\&. The function will be called with no arguments in case if an exception occurs during either
open_record
or
push_record
method execution\&. Since exception handler is called from a
catch
statement, the exception can be rethrown in order to determine its type\&.
.sp
By default no handler is installed, thus any exception is propagated as usual\&.
.sp
\fBSee Also:\fRutility/exception_handler\&.hpp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
The exception handler can be invoked in several threads concurrently\&.
.sp .5v
.RE

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Thread interruptions are not affected by exception handlers\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
handler
.RS 4
Exception handling function
.RE
.RE
.RE

.SS "basic_exception_handler_logger protected member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename ArgsT> record open_record_unlocked(ArgsT const & args);
.fi

.sp
Unlocked
open_record
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void push_record_unlocked(record && rec);
.fi

.sp
Unlocked
push_record
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void swap_unlocked(basic_exception_handler_logger & that);
.fi

.sp
Unlocked swap
.RE


