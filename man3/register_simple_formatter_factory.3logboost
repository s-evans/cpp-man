.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUN" 3 "" "" ""
.SH "NAME"
boost::log::register_simple_formatter_factory \- The function registers a simple formatter factory\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/setup/formatter_parser\&.hpp>


template<typename AttributeValueT, typename CharT> 
  void register_simple_formatter_factory(attribute_name const & attr_name);
.fi
.SH "DESCRIPTION"
.PP
The function registers a simple formatter factory\&. The registered factory will generate formatters that will be equivalent to the
log::expressions::attr
formatter (i\&.e\&. that will use the native
operator<<
to format the attribute value)\&. The factory does not use any arguments from the format string, if specified\&.
.PP

.PP
Parameters:
.RS 4
.PP
attr_name
.RS 4
Attribute name
.RE
.RE
.PP
Requires:
.RS 4
!!attr_name\&.
.RE

