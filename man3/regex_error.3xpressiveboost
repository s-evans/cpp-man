.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT REGEX_ERROR" 3 "" "" ""
.SH "NAME"
boost::xpressive::regex_error \- The class regex_error defines the type of objects thrown as exceptions to report errors during the conversion from a string representing a regular expression to a finite state machine\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_error\&.hpp>


struct regex_error : public std::runtime_error, public exception {
  // construct/copy/destruct
  explicit regex_error(regex_constants::error_type, char const * = "");
  ~regex_error();

  // public member functions
  regex_constants::error_type code() const;
};
.fi
.SH "DESCRIPTION"
.SS "regex_error public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit regex_error(regex_constants::error_type code, char const * str = "");
.fi

.sp
Constructs an object of class
regex_error\&.
.PP
Parameters:
.RS 4
.PP
code
.RS 4
The error_type this
regex_error
represents\&.
.RE
.PP
str
.RS 4
The message string of this
regex_error\&.
.RE
.RE
.PP
Postconditions:
.RS 4
code() == code
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~regex_error();
.fi

.sp
Destructor for class
regex_error
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE

.SS "regex_error public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
regex_constants::error_type code() const;
.fi

.sp
Accessor for the error_type value
.PP
Returns:
.RS 4
the error_type code passed to the constructor
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


