.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::icl::conversion
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/icl/functors\&.hpp>

template<typename Combiner> 
struct conversion {
  // types
  typedef conversion< Combiner >                                                                          type;         
  typedef remove_const< typename remove_reference< typename Combiner::first_argument_type >::type >::type argument_type;

  // public static functions
  static argument_type proversion(const argument_type &);
  static argument_type inversion(const argument_type &);
};
.fi
.SH "DESCRIPTION"
.SS "conversion public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static argument_type proversion(const argument_type & value);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static argument_type inversion(const argument_type & value);
.fi

.RE


