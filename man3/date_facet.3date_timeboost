.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE D" 3 "" "" ""
.SH "NAME"
boost::date_time::date_facet
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/date_facet\&.hpp>

template<typename date_type, typename CharT, 
         typename OutItrT = std::ostreambuf_iterator<CharT, std::char_traits<CharT> > > 
class date_facet : public facet {
public:
  // types
  typedef date_type::duration_type                             duration_type;                
  typedef date_type::day_of_week_type                          day_of_week_type;             
  typedef date_type::day_type                                  day_type;                     
  typedef date_type::month_type                                month_type;                   
  typedef boost::date_time::period< date_type, duration_type > period_type;                  
  typedef std::basic_string< CharT >                           string_type;                  
  typedef CharT                                                char_type;                    
  typedef boost::date_time::period_formatter< CharT >          period_formatter_type;        
  typedef boost::date_time::special_values_formatter< CharT >  special_values_formatter_type;
  typedef std::vector< std::basic_string< CharT > >            input_collection_type;        
  typedef date_generator_formatter< date_type, CharT >         date_gen_formatter_type;      
  typedef partial_date< date_type >                            partial_date_type;            
  typedef nth_kday_of_month< date_type >                       nth_kday_type;                
  typedef first_kday_of_month< date_type >                     first_kday_type;              
  typedef last_kday_of_month< date_type >                      last_kday_type;               
  typedef first_kday_after< date_type >                        kday_after_type;              
  typedef first_kday_before< date_type >                       kday_before_type;             

  // construct/copy/destruct
  explicit date_facet(::size_t = 0);
  explicit date_facet(const char_type *, const input_collection_type &, 
                      ::size_t = 0);
  explicit date_facet(const char_type *, 
                      period_formatter_type = period_formatter_type(), 
                      special_values_formatter_type = special_values_formatter_type(), 
                      date_gen_formatter_type = date_gen_formatter_type(), 
                      ::size_t = 0);

  // public member functions
  std::locale::id & __get_id(void) const;
  void format(const char_type *const);
  virtual void set_iso_format();
  virtual void set_iso_extended_format();
  void month_format(const char_type *const);
  void weekday_format(const char_type *const);
  void period_formatter(period_formatter_type);
  void special_values_formatter(const special_values_formatter_type &);
  void short_weekday_names(const input_collection_type &);
  void long_weekday_names(const input_collection_type &);
  void short_month_names(const input_collection_type &);
  void long_month_names(const input_collection_type &);
  void date_gen_phrase_strings(const input_collection_type &, 
                               typename date_gen_formatter_type::phrase_elements = date_gen_formatter_type::first);
  OutItrT put(OutItrT, std::ios_base &, char_type, const date_type &) const;
  OutItrT put(OutItrT, std::ios_base &, char_type, const duration_type &) const;
  OutItrT put(OutItrT, std::ios_base &, char_type, const month_type &) const;
  OutItrT put(OutItrT, std::ios_base &, char_type, const day_type &) const;
  OutItrT put(OutItrT, std::ios_base &, char_type, const day_of_week_type &) const;
  OutItrT put(OutItrT, std::ios_base &, char_type, const period_type &) const;
  OutItrT put(OutItrT, std::ios_base &, char_type, const partial_date_type &) const;
  OutItrT put(OutItrT, std::ios_base &, char_type, const nth_kday_type &) const;
  OutItrT put(OutItrT, std::ios_base &, char_type, const first_kday_type &) const;
  OutItrT put(OutItrT, std::ios_base &, char_type, const last_kday_type &) const;
  OutItrT put(OutItrT, std::ios_base &, char_type, const kday_before_type &) const;
  OutItrT put(OutItrT, std::ios_base &, char_type, const kday_after_type &) const;

  // protected member functions
  virtual OutItrT 
  do_put_special(OutItrT, std::ios_base &, char_type, 
                 const boost::date_time::special_values) const;
  virtual OutItrT 
  do_put_tm(OutItrT, std::ios_base &, char_type, const tm &, string_type) const;

  // public data members
  static const char_type long_weekday_format;
  static const char_type short_weekday_format;
  static const char_type long_month_format;
  static const char_type short_month_format;
  static const char_type default_period_separator;
  static const char_type standard_format_specifier;
  static const char_type iso_format_specifier;
  static const char_type iso_format_extended_specifier;
  static const char_type default_date_format;
  static std::locale::id id;
};
.fi
.SH "DESCRIPTION"
.PP
Class that provides format based I/O facet for date types\&.
.PP
This class allows the formatting of dates by using format string\&. Format strings are:
.PP

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A => long_weekday_format \- Full name Ex: Tuesday
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a => short_weekday_format \- Three letter abbreviation Ex: Tue
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
B => long_month_format \- Full name Ex: October
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
b => short_month_format \- Three letter abbreviation Ex: Oct
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
x => standard_format_specifier \- defined by the locale
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Y\-b\-d => default_date_format \- YYYY\-Mon\-dd
.RE
.sp
.RE

.PP
Default month format == b Default weekday format == a
.SS "date_facet public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit date_facet(::size_t a_ref = 0);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit date_facet(const char_type * format_str, 
                    const input_collection_type & short_names, 
                    ::size_t ref_count = 0);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
explicit date_facet(const char_type * format_str, 
                    period_formatter_type per_formatter = period_formatter_type(), 
                    special_values_formatter_type sv_formatter = special_values_formatter_type(), 
                    date_gen_formatter_type dg_formatter = date_gen_formatter_type(), 
                    ::size_t ref_count = 0);
.fi

.RE

.SS "date_facet public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
std::locale::id & __get_id(void) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void format(const char_type *const format_str);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
virtual void set_iso_format();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
virtual void set_iso_extended_format();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
void month_format(const char_type *const format_str);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void weekday_format(const char_type *const format_str);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void period_formatter(period_formatter_type per_formatter);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
void special_values_formatter(const special_values_formatter_type & svf);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
void short_weekday_names(const input_collection_type & short_names);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
void long_weekday_names(const input_collection_type & long_names);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
void short_month_names(const input_collection_type & short_names);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
void long_month_names(const input_collection_type & long_names);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "13." 4.2
.\}

.sp

.nf
void date_gen_phrase_strings(const input_collection_type & new_strings, 
                             typename date_gen_formatter_type::phrase_elements beg_pos = date_gen_formatter_type::first);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'14.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "14." 4.2
.\}

.sp

.nf
OutItrT put(OutItrT next, std::ios_base & a_ios, char_type fill_char, 
            const date_type & d) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'15.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "15." 4.2
.\}

.sp

.nf
OutItrT put(OutItrT next, std::ios_base & a_ios, char_type fill_char, 
            const duration_type & dd) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'16.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "16." 4.2
.\}

.sp

.nf
OutItrT put(OutItrT next, std::ios_base & a_ios, char_type fill_char, 
            const month_type & m) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'17.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "17." 4.2
.\}

.sp

.nf
OutItrT put(OutItrT next, std::ios_base & a_ios, char_type fill_char, 
            const day_type & day) const;
.fi

puts the day of month .RE


.sp
.RS 4
.ie n \{\
\h'-04'18.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "18." 4.2
.\}

.sp

.nf
OutItrT put(OutItrT next, std::ios_base & a_ios, char_type fill_char, 
            const day_of_week_type & dow) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'19.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "19." 4.2
.\}

.sp

.nf
OutItrT put(OutItrT next, std::ios_base & a_ios, char_type fill_char, 
            const period_type & p) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'20.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "20." 4.2
.\}

.sp

.nf
OutItrT put(OutItrT next, std::ios_base & a_ios, char_type fill_char, 
            const partial_date_type & pd) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'21.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "21." 4.2
.\}

.sp

.nf
OutItrT put(OutItrT next, std::ios_base & a_ios, char_type fill_char, 
            const nth_kday_type & nkd) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'22.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "22." 4.2
.\}

.sp

.nf
OutItrT put(OutItrT next, std::ios_base & a_ios, char_type fill_char, 
            const first_kday_type & fkd) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'23.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "23." 4.2
.\}

.sp

.nf
OutItrT put(OutItrT next, std::ios_base & a_ios, char_type fill_char, 
            const last_kday_type & lkd) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'24.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "24." 4.2
.\}

.sp

.nf
OutItrT put(OutItrT next, std::ios_base & a_ios, char_type fill_char, 
            const kday_before_type & fkb) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'25.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "25." 4.2
.\}

.sp

.nf
OutItrT put(OutItrT next, std::ios_base & a_ios, char_type fill_char, 
            const kday_after_type & fka) const;
.fi

.RE

.SS "date_facet protected member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual OutItrT 
do_put_special(OutItrT next, std::ios_base &, char_type, 
               const boost::date_time::special_values sv) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
virtual OutItrT 
do_put_tm(OutItrT next, std::ios_base & a_ios, char_type fill_char, 
          const tm & tm_value, string_type a_format) const;
.fi

.RE


