.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::log::basic_settings_section \- The class represents a reference to the settings container section\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/setup/settings\&.hpp>

template<typename CharT> 
class basic_settings_section {
public:
  // types
  typedef CharT                                                  char_type;           // Character type\&. 
  typedef std::basic_string< char_type >                         string_type;         // String type\&. 
  typedef property_tree::basic_ptree< std::string, string_type > property_tree_type;  // Property tree type\&. 
  typedef property_tree_type::path_type                          path_type;           // Property tree path type\&. 
  typedef implementation_defined                                 const_reference;   
  typedef implementation_defined                                 reference;         
  typedef implementation_defined                                 const_iterator;    
  typedef implementation_defined                                 iterator;          

  // construct/copy/destruct
  basic_settings_section();
  basic_settings_section(basic_settings_section const &);
  explicit basic_settings_section(property_tree_type *);

  // public member functions
  explicit operator bool() const noexcept;
  bool operator!() const noexcept;
  iterator begin();
  iterator end();
  const_iterator begin() const;
  const_iterator end() const;
  reverse_iterator rbegin();
  reverse_iterator rend();
  const_reverse_iterator rbegin() const;
  const_reverse_iterator rend() const;
  bool empty() const;
  reference operator[](std::string const &);
  const_reference operator[](std::string const &) const;
  reference operator[](const char *);
  const_reference operator[](const char *) const;
  property_tree_type const & property_tree() const;
  property_tree_type & property_tree();
  bool has_section(string_type const &) const;
  bool has_parameter(string_type const &, string_type const &) const;
  void swap(basic_settings_section &);
};
.fi
.SH "DESCRIPTION"
.PP
The section refers to a sub\-tree of the library settings container\&. It does not own the referred sub\-tree but allows for convenient access to parameters within the subsection\&.
.SS "basic_settings_section public types"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

typedef
implementation_defined
const_reference;
.sp
Constant reference to the parameter value
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

typedef
implementation_defined
reference;
.sp
Mutable reference to the parameter value
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

typedef
implementation_defined
const_iterator;
.sp
Constant iterator over nested parameters and subsections
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

typedef
implementation_defined
iterator;
.sp
Mutable iterator over nested parameters and subsections
.RE

.SS "basic_settings_section public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_settings_section();
.fi

.sp
Default constructor\&. Creates an empty settings container\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_settings_section(basic_settings_section const & that);
.fi

.sp
Copy constructor\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
explicit basic_settings_section(property_tree_type * tree);
.fi

.RE

.SS "basic_settings_section public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit operator bool() const noexcept;
.fi

.sp
Checks if the section refers to the container\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
bool operator!() const noexcept;
.fi

.sp
Checks if the section refers to the container\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
iterator begin();
.fi

.sp
Returns an iterator over the nested subsections and parameters\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
iterator end();
.fi

.sp
Returns an iterator over the nested subsections and parameters\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
const_iterator begin() const;
.fi

.sp
Returns an iterator over the nested subsections and parameters\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
const_iterator end() const;
.fi

.sp
Returns an iterator over the nested subsections and parameters\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
reverse_iterator rbegin();
.fi

.sp
Returns a reverse iterator over the nested subsections and parameters\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
reverse_iterator rend();
.fi

.sp
Returns a reverse iterator over the nested subsections and parameters\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
const_reverse_iterator rbegin() const;
.fi

.sp
Returns a reverse iterator over the nested subsections and parameters\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
const_reverse_iterator rend() const;
.fi

.sp
Returns a reverse iterator over the nested subsections and parameters\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
bool empty() const;
.fi

.sp
Checks if the container is empty (i\&.e\&. contains no sections and parameters)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
reference operator[](std::string const & section_name);
.fi

.sp
Accessor to a single parameter\&. This operator should be used in conjunction with the subsequent subscript operator that designates the parameter name\&.
.sp

.PP
Parameters:
.RS 4
.PP
section_name
.RS 4
The name of the section in which the parameter resides
.RE
.RE
.PP
Returns:
.RS 4
An unspecified reference type that can be used for parameter name specifying
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "13." 4.2
.\}

.sp

.nf
const_reference operator[](std::string const & section_name) const;
.fi

.sp
Accessor to a single parameter\&. This operator should be used in conjunction with the subsequent subscript operator that designates the parameter name\&.
.sp

.PP
Parameters:
.RS 4
.PP
section_name
.RS 4
The name of the section in which the parameter resides
.RE
.RE
.PP
Returns:
.RS 4
An unspecified reference type that can be used for parameter name specifying
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'14.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "14." 4.2
.\}

.sp

.nf
reference operator[](const char * section_name);
.fi

.sp
Accessor to a single parameter\&. This operator should be used in conjunction with the subsequent subscript operator that designates the parameter name\&.
.sp

.PP
Parameters:
.RS 4
.PP
section_name
.RS 4
The name of the section in which the parameter resides
.RE
.RE
.PP
Returns:
.RS 4
An unspecified reference type that can be used for parameter name specifying
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'15.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "15." 4.2
.\}

.sp

.nf
const_reference operator[](const char * section_name) const;
.fi

.sp
Accessor to a single parameter\&. This operator should be used in conjunction with the subsequent subscript operator that designates the parameter name\&.
.sp

.PP
Parameters:
.RS 4
.PP
section_name
.RS 4
The name of the section in which the parameter resides
.RE
.RE
.PP
Returns:
.RS 4
An unspecified reference type that can be used for parameter name specifying
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'16.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "16." 4.2
.\}

.sp

.nf
property_tree_type const & property_tree() const;
.fi

.sp
Accessor for the embedded property tree
.RE


.sp
.RS 4
.ie n \{\
\h'-04'17.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "17." 4.2
.\}

.sp

.nf
property_tree_type & property_tree();
.fi

.sp
Accessor for the embedded property tree
.RE


.sp
.RS 4
.ie n \{\
\h'-04'18.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "18." 4.2
.\}

.sp

.nf
bool has_section(string_type const & section_name) const;
.fi

.sp
Checks if the specified section is present in the container\&.
.sp

.PP
Parameters:
.RS 4
.PP
section_name
.RS 4
The name of the section
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'19.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "19." 4.2
.\}

.sp

.nf
bool has_parameter(string_type const & section_name, 
                   string_type const & param_name) const;
.fi

.sp
Checks if the specified parameter is present in the container\&.
.sp

.PP
Parameters:
.RS 4
.PP
param_name
.RS 4
The name of the parameter
.RE
.PP
section_name
.RS 4
The name of the section in which the parameter resides
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'20.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "20." 4.2
.\}

.sp

.nf
void swap(basic_settings_section & that);
.fi

.sp
Swaps two references to settings sections\&.
.RE


