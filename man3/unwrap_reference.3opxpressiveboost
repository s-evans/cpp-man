.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT UNWRAP_REF" 3 "" "" ""
.SH "NAME"
boost::xpressive::op::unwrap_reference \- unwrap_reference is a PolymorphicFunctionObject for unwrapping a boost::reference_wrapper<>\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_actions\&.hpp>


struct unwrap_reference {
  // member classes/structs/unions
  template<typename Sig> 
  struct result {
  };
  template<typename This, typename Ref> 
  struct result<This(Ref &)> {
    // types
    typedef boost::unwrap_reference< Ref >::type & type;
  };
  template<typename This, typename Ref> 
  struct result<This(Ref)> {
    // types
    typedef boost::unwrap_reference< Ref >::type & type;
  };

  // public member functions
  template<typename T> T & operator()(boost::reference_wrapper< T >) const;
};
.fi
.SH "DESCRIPTION"
.SS "unwrap_reference public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T> T & operator()(boost::reference_wrapper< T > r) const;
.fi

.sp

.PP
Parameters:
.RS 4
.PP
r
.RS 4
The
boost::reference_wrapper<T>
to unwrap\&.
.RE
.RE
.PP
Returns:
.RS 4
static_cast<T &>(r)
.RE
.RE


