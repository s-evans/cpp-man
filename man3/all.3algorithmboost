.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::algorithm::all \- \'All\' predicate
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/algorithm/string/predicate\&.hpp>


template<typename RangeT, typename PredicateT> 
  bool all(const RangeT & Input, PredicateT Pred);
.fi
.SH "DESCRIPTION"
.PP
This predicate holds it all its elements satisfy a given condition, represented by the predicate\&.
.PP

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
This function provides the strong exception\-safety guarantee
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
Input
.RS 4
An input sequence
.RE
.PP
Pred
.RS 4
A predicate
.RE
.RE
.PP
Returns:
.RS 4
The result of the test
.RE

