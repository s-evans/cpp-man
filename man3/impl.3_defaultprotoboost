.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE IM" 3 "" "" ""
.SH "NAME"
boost::proto::_default::impl
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/default\&.hpp>


template<typename Expr, typename State, typename Data> 
struct impl :  proto::transform_impl<Expr, State, Data> {
  // types
  typedef typename Expr::tag_type Tag;          // For exposition only
  typedef \fIsee\fR\fI\-\fR\fIbelow\fR               result_type;

  // public member functions
  result_type operator()(typename impl::expr_param, 
                         typename impl::state_param, 
                         typename impl::data_param) const;

  // public data members
  static Expr s_expr;  // For exposition only
  static State s_state;  // For exposition only
  static Data s_data;  // For exposition only
};
.fi
.SH "DESCRIPTION"
.PP
Let
OP
be the C++ operator corresponding to
Expr::proto_tag\&. (For example, if
Tag
is
proto::tag::plus, let
OP
be
+\&.)
.PP
The behavior of this class is specified in terms of the C++0x
decltype
keyword\&. In systems where this keyword is not available, Proto uses the Boost\&.Typeof library to approximate the behavior\&.
.SS "impl public types"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

typedef
\fIsee\fR\fI\-\fR\fIbelow\fR
result_type;

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
corresponds to a unary prefix operator, then the result type is

.sp
.if n \{\
.RS 4
.\}
.nf
decltype(
  OP Grammar()(proto::child(s_expr), s_state, s_data)
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
corresponds to a unary postfix operator, then the result type is

.sp
.if n \{\
.RS 4
.\}
.nf
decltype(
  Grammar()(proto::child(s_expr), s_state, s_data) OP
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
corresponds to a binary infix operator, then the result type is

.sp
.if n \{\
.RS 4
.\}
.nf
decltype(
  Grammar()(proto::left(s_expr), s_state, s_data) OP
  Grammar()(proto::right(s_expr), s_state, s_data)
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
is
proto::tag::subscript, then the result type is

.sp
.if n \{\
.RS 4
.\}
.nf
decltype(
  Grammar()(proto::left(s_expr), s_state, s_data) [
  Grammar()(proto::right(s_expr), s_state, s_data) ]
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
is
proto::tag::if_else_, then the result type is

.sp
.if n \{\
.RS 4
.\}
.nf
decltype(
  Grammar()(proto::child_c<0>(s_expr), s_state, s_data) ?
  Grammar()(proto::child_c<1>(s_expr), s_state, s_data) :
  Grammar()(proto::child_c<2>(s_expr), s_state, s_data)
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
is
proto::tag::function, then the result type is

.sp
.if n \{\
.RS 4
.\}
.nf
decltype(
  Grammar()(proto::child_c<0>(s_expr), s_state, s_data) (
  Grammar()(proto::child_c<1>(s_expr), s_state, s_data),
  \&.\&.\&.
  Grammar()(proto::child_c<N>(s_expr), s_state, s_data) )
)
.fi
.if n \{\
.RE
.\}
.sp

.RE
.RE

.SS "impl public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()(typename impl::expr_param expr, 
                       typename impl::state_param state, 
                       typename impl::data_param data) const;
.fi


                proto::_default<Grammar>::impl<Expr, State, Data>::operator()
              
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
corresponds to a unary prefix operator, then return

.sp
.if n \{\
.RS 4
.\}
.nf
OP Grammar()(proto::child(expr), state, data)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
corresponds to a unary postfix operator, then return

.sp
.if n \{\
.RS 4
.\}
.nf
Grammar()(proto::child(expr), state, data) OP
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
corresponds to a binary infix operator, then return

.sp
.if n \{\
.RS 4
.\}
.nf
Grammar()(proto::left(expr), state, data) OP
Grammar()(proto::right(expr), state, data)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
is
proto::tag::subscript, then return

.sp
.if n \{\
.RS 4
.\}
.nf
Grammar()(proto::left(expr), state, data) [
Grammar()(proto::right(expr), state, data) ]
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
is
proto::tag::if_else_, then return

.sp
.if n \{\
.RS 4
.\}
.nf
Grammar()(proto::child_c<0>(expr), state, data) ?
Grammar()(proto::child_c<1>(expr), state, data) :
Grammar()(proto::child_c<2>(expr), state, data)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
is
proto::tag::function, then return

.sp
.if n \{\
.RS 4
.\}
.nf
Grammar()(proto::child_c<0>(expr), state, data) (
Grammar()(proto::child_c<1>(expr), state, data),
\&.\&.\&.
Grammar()(proto::child_c<N>(expr), state, data) )
.fi
.if n \{\
.RE
.\}
.sp

.RE
.RE


