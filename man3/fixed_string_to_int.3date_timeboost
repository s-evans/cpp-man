.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION T" 3 "" "" ""
.SH "NAME"
boost::date_time::fixed_string_to_int \- Helper function for parsing fixed length strings into integers\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/format_date_parser\&.hpp>


template<typename int_type, typename charT> 
  int_type fixed_string_to_int(std::istreambuf_iterator< charT > & itr, 
                               std::istreambuf_iterator< charT > & stream_end, 
                               parse_match_result< charT > & mr, 
                               unsigned int length);
.fi
.SH "DESCRIPTION"
.PP
Will consume \'length\' number of characters from stream\&. Consumed character are transfered to
parse_match_result
struct\&. Returns \'\-1\' if no number can be parsed or incorrect number of digits in stream\&.

