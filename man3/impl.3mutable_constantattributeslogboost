.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS IMPL" 3 "" "" ""
.SH "NAME"
boost::log::attributes::mutable_constant::impl \- Factory implementation\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/mutable_constant\&.hpp>



// Factory implementation\&.

class impl : public attribute::impl {
public:
  // construct/copy/destruct
  explicit impl(value_type const &);
  explicit impl(value_type &&);

  // public member functions
  virtual attribute_value get_value();
  void set(value_type const &);
  void set(value_type &&);
  value_type get() const;
};
.fi
.SH "DESCRIPTION"
.SS "impl public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit impl(value_type const & value);
.fi

.sp
Initializing constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit impl(value_type && value);
.fi

.sp
Initializing constructor
.RE

.SS "impl public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual attribute_value get_value();
.fi

.sp

.PP
Returns:
.RS 4
The actual attribute value\&. It shall not return empty values (exceptions shall be used to indicate errors)\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void set(value_type const & value);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void set(value_type && value);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
value_type get() const;
.fi

.RE


