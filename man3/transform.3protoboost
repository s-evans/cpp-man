.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::proto::transform \- Inherit from this to make your type a PrimitiveTransform\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/impl\&.hpp>

template<typename PrimitiveTransform> 
struct transform {
  // types
  typedef PrimitiveTransform transform_type;

  // member classes/structs/unions
  template<typename This, typename Expr> 
  struct result<This(Expr)> {
    // types
    typedef typename PrimitiveTransform::template impl< Expr, \fIunspecified\fR, \fIunspecified\fR >::result_type type;
  };
  template<typename This, typename Expr, typename State> 
  struct result<This(Expr, State)> {
    // types
    typedef typename PrimitiveTransform::template impl< Expr, State, \fIunspecified\fR >::result_type type;
  };
  template<typename This, typename Expr, typename State, typename Data> 
  struct result<This(Expr, State, Data)> {
    // types
    typedef typename PrimitiveTransform::template impl< Expr, State, Data >::result_type type;
  };

  // public member functions
  template<typename Expr> 
    typename PrimitiveTransform::template impl<Expr &, \fIunspecified\fR, \fIunspecified\fR>::result_type 
    operator()(Expr &) const;
  template<typename Expr, typename State> 
    typename PrimitiveTransform::template impl<Expr &, State &, \fIunspecified\fR>::result_type 
    operator()(Expr &, State &) const;
  template<typename Expr, typename State> 
    typename PrimitiveTransform::template impl<Expr &, State const &, \fIunspecified\fR>::result_type 
    operator()(Expr &, State const &) const;
  template<typename Expr, typename State, typename Data> 
    typename PrimitiveTransform::template impl<Expr &, State &, Data &>::result_type 
    operator()(Expr &, State &, Data &) const;
  template<typename Expr, typename State, typename Data> 
    typename PrimitiveTransform::template impl<Expr &, State const &, Data &>::result_type 
    operator()(Expr &, State const &, Data &) const;
};
.fi
.SH "DESCRIPTION"
.SS "transform public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Expr> 
  typename PrimitiveTransform::template impl<Expr &, \fIunspecified\fR, \fIunspecified\fR>::result_type 
  operator()(Expr & expr) const;
.fi

.PP
Returns:
.RS 4

                typename PrimitiveTransform::template impl<Expr &, \fIunspecified\fR, \fIunspecified\fR>()(expr, \fIunspecified\fR, \fIunspecified\fR)
              .RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename Expr, typename State> 
  typename PrimitiveTransform::template impl<Expr &, State &, \fIunspecified\fR>::result_type 
  operator()(Expr & expr, State & state) const;
.fi

.PP
Returns:
.RS 4

                typename PrimitiveTransform::template impl<Expr &, State &, \fIunspecified\fR>()(expr, state, \fIunspecified\fR)
              .RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename Expr, typename State> 
  typename PrimitiveTransform::template impl<Expr &, State const &, \fIunspecified\fR>::result_type 
  operator()(Expr & expr, State const & state) const;
.fi

.PP
Returns:
.RS 4

                typename PrimitiveTransform::template impl<Expr &, State const &, \fIunspecified\fR>()(expr, state, \fIunspecified\fR)
              .RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename Expr, typename State, typename Data> 
  typename PrimitiveTransform::template impl<Expr &, State &, Data &>::result_type 
  operator()(Expr & expr, State & state, Data & data) const;
.fi

.PP
Returns:
.RS 4

                typename PrimitiveTransform::template impl<Expr &, State &, Data &>()(expr, state, data)
              .RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename Expr, typename State, typename Data> 
  typename PrimitiveTransform::template impl<Expr &, State const &, Data &>::result_type 
  operator()(Expr & expr, State const & state, Data & data) const;
.fi

.PP
Returns:
.RS 4

                typename PrimitiveTransform::template impl<Expr &, State const &, Data &>()(expr, state, data)
              .RE
.RE


