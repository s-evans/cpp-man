.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MACRO BOO" 3 "" "" ""
.SH "NAME"
BOOST_LOG_ATTRIBUTE_KEYWORD_TYPE \- The macro declares an attribute keyword type\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/expressions/keyword\&.hpp>

BOOST_LOG_ATTRIBUTE_KEYWORD_TYPE(keyword_, name_, value_type_)
.fi
.SH "DESCRIPTION"
.PP
The macro should be used at a namespace scope\&. It expands into an attribute keyword type definition, including the
tag
namespace and the keyword tag type within which has the following layout:
.PP

.sp
.if n \{\
.RS 4
.\}
.nf
namespace tag
{
  struct keyword_ :
    public boost::log::expressions::keyword_descriptor
  {
    typedef value_type_ value_type;
    static boost::log::attribute_name get_name();
  };
}

typedef boost::log::expressions::attribute_keyword< tag::keyword_ > keyword_type;

.fi
.if n \{\
.RE
.\}

.PP
The
get_name
method returns the attribute name\&.
.PP
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
This macro only defines the type of the keyword\&. To also define the keyword object, use the
BOOST_LOG_ATTRIBUTE_KEYWORD
macro instead\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
keyword_
.RS 4
Keyword name
.RE
.PP
name_
.RS 4
Attribute name string
.RE
.PP
value_type_
.RS 4
Attribute value type
.RE
.RE

