.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS GREG_MONTH" 3 "" "" ""
.SH "NAME"
boost::gregorian::greg_month \- Wrapper class to represent months in gregorian based calendar\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/gregorian/greg_month\&.hpp>


class greg_month : public greg_month_rep {
public:
  // types
  typedef date_time::months_of_year               month_enum;        
  typedef std::map< std::string, unsigned short > month_map_type;    
  typedef boost::shared_ptr< month_map_type >     month_map_ptr_type;

  // construct/copy/destruct
  greg_month(month_enum);
  greg_month(unsigned short);

  // public member functions
  operator unsigned short() const;
  unsigned short as_number() const;
  month_enum as_enum() const;
  const char * as_short_string() const;
  const char * as_long_string() const;
  const wchar_t * as_short_wstring() const;
  const wchar_t * as_long_wstring() const;
  const char * as_short_string(char) const;
  const char * as_long_string(char) const;
  const wchar_t * as_short_string(wchar_t) const;
  const wchar_t * as_long_string(wchar_t) const;

  // public static functions
  static month_map_ptr_type get_month_map_ptr();
};
.fi
.SH "DESCRIPTION"
.SS "greg_month public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
greg_month(month_enum theMonth);
.fi

Construct a month from the months_of_year enumeration\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
greg_month(unsigned short theMonth);
.fi

Construct from a short value\&. .RE

.SS "greg_month public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
operator unsigned short() const;
.fi

Convert the value back to a short\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
unsigned short as_number() const;
.fi

Returns month as number from 1 to 12\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
month_enum as_enum() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
const char * as_short_string() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
const char * as_long_string() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
const wchar_t * as_short_wstring() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
const wchar_t * as_long_wstring() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
const char * as_short_string(char) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
const char * as_long_string(char) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
const wchar_t * as_short_string(wchar_t) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
const wchar_t * as_long_string(wchar_t) const;
.fi

.RE

.SS "greg_month public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static month_map_ptr_type get_month_map_ptr();
.fi

Shared pointer to a map of Month strings (Names & Abbrev) & numbers\&. .RE


