.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::log::attributes::basic_clock \- A class of an attribute that makes an attribute value of the current date and time\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/clock\&.hpp>

template<typename TimeTraitsT> 
class basic_clock : public attribute {
public:
  // types
  typedef TimeTraitsT::time_type value_type;  // Generated value type\&. 

  // member classes/structs/unions

  // Attribute factory implementation\&.

  struct impl : public attribute::impl {

    // public member functions
    virtual attribute_value get_value();
  };

  // construct/copy/destruct
  basic_clock();
  explicit basic_clock(cast_source const &);
};
.fi
.SH "DESCRIPTION"
.PP
The attribute generates current time stamp as a value\&. The type of the attribute value is determined with time traits passed to the class template as a template parameter\&. The time traits provided by the library use
boost::posix_time::ptime
as the time type\&.
.PP
Time traits also determine the way time is acquired\&. There are two types of time traits provided by the library:
utc_time_traits
and
local_time_traits\&. The first returns UTC time, the second returns local time\&.
.SS "basic_clock public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_clock();
.fi

.sp
Default constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit basic_clock(cast_source const & source);
.fi

.sp
Constructor for casting support
.RE


