.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPL" 3 "" "" ""
.SH "NAME"
boost::log::expressions::attribute_keyword \- This class implements an expression template keyword\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/expressions/keyword\&.hpp>

template<typename DescriptorT, template< typename > class ActorT> 
struct attribute_keyword {
  // types
  typedef attribute_keyword                                                         this_type;             // Self type\&. 
  typedef DescriptorT                                                               descriptor_type;       // Attribute descriptor type\&. 
  typedef descriptor_type::value_type                                               value_type;            // Attribute value type\&. 
  typedef attribute_actor< value_type, fallback_to_none, descriptor_type, ActorT >  or_none_result_type;   // Expression with cached attribute name\&. 
  typedef attribute_actor< value_type, fallback_to_throw, descriptor_type, ActorT > or_throw_result_type;  // Expression with cached attribute name\&. 

  // public static functions
  static attribute_name get_name();
  static or_none_result_type or_none();
  static or_throw_result_type or_throw();
  template<typename DefaultT> 
    static attribute_actor< value_type, fallback_to_default< DefaultT >, descriptor_type, ActorT > 
    or_default(DefaultT const &);
};
.fi
.SH "DESCRIPTION"
.PP
This class implements an expression template keyword\&. It is used to start template expressions involving attribute values\&.
.SS "attribute_keyword public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static attribute_name get_name();
.fi

Returns attribute name\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static or_none_result_type or_none();
.fi

Generates an expression that extracts the attribute value or a default value\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
static or_throw_result_type or_throw();
.fi

Generates an expression that extracts the attribute value or throws an exception\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename DefaultT> 
  static attribute_actor< value_type, fallback_to_default< DefaultT >, descriptor_type, ActorT > 
  or_default(DefaultT const & def_val);
.fi

Generates an expression that extracts the attribute value or a default value\&. .RE


