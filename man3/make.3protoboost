.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE MA" 3 "" "" ""
.SH "NAME"
boost::proto::make \- A PrimitiveTransform that computes a type by evaluating any nested transforms and then constructs an object of that type\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/make\&.hpp>

template<typename T> 
struct make :  proto::transform< make<T> > {
  // member classes/structs/unions
  template<typename Expr, typename State, typename Data> 
  struct impl :  proto::transform_impl< Expr, State, Data > {
    // types
    typedef \fIsee\fR\fI\-\fR\fIbelow\fR result_type;

    // public member functions
    result_type operator()(typename impl::expr_param, 
                           typename impl::state_param, 
                           typename impl::data_param) const;
  };
};
.fi
.SH "DESCRIPTION"
.PP
The purpose of
proto::make<>
is to annotate a transform as an
ObjectTransform
so that
proto::when<>
knows how to apply it\&.
.PP
For the full description of the behavior of the
proto::make<>
transform, see the documentation for the nested
proto::make::impl<>
class template\&.

