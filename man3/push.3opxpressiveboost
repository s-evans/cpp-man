.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT PUSH" 3 "" "" ""
.SH "NAME"
boost::xpressive::op::push \- push is a PolymorphicFunctionObject for pushing an element into a container\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_actions\&.hpp>


struct push {
  // types
  typedef void result_type;

  // public member functions
  template<typename Sequence, typename Value> 
    void operator()(Sequence &, Value const &) const;
};
.fi
.SH "DESCRIPTION"
.SS "push public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Sequence, typename Value> 
  void operator()(Sequence & seq, Value const & val) const;
.fi

Equivalent to seq\&.push(val)\&. 
.PP
Parameters:
.RS 4
.PP
seq
.RS 4
The sequence into which the value should be pushed\&.
.RE
.PP
val
.RS 4
The value to push into the sequence\&.
.RE
.RE
.PP
Returns:
.RS 4
void
.RE
.RE


