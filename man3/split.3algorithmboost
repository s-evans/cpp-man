.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::algorithm::split \- Split algorithm\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/algorithm/string/split\&.hpp>


template<typename SequenceSequenceT, typename RangeT, typename PredicateT> 
  SequenceSequenceT & 
  split(SequenceSequenceT & Result, RangeT & Input, PredicateT Pred, 
        token_compress_mode_type eCompress = token_compress_off);
.fi
.SH "DESCRIPTION"
.PP
Tokenize expression\&. This function is equivalent to C strtok\&. Input sequence is split into tokens, separated by separators\&. Separators are given by means of the predicate\&.
.PP
Each part is copied and added as a new element to the output container\&. Thus the result container must be able to hold copies of the matches (in a compatible structure like std::string) or a reference to it (e\&.g\&. using the iterator range class)\&. Examples of such a container are
std::vector<std::string>
or
std::list<boost::iterator_range<std::string::iterator>>
.PP

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Prior content of the result will be overwritten\&.
.sp .5v
.RE

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
This function provides the strong exception\-safety guarantee
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
Input
.RS 4
A container which will be searched\&.
.RE
.PP
Pred
.RS 4
A predicate to identify separators\&. This predicate is supposed to return true if a given element is a separator\&.
.RE
.PP
Result
.RS 4
A container that can hold copies of references to the substrings
.RE
.PP
eCompress
.RS 4
If eCompress argument is set to token_compress_on, adjacent separators are merged together\&. Otherwise, every two separators delimit a token\&.
.RE
.RE
.PP
Returns:
.RS 4
A reference the result
.RE

