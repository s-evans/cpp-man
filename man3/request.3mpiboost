.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS REQUEST" 3 "" "" ""
.SH "NAME"
boost::mpi::request \- A request for a non\-blocking send or receive\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/mpi/request\&.hpp>


class request {
public:
  // construct/copy/destruct
  request();

  // public member functions
  status wait();
  optional< status > test();
  void cancel();
};
.fi
.SH "DESCRIPTION"
.PP
This structure contains information about a non\-blocking send or receive and will be returned from
isend
or
irecv, respectively\&.
.SS "request public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
request();
.fi

.sp
Constructs a NULL request\&.
.RE

.SS "request public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
status wait();
.fi

.sp
Wait until the communication associated with this request has completed, then return a
status
object describing the communication\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
optional< status > test();
.fi

.sp
Determine whether the communication associated with this request has completed successfully\&. If so, returns the
status
object describing the communication\&. Otherwise, returns an empty
optional<>
to indicate that the communication has not completed yet\&. Note that once
test()
returns a
status
object, the request has completed and
wait()
should not be called\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void cancel();
.fi

.sp
Cancel a pending communication, assuming it has not already been completed\&.
.RE


