.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::algorithm::join_if \- Conditional join algorithm\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/algorithm/string/regex\&.hpp>


template<typename SequenceSequenceT, typename Range1T, typename CharT, 
         typename RegexTraitsT> 
  range_value< SequenceSequenceT >::type 
  join_if(const SequenceSequenceT & Input, const Range1T & Separator, 
          const basic_regex< CharT, RegexTraitsT > & Rx, 
          match_flag_type Flags = match_default);
.fi
.SH "DESCRIPTION"
.PP
This algorithm joins all strings in a \'list\' into one long string\&. Segments are concatenated by given separator\&. Only segments that match the given regular expression will be added to the result
.PP
This is a specialization of join_if algorithm\&.
.PP

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
This function provides the strong exception\-safety guarantee
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
Flags
.RS 4
Regex options
.RE
.PP
Input
.RS 4
A container that holds the input strings\&. It must be a container\-of\-containers\&.
.RE
.PP
Rx
.RS 4
A regular expression
.RE
.PP
Separator
.RS 4
A string that will separate the joined segments\&.
.RE
.RE
.PP
Returns:
.RS 4
Concatenated string\&.
.RE

