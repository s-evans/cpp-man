.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT DEDUCE_DOMA" 3 "" "" ""
.SH "NAME"
boost::proto::deduce_domain \- A pseudo\-domain for use in functions and metafunctions that require a domain parameter\&. It indicates that the domain of the parent node should be inferred from the domains of the child nodes\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/domain\&.hpp>


struct deduce_domain {
};
.fi
.SH "DESCRIPTION"
.PP
When
proto::deduce_domain
is used as a domain &#8212; either explicitly or implicitly by
proto::make_expr(),
proto::unpack_expr(), or Proto\'s operator overloads &#8212; Proto will use the domains of the child expressions to compute the domain of the parent\&. It is done in such a way that (A) expressions in domains that share a common super\-domain are interoperable, and (B) expressions that are in the default domain (or a sub\-domain thereof) are interoperable with
\fIall\fR
expressions\&. The rules are as follows:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

                A sub\-domain is \fIstronger\fR than its super\-domain\&.
              .RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
proto::default_domain,
                proto::basic_default_domain
                and all their sub\-domains are \fIweaker\fR than all other domains\&.
              .RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
proto::basic_default_domain
                is weaker than
                proto::default_domain\&.
              .RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

                For each child, define a set of domains \fIS\fR\fIN\fR
                that includes the child\'s domain and all its super\-domains\&.
              .RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

                Define a set \fII\fR\fIS\fR that is the intersection of
                all the individual sets \fIS\fR\fIN\fR that don\'t contain
                proto::default_domain or
                proto::basic_default_domain\&.
              .RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

                Define a set \fII\fR\fIW\fR that is the intersection of
                all the individual sets \fIS\fR\fIN\fR that contain
                proto::default_domain or
                proto::basic_default_domain\&.
              .RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

                Define a set \fIP\fR that is the union of
                \fII\fR\fIS\fR and
                \fII\fR\fIW\fR\&.
              .RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

                The common domain is the strongest domain in set \fIP\fR, with the
                following caveats\&.
              .RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

                Let \fIU\fR be the union of all sets
                \fIS\fR\fIN\fR\&. If the result is 
                proto::default_domain or
                proto::basic_default_domain
                and \fIU\fR contains an element that is \fInot \fRproto::default_domain or
                proto::basic_default_domain,
                it is an error\&.
              .RE
.sp
.RE

.PP
Note: the above description sounds like it would be expensive to compute at compile time\&. In fact, it can all be done using C++ function overloading\&.

