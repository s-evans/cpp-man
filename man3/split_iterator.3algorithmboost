.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::algorithm::split_iterator \- split_iterator
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/algorithm/string/find_iterator\&.hpp>

template<typename IteratorT> 
class split_iterator : public iterator_facade< split_iterator< IteratorT >, const iterator_range< IteratorT >, forward_traversal_tag >
{
public:
  // construct/copy/destruct
  split_iterator();
  split_iterator(const split_iterator &);
  template<typename FinderT> split_iterator(IteratorT, IteratorT, FinderT);
  template<typename FinderT, typename RangeT> 
    split_iterator(RangeT &, FinderT);

  // public member functions
  bool eof() const;

  // private member functions
  const match_type & dereference() const;
  void increment();
  bool equal(const split_iterator &) const;
};
.fi
.SH "DESCRIPTION"
.PP
Split iterator encapsulates a Finder and allows for incremental searching in a string\&. Unlike the find iterator, split iterator iterates through gaps between matches\&.
.PP
Find iterator is a readable forward traversal iterator\&.
.PP
Dereferencing the iterator yields an iterator_range delimiting the current match\&.
.SS "split_iterator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
split_iterator();
.fi

.sp
Default constructor\&. Construct null iterator\&. All null iterators are equal\&.
.sp

.PP
Postconditions:
.RS 4
eof()==true
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
split_iterator(const split_iterator & Other);
.fi

.sp
Copy constructor\&. Construct a copy of the
split_iterator
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename FinderT> 
  split_iterator(IteratorT Begin, IteratorT End, FinderT Finder);
.fi

.sp
Constructor\&. Construct new
split_iterator
for a given finder and a range\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename FinderT, typename RangeT> 
  split_iterator(RangeT & Col, FinderT Finder);
.fi

.sp
Constructor\&. Construct new
split_iterator
for a given finder and a collection\&.
.RE

.SS "split_iterator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
bool eof() const;
.fi

.sp
Eof check\&. Check the eof condition\&. Eof condition means that there is nothing more to be searched i\&.e\&.
find_iterator
is after the last match\&.
.RE

.SS "split_iterator private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
const match_type & dereference() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void increment();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
bool equal(const split_iterator & Other) const;
.fi

.RE


