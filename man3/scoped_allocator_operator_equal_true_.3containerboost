.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT" 3 "" "" ""
.SH "NAME"
boost::container::scoped_allocator_operator_equal<true>
.SH "SYNOPSIS"
.\" scoped_allocator_operator_equal: Struct scoped_allocator_operator_equal<true>
.\" Struct scoped_allocator_operator_equal<true>: scoped_allocator_operator_equal
.\" equal_inner: Struct scoped_allocator_operator_equal<true>
.\" Struct scoped_allocator_operator_equal<true>: equal_inner

.sp
.nf
// In header: <boost/container/scoped_allocator\&.hpp>


struct scoped_allocator_operator_equal<true> :
  public boost::container::scoped_allocator_operator_equal< false >
{

  // public static functions
  template<typename IA1, typename IA2> 
    static bool equal_inner(const IA1 &, const IA2 &);
};
.fi
.SH "DESCRIPTION"
.SS "scoped_allocator_operator_equal public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" equal_inner: Struct scoped_allocator_operator_equal<true>
.\" Struct scoped_allocator_operator_equal<true>: equal_inner

.sp

.nf
template<typename IA1, typename IA2> 
  static bool equal_inner(const IA1 &, const IA2 &);
.fi

.RE


