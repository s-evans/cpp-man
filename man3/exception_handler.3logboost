.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLA" 3 "" "" ""
.SH "NAME"
boost::log::exception_handler
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/exception_handler\&.hpp>

template<typename SequenceT, typename HandlerT> 
class exception_handler {
public:
  // types
  typedef HandlerT handler_type;  // The exception handler type\&. 
  typedef void     result_type;   // The handler result type\&. 

  // construct/copy/destruct
  explicit exception_handler(handler_type const &);

  // public member functions
  void operator()() const;
};
.fi
.SH "DESCRIPTION"
.PP
An exception handler functional object\&. The handler aggregates a user\-defined functional object that will be called when one of the specified exception types is caught\&.
.SS "exception_handler public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit exception_handler(handler_type const & handler);
.fi

.sp
Initializing constructor\&. Creates an exception handler with the specified function object that will receive the exception\&.
.RE

.SS "exception_handler public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void operator()() const;
.fi

.sp
Exception launcher\&. Rethrows the current exception in order to detect its type and pass it to the aggregated function object\&.
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Must be called from within a
catch
statement\&.
.sp .5v
.RE

.RE


