.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION REGEX_MAT" 3 "" "" ""
.SH "NAME"
boost::xpressive::regex_match \- See if a regex matches a sequence from beginning to end\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_algorithms\&.hpp>


template<typename BidiIter> 
  bool regex_match(BidiIter begin, BidiIter end, 
                   match_results< BidiIter > & what, 
                   basic_regex< BidiIter > const & re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default);
template<typename BidiIter> 
  bool regex_match(BidiIter begin, BidiIter end, 
                   basic_regex< BidiIter > const & re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default);
template<typename Char> 
  bool regex_match(Char * begin, match_results< Char * > & what, 
                   basic_regex< Char * > const & re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default);
template<typename BidiRange, typename BidiIter> 
  bool regex_match(BidiRange & rng, match_results< BidiIter > & what, 
                   basic_regex< BidiIter > const & re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default, 
                   \fIunspecified\fR = 0);
template<typename BidiRange, typename BidiIter> 
  bool regex_match(BidiRange const & rng, match_results< BidiIter > & what, 
                   basic_regex< BidiIter > const & re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default, 
                   \fIunspecified\fR = 0);
template<typename Char> 
  bool regex_match(Char * begin, basic_regex< Char * > const & re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default);
template<typename BidiRange, typename BidiIter> 
  bool regex_match(BidiRange & rng, basic_regex< BidiIter > const & re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default, 
                   \fIunspecified\fR = 0);
template<typename BidiRange, typename BidiIter> 
  bool regex_match(BidiRange const & rng, basic_regex< BidiIter > const & re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default, 
                   \fIunspecified\fR = 0);
.fi
.SH "DESCRIPTION"
.PP
Determines whether there is an exact match between the regular expression
re, and all of the sequence
[begin, end)\&.
.PP

.PP
Parameters:
.RS 4
.PP
begin
.RS 4
The beginning of the sequence\&.
.RE
.PP
end
.RS 4
The end of the sequence\&.
.RE
.PP
flags
.RS 4
Optional match flags, used to control how the expression is matched against the sequence\&. (See
match_flag_type\&.)
.RE
.PP
re
.RS 4
The regular expression object to use
.RE
.PP
what
.RS 4
The
match_results
struct into which the sub_matches will be written
.RE
.RE
.PP
Requires:
.RS 4
Type
BidiIter
meets the requirements of a Bidirectional Iterator (24\&.1\&.4)\&.
.RE
.PP
Requires:
.RS 4
[begin,end)
denotes a valid iterator range\&.
.RE
.PP
Returns:
.RS 4
true
if a match is found,
false
otherwise
.RE
.PP
Throws:
.RS 4
regex_error
on stack exhaustion
.RE

