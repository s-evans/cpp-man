.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION STRICT_GET" 3 "" "" ""
.SH "NAME"
boost::strict_get \- Retrieves a value of a specified type from a given variant\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/variant/get\&.hpp>


template<typename U, typename T1, typename T2, \&.\&.\&., typename TN> 
  U * strict_get(variant<T1, T2, \&.\&.\&., TN> * operand);
template<typename U, typename T1, typename T2, \&.\&.\&., typename TN> 
  const U * strict_get(const variant<T1, T2, \&.\&.\&., TN> * operand);
template<typename U, typename T1, typename T2, \&.\&.\&., typename TN> 
  U & strict_get(variant<T1, T2, \&.\&.\&., TN> & operand);
template<typename U, typename T1, typename T2, \&.\&.\&., typename TN> 
  const U & strict_get(const variant<T1, T2, \&.\&.\&., TN> & operand);
.fi
.SH "DESCRIPTION"
.sp
Acts exactly like relaxed_get but does a compile time check that type U is one of the types that can be stored in variant\&.

