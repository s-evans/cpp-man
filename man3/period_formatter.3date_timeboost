.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::date_time::period_formatter \- Not a facet, but a class used to specify and control period formats\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/period_formatter\&.hpp>

template<typename CharT, 
         typename OutItrT = std::ostreambuf_iterator<CharT, std::char_traits<CharT> > > 
class period_formatter {
public:
  // types
  typedef std::basic_string< CharT >                     string_type;    
  typedef CharT                                          char_type;      
  typedef std::basic_string< char_type >::const_iterator const_itr_type; 
  typedef std::vector< std::basic_string< CharT > >      collection_type;

  enum range_display_options { AS_OPEN_RANGE, AS_CLOSED_RANGE };

  // construct/copy/destruct
  period_formatter(range_display_options = AS_CLOSED_RANGE, 
                   const char_type *const = default_period_separator, 
                   const char_type *const = default_period_start_delimeter, 
                   const char_type *const = default_period_open_range_end_delimeter, 
                   const char_type *const = default_period_closed_range_end_delimeter);

  // public member functions
  OutItrT put_period_separator(OutItrT &) const;
  OutItrT put_period_start_delimeter(OutItrT &) const;
  OutItrT put_period_end_delimeter(OutItrT &) const;
  range_display_options range_option() const;
  void range_option(range_display_options) const;
  void delimiter_strings(const string_type &, const string_type &, 
                         const string_type &, const string_type &);
  template<typename period_type, typename facet_type> 
    OutItrT put_period(OutItrT, std::ios_base &, char_type, 
                       const period_type &, const facet_type &) const;

  // public data members
  static const char_type default_period_separator;
  static const char_type default_period_start_delimeter;
  static const char_type default_period_open_range_end_delimeter;
  static const char_type default_period_closed_range_end_delimeter;
};
.fi
.SH "DESCRIPTION"
.PP
Provides settings for the following:
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
period_separator
<ndash></ndash>
default \'/\'
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
period_open_start_delimeter
<ndash></ndash>
default \'[\'
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
period_open_range_end_delimeter
<ndash></ndash>
default \')\'
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
period_closed_range_end_delimeter
<ndash></ndash>
default \']\'
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
display_as_open_range, display_as_closed_range
<ndash></ndash>
default closed_range
.RE
.sp
.RE

.PP
Thus the default formatting for a period is as follows:

.sp
.if n \{\
.RS 4
.\}
.nf
[period\&.start()/period\&.last()]

.fi
.if n \{\
.RE
.\}
.sp
So for a typical date_period this would be

.sp
.if n \{\
.RS 4
.\}
.nf
[2004\-Jan\-04/2004\-Feb\-01]

.fi
.if n \{\
.RE
.\}
.sp
where the date formatting is controlled by the date facet
.SS "period_formatter public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
period_formatter(range_display_options range_option_in = AS_CLOSED_RANGE, 
                 const char_type *const period_separator = default_period_separator, 
                 const char_type *const period_start_delimeter = default_period_start_delimeter, 
                 const char_type *const period_open_range_end_delimeter = default_period_open_range_end_delimeter, 
                 const char_type *const period_closed_range_end_delimeter = default_period_closed_range_end_delimeter);
.fi

Constructor that sets up period formatter options <ndash></ndash> default should suffice most cases\&. .RE

.SS "period_formatter public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
OutItrT put_period_separator(OutItrT & oitr) const;
.fi

Puts the characters between period elements into stream <ndash></ndash> default is /\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
OutItrT put_period_start_delimeter(OutItrT & oitr) const;
.fi

Puts the period start characters into stream <ndash></ndash> default is [\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
OutItrT put_period_end_delimeter(OutItrT & oitr) const;
.fi

Puts the period end characters into stream as controled by open/closed range setting\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
range_display_options range_option() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
void range_option(range_display_options option) const;
.fi

Reset the range_option control\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void delimiter_strings(const string_type &, const string_type &, 
                       const string_type &, const string_type &);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename period_type, typename facet_type> 
  OutItrT put_period(OutItrT next, std::ios_base & a_ios, char_type a_fill, 
                     const period_type & p, const facet_type & facet) const;
.fi

Generic code to output a period <ndash></ndash> no matter the period type\&. This generic code will output any period using a facet to to output the \'elements\'\&. For example, in the case of a date_period the elements will be instances of a date which will be formatted according the to setup in the passed facet parameter\&.
.sp
The steps for formatting a period are always the same:
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
put the start delimiter
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
put start element
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
put the separator
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
put either last or end element depending on range settings
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
put end delimeter depending on range settings
.RE
.RS 4

.sp
Thus for a typical date period the result might look like this:

.sp
.if n \{\
.RS 4
.\}
.nf
[March 01, 2004/June 07, 2004]   <\-\- closed range
[March 01, 2004/June 08, 2004)   <\-\- open range

.fi
.if n \{\
.RE
.\}
.sp

.RE


