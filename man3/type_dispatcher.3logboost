.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TYPE_DISPATC" 3 "" "" ""
.SH "NAME"
boost::log::type_dispatcher \- A type dispatcher interface\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/type_dispatch/type_dispatcher\&.hpp>


class type_dispatcher {
public:
  // member classes/structs/unions
  template<typename T> 
  class callback {
  public:

    // public member functions
    void operator()(T const &) const;
    explicit operator bool() const noexcept;
    bool operator!() const noexcept;
  };
  // construct/copy/destruct
  explicit type_dispatcher(get_callback_impl_type) noexcept;
  type_dispatcher(type_dispatcher const &) = default;
  type_dispatcher & operator=(type_dispatcher const &) = default;
  ~type_dispatcher();

  // public member functions
  template<typename T> callback< T > get_callback();
};
.fi
.SH "DESCRIPTION"
.PP
All type dispatchers support this interface\&. It is used to acquire the visitor interface for the requested type\&.
.SS "type_dispatcher public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit type_dispatcher(get_callback_impl_type get_callback_impl) noexcept;
.fi

.sp
Initializing constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
type_dispatcher(type_dispatcher const & that) = default;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
type_dispatcher & operator=(type_dispatcher const & that) = default;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
~type_dispatcher();
.fi

.RE

.SS "type_dispatcher public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T> callback< T > get_callback();
.fi

.sp
The method requests a callback for the value of type
T
.sp

.PP
Returns:
.RS 4
The type\-specific callback or an empty value, if the type is not supported
.RE
.RE


