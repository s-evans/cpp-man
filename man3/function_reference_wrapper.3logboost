.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT " 3 "" "" ""
.SH "NAME"
boost::log::function_reference_wrapper \- Reference wrapper for function objects\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/functional/fun_ref\&.hpp>

template<typename FunT> 
struct function_reference_wrapper {
  // types
  typedef FunT::result_type result_type;

  // construct/copy/destruct
  explicit function_reference_wrapper(FunT &);

  // public member functions
  result_type operator()() const;
  template<typename\&.\&.\&. ArgsT> result_type operator()(ArgsT const &\&.\&.\&.) const;
};
.fi
.SH "DESCRIPTION"
.SS "function_reference_wrapper public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit function_reference_wrapper(FunT & fun);
.fi

.RE

.SS "function_reference_wrapper public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename\&.\&.\&. ArgsT> 
  result_type operator()(ArgsT const &\&.\&.\&. args) const;
.fi

.RE


