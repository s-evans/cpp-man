.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS NAMED_SCOPE" 3 "" "" ""
.SH "NAME"
boost::log::attributes::named_scope \- A class of an attribute that holds stack of named scopes of the current thread\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/named_scope\&.hpp>


class named_scope : public attribute {
public:
  // types
  typedef named_scope_list       value_type;   // Scope names stack (the attribute value type) 
  typedef value_type::value_type scope_entry;  // Scope entry\&. 

  // member classes/structs/unions

  // Sentry object class to automatically push and pop scopes\&.

  struct sentry {
    // construct/copy/destruct
    sentry(string_literal const &, string_literal const &, unsigned int, 
           scope_entry::scope_name_type = scope_entry::general) noexcept;
    sentry(sentry const &) = delete;
    sentry & operator=(sentry const &) = delete;
    ~sentry();
  };

  // construct/copy/destruct
  named_scope();
  explicit named_scope(cast_source const &);

  // public static functions
  static void push_scope(scope_entry const &) noexcept;
  static void pop_scope() noexcept;
  static value_type const & get_scopes();
};
.fi
.SH "DESCRIPTION"
.PP
The basic_named_scope attribute is essentially a hook to the thread\-specific instance of scope list\&. This means that the attribute will generate different values if get_value is called in different threads\&. The attribute generates value with stored type
basic_named_scope_list< CharT >\&.
.PP
The attribute class can also be used to gain access to the scope stack instance, e\&.g\&. to get its copy or to push or pop a scope entry\&. However, it is highly not recommended to maintain scope list manually\&. Use
BOOST_LOG_NAMED_SCOPE
or
BOOST_LOG_FUNCTION
macros instead\&.
.SS "named_scope public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
named_scope();
.fi

.sp
Constructor\&. Creates an attribute\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit named_scope(cast_source const & source);
.fi

.sp
Constructor for casting support
.RE

.SS "named_scope public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static void push_scope(scope_entry const & entry) noexcept;
.fi

.sp
The method pushes the scope to the back of the current thread\'s scope list
.sp
\fBThrows:\fR
Nothing\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static void pop_scope() noexcept;
.fi

.sp
The method pops the last pushed scope from the current thread\'s scope list
.sp
\fBThrows:\fR
Nothing\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
static value_type const & get_scopes();
.fi

.sp

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
The returned reference is only valid until the current thread ends\&. The scopes in the returned container may change if the execution scope is changed (i\&.e\&. either
push_scope
or
pop_scope
is called)\&. User has to copy the stack if he wants to keep it intact regardless of the execution scope\&.
.sp .5v
.RE

.PP
Returns:
.RS 4
The current thread\'s list of scopes
.RE
.RE


