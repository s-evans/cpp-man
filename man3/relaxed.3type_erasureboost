.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT RELAXED" 3 "" "" ""
.SH "NAME"
boost::type_erasure::relaxed
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_erasure/relaxed\&.hpp>


struct relaxed : public boost::mpl::vector0<> {
};
.fi
.SH "DESCRIPTION"
.PP
This special concept enables various useful default behavior that makes any act like an ordinary object\&. By default any forwards all operations to the underlying type, and provides only the operations that are specified in its
Concept\&.
.PP
In detail,
relaxed
enables the following:
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A raw value can be assigned to an any\&. This will replace the value stored by the any\&. (But note that if
assignable
is present, it takes priority\&.)
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
copy assignment of any uses the copy constructor if it can\'t use
assignable
(either because
assignable
is missing, or because the stored types do not match)\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
default construction of any is allowed and creates a null any\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
equality_comparable: If the types do not match, it will return false\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
less_than_comparable: If the types do not match, the ordering will be according to
std::type_info::before\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
if the arguments to any other function do not match, it will throw a
bad_function_call
exception instead of having undefined behavior\&.
.RE
.sp
.RE


