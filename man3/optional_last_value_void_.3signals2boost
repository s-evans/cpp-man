.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS OPTIONA" 3 "" "" ""
.SH "NAME"
boost::signals2::optional_last_value<void> \- Evaluate an InputIterator sequence\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/signals2/optional_last_value\&.hpp>


class optional_last_value<void> {
public:
  // types
  typedef void result_type;

  // invocation
  template<typename InputIterator> 
    result_type operator()(InputIterator, InputIterator) const;
};
.fi
.SH "DESCRIPTION"
.PP
This specialization of
signals2::optional_last_value
is provided to cope with the fact that there is no such thing as an
optional<void>, which
optional_last_value
would otherwise try to use as its
result_type\&. This specialization instead sets the
result_type
to be
void\&.
.SS "optional_last_value invocation"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename InputIterator> 
  result_type operator()(InputIterator first, InputIterator last) const;
.fi

.PP
Effects:
.RS 4
Attempts to dereference every iterator in the sequence
[first, last)\&.
.RE
.RE


