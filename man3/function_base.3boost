.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS FUNCTION_BASE" 3 "" "" ""
.SH "NAME"
boost::function_base \- The common base class for all Boost\&.Function objects\&. Objects of type function_base may not be created directly\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/function\&.hpp>


class function_base {
public:

  // capacity
  bool empty() const;

  // target access
  template<typename Functor> Functor* target();
  template<typename Functor> const Functor* target() const;
  template<typename Functor> bool contains(const Functor&) const;
  const std::type_info& target_type() const;
};
.fi
.SH "DESCRIPTION"
.SS "function_base capacity"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
bool empty() const;
.fi

.PP
Returns:
.RS 4
false
if
this
has a target, and
true
otherwise\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE

.SS "function_base target access"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Functor> Functor* target();
template<typename Functor> const Functor* target() const;
.fi

.PP
Returns:
.RS 4
If
this
stores a target of type
Functor, returns the address of the target\&. Otherwise, returns the NULL pointer\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename Functor> bool contains(const Functor& f) const;
.fi

.PP
Returns:
.RS 4
true
if
this\->target<Functor>()
is non\-NULL and
function_equal(*(this\->target<Functor>()), f)
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
const std::type_info& target_type() const;
.fi

.PP
Returns:
.RS 4
typeid
of the target function object, or
typeid(void)
if
this\->empty()\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


