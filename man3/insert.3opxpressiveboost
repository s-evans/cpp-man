.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT INSERT" 3 "" "" ""
.SH "NAME"
boost::xpressive::op::insert \- insert is a PolymorphicFunctionObject for inserting a value or a sequence of values into a sequence container, an associative container, or a string\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_actions\&.hpp>


struct insert {
  // member classes/structs/unions
  template<typename Sig> 
  struct result {
    // types
    typedef \fIunspecified\fR type;
  };

  // public member functions
  template<typename Cont, typename A0> 
    result< insert(Cont &, A0 const &)>::type 
    operator()(Cont &, A0 const &) const;
  template<typename Cont, typename A0, typename A1> 
    result< insert(Cont &, A0 const &, A1 const &)>::type 
    operator()(Cont &, A0 const &, A1 const &) const;
  template<typename Cont, typename A0, typename A1, typename A2> 
    result< insert(Cont &, A0 const &, A1 const &, A2 const &)>::type 
    operator()(Cont &, A0 const &, A1 const &, A2 const &) const;
  template<typename Cont, typename A0, typename A1, typename A2, typename A3> 
    result< insert(Cont &, A0 const &, A1 const &, A2 const &, A3 const &)>::type 
    operator()(Cont &, A0 const &, A1 const &, A2 const &, A3 const &) const;
};
.fi
.SH "DESCRIPTION"
.SS "insert public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Cont, typename A0> 
  result< insert(Cont &, A0 const &)>::type 
  operator()(Cont & cont, A0 const & a0) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename Cont, typename A0, typename A1> 
  result< insert(Cont &, A0 const &, A1 const &)>::type 
  operator()(Cont & cont, A0 const & a0, A1 const & a1) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename Cont, typename A0, typename A1, typename A2> 
  result< insert(Cont &, A0 const &, A1 const &, A2 const &)>::type 
  operator()(Cont & cont, A0 const & a0, A1 const & a1, A2 const & a2) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename Cont, typename A0, typename A1, typename A2, typename A3> 
  result< insert(Cont &, A0 const &, A1 const &, A2 const &, A3 const &)>::type 
  operator()(Cont & cont, A0 const & a0, A1 const & a1, A2 const & a2, 
             A3 const & a3) const;
.fi

.sp

.PP
Parameters:
.RS 4
.PP
a0
.RS 4
A value, iterator, or count
.RE
.PP
a1
.RS 4
A value, iterator, string, count, or character
.RE
.PP
a2
.RS 4
A value, iterator, or count
.RE
.PP
a3
.RS 4
A count
.RE
.PP
cont
.RS 4
The container into which to insert the element(s)
.RE
.RE
.PP
Returns:
.RS 4

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
For the form
insert()(cont, a0), return
cont\&.insert(a0)\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
For the form
insert()(cont, a0, a1), return
cont\&.insert(a0, a1)\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
For the form
insert()(cont, a0, a1, a2), return
cont\&.insert(a0, a1, a2)\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
For the form
insert()(cont, a0, a1, a2, a3), return
cont\&.insert(a0, a1, a2, a3)\&.
.RE
.RS 4

.RE
.RE


