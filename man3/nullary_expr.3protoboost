.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::proto::nullary_expr \- A metafunction for generating nullary expression types, a grammar element for matching nullary expressions, and a PrimitiveTransform that returns the current expression unchanged\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/traits\&.hpp>

template<typename Tag, typename T> 
struct nullary_expr :  proto::transform< nullary_expr<Tag, T> > {
  // types
  typedef proto::expr< Tag, proto::term< T > >       type;         
  typedef proto::basic_expr< Tag, proto::term< T > > proto_grammar;

  // member classes/structs/unions
  template<typename Expr, typename State, typename Data> 
  struct impl :  proto::transform_impl< Expr, State, Data > {
    // types
    typedef Expr result_type;

    // public member functions
    Expr operator()(typename impl::expr_param, typename impl::state_param, 
                    typename impl::data_param) const;
  };
};
.fi
.SH "DESCRIPTION"
.PP
Use
proto::nullary_expr<proto::_, proto::_>
as a grammar element to match any nullary expression\&.

