.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLA" 3 "" "" ""
.SH "NAME"
boost::log::strictest_lock \- The metafunction selects the most strict lock type of the specified\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/strictest_lock\&.hpp>

template<typename\&.\&.\&. LocksT> 
struct strictest_lock {
  // types
  typedef implementation_defined type;
};
.fi
.SH "DESCRIPTION"
.PP
The template supports all lock types provided by the Boost\&.Thread library (except for
upgrade_to_unique_lock), plus additional pseudo\-lock
no_lock
that indicates no locking at all\&. Exclusive locks are considered the strictest, shared locks are weaker, and
no_lock
is the weakest\&.

