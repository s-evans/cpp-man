.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMP" 3 "" "" ""
.SH "NAME"
boost::adl_move_swap
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/move/adl_move_swap\&.hpp>


template<typename T> void adl_move_swap(T & x, T & y);
.fi
.SH "DESCRIPTION"
.PP
Exchanges the values of a and b, using Argument Dependent Lookup (ADL) to select a specialized swap function if available\&. If no specialized swap function is available, std::swap is used\&.
.PP
\fBException\fR: If T uses Boost\&.Move\'s move emulation and the compiler has no rvalue references then:
.PP

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If T has a
T::swap(T&)
member, that member is called\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise a move\-based swap is called, equivalent to:
T t(::boost::move(x)); x = ::boost::move(y); y = ::boost::move(t);\&.
.RE
.sp
.RE


