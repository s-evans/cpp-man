.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TE" 3 "" "" ""
.SH "NAME"
boost::random::extreme_value_distribution
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/extreme_value_distribution\&.hpp>

template<typename RealType = double> 
class extreme_value_distribution {
public:
  // types
  typedef RealType result_type;
  typedef RealType input_type; 

  // member classes/structs/unions

  class param_type {
  public:
    // types
    typedef extreme_value_distribution distribution_type;

    // construct/copy/destruct
    explicit param_type(RealType = 1\&.0, RealType = 1\&.0);

    // public member functions
    RealType a() const;
    RealType b() const;

    // friend functions
    template<typename CharT, typename Traits> 
      friend std::basic_ostream< CharT, Traits > & 
      operator<<(std::basic_ostream< CharT, Traits > &, const param_type &);
    template<typename CharT, typename Traits> 
      friend std::basic_istream< CharT, Traits > & 
      operator>>(std::basic_istream< CharT, Traits > &, const param_type &);
    friend bool operator==(const param_type &, const param_type &);
    friend bool operator!=(const param_type &, const param_type &);
  };

  // construct/copy/destruct
  explicit extreme_value_distribution(RealType = 1\&.0, RealType = 1\&.0);
  explicit extreme_value_distribution(const param_type &);

  // public member functions
  template<typename URNG> RealType operator()(URNG &) const;
  template<typename URNG> 
    RealType operator()(URNG &, const param_type &) const;
  RealType a() const;
  RealType b() const;
  RealType min() const;
  RealType max() const;
  param_type param() const;
  void param(const param_type &);
  void reset();

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const extreme_value_distribution &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, 
               const extreme_value_distribution &);
  friend bool operator==(const extreme_value_distribution &, 
                         const extreme_value_distribution &);
  friend bool operator!=(const extreme_value_distribution &, 
                         const extreme_value_distribution &);
};
.fi
.SH "DESCRIPTION"
.PP
The extreme value distribution is a real valued distribution with two parameters a and b\&.
.PP
It has
\&\s-2\u[1]\d\s+2[IMAGE]\&\s-2\u[2]\d\s+2 [$\displaystyle p(x) = \frac{1}{b}e^{\frac{a-x}{b} - e^\frac{a-x}{b}}$]\&.
.SS "extreme_value_distribution public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit extreme_value_distribution(RealType a = 1\&.0, RealType b = 1\&.0);
.fi

.sp
Constructs an
extreme_value_distribution
from its "a" and "b" parameters\&.
.sp
Requires: b > 0
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit extreme_value_distribution(const param_type & param);
.fi

.sp
Constructs an
extreme_value_distribution
from its parameters\&.
.RE

.SS "extreme_value_distribution public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename URNG> RealType operator()(URNG & urng) const;
.fi

.sp
Returns a random variate distributed according to the
extreme_value_distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename URNG> 
  RealType operator()(URNG & urng, const param_type & param) const;
.fi

.sp
Returns a random variate distributed accordint to the extreme value distribution with parameters specified by
param\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
RealType a() const;
.fi

.sp
Returns the "a" parameter of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
RealType b() const;
.fi

.sp
Returns the "b" parameter of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
RealType min() const;
.fi

.sp
Returns the smallest value that the distribution can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
RealType max() const;
.fi

.sp
Returns the largest value that the distribution can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
param_type param() const;
.fi

.sp
Returns the parameters of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
void param(const param_type & param);
.fi

.sp
Sets the parameters of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
void reset();
.fi

.sp
Effects: Subsequent uses of the distribution do not depend on values produced by any engine prior to invoking reset\&.
.RE

.SS "extreme_value_distribution friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const extreme_value_distribution & wd);
.fi

.sp
Writes an
extreme_value_distribution
to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const extreme_value_distribution & wd);
.fi

.sp
Reads an
extreme_value_distribution
from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const extreme_value_distribution & lhs, 
                       const extreme_value_distribution & rhs);
.fi

.sp
Returns true if the two instances of
extreme_value_distribution
will return identical sequences of values given equal generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const extreme_value_distribution & lhs, 
                       const extreme_value_distribution & rhs);
.fi

.sp
Returns true if the two instances of
extreme_value_distribution
will return different sequences of values given equal generators\&.
.RE


