.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEM" 3 "" "" ""
.SH "NAME"
boost::intrusive::trivial_value_traits
.SH "SYNOPSIS"
.\" value_type: Struct template trivial_value_traits
.\" Struct template trivial_value_traits: value_type
.\" trivial_value_traits: Struct template trivial_value_traits
.\" Struct template trivial_value_traits: trivial_value_traits
.\" to_value_ptr: Struct template trivial_value_traits
.\" Struct template trivial_value_traits: to_value_ptr
.\" to_node_ptr: Struct template trivial_value_traits
.\" Struct template trivial_value_traits: to_node_ptr
.\" pointer: Struct template trivial_value_traits
.\" Struct template trivial_value_traits: pointer
.\" node_traits: Struct template trivial_value_traits
.\" Struct template trivial_value_traits: node_traits
.\" node_ptr: Struct template trivial_value_traits
.\" Struct template trivial_value_traits: node_ptr
.\" const_pointer: Struct template trivial_value_traits
.\" Struct template trivial_value_traits: const_pointer
.\" const_node_ptr: Struct template trivial_value_traits
.\" Struct template trivial_value_traits: const_node_ptr

.sp
.nf
// In header: <boost/intrusive/trivial_value_traits\&.hpp>

template<typename NodeTraits, link_mode_type LinkMode = safe_link> 
struct trivial_value_traits {
  // types
  typedef NodeTraits                  node_traits;   
  typedef node_traits::node_ptr       node_ptr;      
  typedef node_traits::const_node_ptr const_node_ptr;
  typedef node_traits::node           value_type;    
  typedef node_ptr                    pointer;       
  typedef const_node_ptr              const_pointer; 

  // public static functions
  static node_ptr to_node_ptr(value_type &);
  static const_node_ptr to_node_ptr(const value_type &);
  static const pointer & to_value_ptr(const node_ptr &);
  static const const_pointer & to_value_ptr(const const_node_ptr &);

  // public data members
  static const link_mode_type link_mode;
};
.fi
.SH "DESCRIPTION"
.PP
This value traits template is used to create value traits from user defined node traits where value_traits::value_type and node_traits::node should be equal
.SS "trivial_value_traits public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" to_node_ptr: Struct template trivial_value_traits
.\" Struct template trivial_value_traits: to_node_ptr

.sp

.nf
static node_ptr to_node_ptr(value_type & value);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" to_node_ptr: Struct template trivial_value_traits
.\" Struct template trivial_value_traits: to_node_ptr

.sp

.nf
static const_node_ptr to_node_ptr(const value_type & value);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
.\" to_value_ptr: Struct template trivial_value_traits
.\" Struct template trivial_value_traits: to_value_ptr

.sp

.nf
static const pointer & to_value_ptr(const node_ptr & n);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" to_value_ptr: Struct template trivial_value_traits
.\" Struct template trivial_value_traits: to_value_ptr

.sp

.nf
static const const_pointer & to_value_ptr(const const_node_ptr & n);
.fi

.RE


