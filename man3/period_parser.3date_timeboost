.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::date_time::period_parser \- Not a facet, but a class used to specify and control period parsing\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/period_parser\&.hpp>

template<typename date_type, typename CharT> 
class period_parser {
public:
  // types
  typedef std::basic_string< CharT >                string_type;    
  typedef CharT                                     char_type;      
  typedef std::istreambuf_iterator< CharT >         stream_itr_type;
  typedef string_parse_tree< CharT >                parse_tree_type;
  typedef parse_tree_type::parse_match_result_type  match_results;  
  typedef std::vector< std::basic_string< CharT > > collection_type;

  enum period_range_option { AS_OPEN_RANGE, AS_CLOSED_RANGE };

  // construct/copy/destruct
  period_parser(period_range_option = AS_CLOSED_RANGE, 
                const char_type *const = default_period_separator, 
                const char_type *const = default_period_start_delimeter, 
                const char_type *const = default_period_open_range_end_delimeter, 
                const char_type *const = default_period_closed_range_end_delimeter);
  period_parser(const period_parser< date_type, CharT > &);

  // public member functions
  period_range_option range_option() const;
  void range_option(period_range_option);
  collection_type delimiter_strings() const;
  void delimiter_strings(const string_type &, const string_type &, 
                         const string_type &, const string_type &);
  template<typename period_type, typename duration_type, typename facet_type> 
    period_type get_period(stream_itr_type &, stream_itr_type &, 
                           std::ios_base &, const period_type &, 
                           const duration_type &, const facet_type &) const;

  // private member functions
  void consume_delim(stream_itr_type &, stream_itr_type &, 
                     const string_type &) const;

  // public data members
  static const char_type default_period_separator;
  static const char_type default_period_start_delimeter;
  static const char_type default_period_open_range_end_delimeter;
  static const char_type default_period_closed_range_end_delimeter;
};
.fi
.SH "DESCRIPTION"
.PP
Provides settings for the following:
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
period_separator
<ndash></ndash>
default \'/\'
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
period_open_start_delimeter
<ndash></ndash>
default \'[\'
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
period_open_range_end_delimeter
<ndash></ndash>
default \')\'
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
period_closed_range_end_delimeter
<ndash></ndash>
default \']\'
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
display_as_open_range, display_as_closed_range
<ndash></ndash>
default closed_range
.RE
.sp
.RE

.PP
For a typical date_period, the contents of the input stream would be

.sp
.if n \{\
.RS 4
.\}
.nf
[2004\-Jan\-04/2004\-Feb\-01]

.fi
.if n \{\
.RE
.\}
.sp
where the date format is controlled by the date facet
.SS "period_parser public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
period_parser(period_range_option range_opt = AS_CLOSED_RANGE, 
              const char_type *const period_separator = default_period_separator, 
              const char_type *const period_start_delimeter = default_period_start_delimeter, 
              const char_type *const period_open_range_end_delimeter = default_period_open_range_end_delimeter, 
              const char_type *const period_closed_range_end_delimeter = default_period_closed_range_end_delimeter);
.fi

Constructor that sets up period parser options\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
period_parser(const period_parser< date_type, CharT > & p_parser);
.fi

.RE

.SS "period_parser public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
period_range_option range_option() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void range_option(period_range_option option);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
collection_type delimiter_strings() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
void delimiter_strings(const string_type & separator, 
                       const string_type & start_delim, 
                       const string_type & open_end_delim, 
                       const string_type & closed_end_delim);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename period_type, typename duration_type, typename facet_type> 
  period_type get_period(stream_itr_type & sitr, stream_itr_type & stream_end, 
                         std::ios_base & a_ios, const period_type &, 
                         const duration_type & dur_unit, 
                         const facet_type & facet) const;
.fi

Generic code to parse a period <ndash></ndash> no matter the period type\&. This generic code will parse any period using a facet to to get the \'elements\'\&. For example, in the case of a date_period the elements will be instances of a date which will be parsed according the to setup in the passed facet parameter\&.
.sp
The steps for parsing a period are always the same:
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
consume the start delimiter
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
get start element
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
consume the separator
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
get either last or end element depending on range settings
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
consume the end delimeter depending on range settings
.RE
.RS 4

.sp
Thus for a typical date period the contents of the input stream might look like this:

.sp
.if n \{\
.RS 4
.\}
.nf
[March 01, 2004/June 07, 2004]   <\-\- closed range
[March 01, 2004/June 08, 2004)   <\-\- open range

.fi
.if n \{\
.RE
.\}
.sp

.RE

.SS "period_parser private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void consume_delim(stream_itr_type & sitr, stream_itr_type & stream_end, 
                   const string_type & delim) const;
.fi

throws ios_base::failure if delimiter and parsed data do not match .RE


