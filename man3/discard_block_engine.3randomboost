.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::random::discard_block_engine
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/discard_block\&.hpp>

template<typename UniformRandomNumberGenerator, std::size_t p, std::size_t r> 
class discard_block_engine {
public:
  // types
  typedef UniformRandomNumberGenerator base_type;  
  typedef base_type::result_type       result_type;

  // construct/copy/destruct
  discard_block_engine();
  explicit discard_block_engine(const base_type &);
  explicit discard_block_engine(base_type &&);
  explicit discard_block_engine(seed_type);
  template<typename SeedSeq> explicit discard_block_engine(SeedSeq &);
  template<typename It> discard_block_engine(It &, It);

  // public member functions
  void seed();
  void seed(seed_type);
  template<typename SeedSeq> void seed(SeedSeq &);
  template<typename It> void seed(It &, It);
  const base_type & base() const;
  result_type operator()();
  void discard(boost::uintmax_t);
  template<typename It> void generate(It, It);

  // public static functions
  static result_type min();
  static result_type max();

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const discard_block_engine &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, discard_block_engine &);
  friend bool operator==(const discard_block_engine &, 
                         const discard_block_engine &);
  friend bool operator!=(const discard_block_engine &, 
                         const discard_block_engine &);

  // public data members
  static const std::size_t block_size;
  static const std::size_t used_block;
  static const bool has_fixed_range;
  static const std::size_t total_block;
  static const std::size_t returned_block;
};
.fi
.SH "DESCRIPTION"
.PP
The class template
discard_block_engine
is a model of
pseudo\-random number generator
\&. It modifies another generator by discarding parts of its output\&. Out of every block of
p
results, the first
r
will be returned and the rest discarded\&.
.PP
Requires: 0 < p <= r
.SS "discard_block_engine public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
discard_block_engine();
.fi

.sp
Uses the default seed for the base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit discard_block_engine(const base_type & rng);
.fi

.sp
Constructs a new
discard_block_engine
with a copy of rng\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
explicit discard_block_engine(base_type && rng);
.fi

.sp
Constructs a new
discard_block_engine
with rng\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
explicit discard_block_engine(seed_type value);
.fi

.sp
Creates a new
discard_block_engine
and seeds the underlying generator with
value
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename SeedSeq> explicit discard_block_engine(SeedSeq & seq);
.fi

.sp
Creates a new
discard_block_engine
and seeds the underlying generator with
seq
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
template<typename It> discard_block_engine(It & first, It last);
.fi

.sp
Creates a new
discard_block_engine
and seeds the underlying generator with first and last\&.
.RE

.SS "discard_block_engine public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void seed();
.fi

.sp
default seeds the underlying generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void seed(seed_type s);
.fi

.sp
Seeds the underlying generator with s\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeedSeq> void seed(SeedSeq & seq);
.fi

.sp
Seeds the underlying generator with seq\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename It> void seed(It & first, It last);
.fi

.sp
Seeds the underlying generator with first and last\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
const base_type & base() const;
.fi

.sp
Returns the underlying engine\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
result_type operator()();
.fi

.sp
Returns the next value of the generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void discard(boost::uintmax_t z);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
template<typename It> void generate(It first, It last);
.fi

.RE

.SS "discard_block_engine public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static result_type min();
.fi

.sp
Returns the smallest value that the generator can produce\&. This is the same as the minimum of the underlying generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static result_type max();
.fi

.sp
Returns the largest value that the generator can produce\&. This is the same as the maximum of the underlying generator\&.
.RE

.SS "discard_block_engine friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const discard_block_engine & s);
.fi

.sp
Writes a
discard_block_engine
to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             discard_block_engine & s);
.fi

.sp
Reads a
discard_block_engine
from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const discard_block_engine & x, 
                       const discard_block_engine & y);
.fi

.sp
Returns true if the two generators will produce identical sequences\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const discard_block_engine & x, 
                       const discard_block_engine & y);
.fi

.sp
Returns true if the two generators will produce different sequences\&.
.RE


