.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPL" 3 "" "" ""
.SH "NAME"
boost::property_tree::json_parser::write_json
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/property_tree/json_parser\&.hpp>


template<typename Ptree> 
  void write_json(const std::string & filename, const Ptree & pt, 
                  const std::locale & loc = std::locale(), 
                  bool pretty = true);
.fi
.SH "DESCRIPTION"
.PP
Translates the property tree to JSON and writes it the given file\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Any property tree key containing only unnamed subkeys will be rendered as JSON arrays\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
filename
.RS 4
The name of the file to which to write the JSON representation of the property tree\&.
.RE
.PP
loc
.RS 4
The locale to use when writing out to the output file\&.
.RE
.PP
pretty
.RS 4
Whether to pretty\-print\&. Defaults to true and last place for backward compatibility\&.
.RE
.PP
pt
.RS 4
The property tree to translate to JSON and output\&.
.RE
.RE
.PP
Requires:
.RS 4
\fIpt\fR
cannot contain keys that have both subkeys and non\-empty data\&.
.RE
.PP
Throws:
.RS 4
json_parser_error In case of error translating the property tree to JSON or writing to the file\&.
.RE

