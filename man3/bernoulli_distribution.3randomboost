.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::random::bernoulli_distribution
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/bernoulli_distribution\&.hpp>

template<typename RealType = double> 
class bernoulli_distribution {
public:
  // types
  typedef int  input_type; 
  typedef bool result_type;

  // member classes/structs/unions

  class param_type {
  public:
    // types
    typedef bernoulli_distribution distribution_type;

    // construct/copy/destruct
    explicit param_type(RealType = 0\&.5);

    // public member functions
    RealType p() const;

    // friend functions
    template<typename CharT, typename Traits> 
      friend std::basic_ostream< CharT, Traits > & 
      operator<<(std::basic_ostream< CharT, Traits > &, const param_type &);
    template<typename CharT, typename Traits> 
      friend std::basic_istream< CharT, Traits > & 
      operator>>(std::basic_istream< CharT, Traits > &, const param_type &);
    friend bool operator==(const param_type &, const param_type &);
    friend bool operator!=(const param_type &, const param_type &);
  };

  // construct/copy/destruct
  explicit bernoulli_distribution(const RealType & = 0\&.5);
  explicit bernoulli_distribution(const param_type &);

  // public member functions
  RealType p() const;
  bool min() const;
  bool max() const;
  param_type param() const;
  void param(const param_type &);
  void reset();
  template<typename Engine> bool operator()(Engine &) const;
  template<typename Engine> 
    bool operator()(Engine &, const param_type &) const;

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const bernoulli_distribution &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, 
               const bernoulli_distribution &);
  friend bool operator==(const bernoulli_distribution &, 
                         const bernoulli_distribution &);
  friend bool operator!=(const bernoulli_distribution &, 
                         const bernoulli_distribution &);
};
.fi
.SH "DESCRIPTION"
.PP
Instantiations of class template
bernoulli_distribution
model a
random distribution
\&. Such a random distribution produces bool values distributed with probabilities P(true) = p and P(false) = 1\-p\&. p is the parameter of the distribution\&.
.SS "bernoulli_distribution public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit bernoulli_distribution(const RealType & p = 0\&.5);
.fi

.sp
Constructs a
bernoulli_distribution
object\&. p is the parameter of the distribution\&.
.sp
Requires: 0 <= p <= 1
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit bernoulli_distribution(const param_type & param);
.fi

.sp
Constructs
bernoulli_distribution
from its parameters
.RE

.SS "bernoulli_distribution public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
RealType p() const;
.fi

.sp
Returns: The "p" parameter of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
bool min() const;
.fi

.sp
Returns the smallest value that the distribution can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
bool max() const;
.fi

.sp
Returns the largest value that the distribution can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
param_type param() const;
.fi

.sp
Returns the parameters of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
void param(const param_type & param);
.fi

.sp
Sets the parameters of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void reset();
.fi

.sp
Effects: Subsequent uses of the distribution do not depend on values produced by any engine prior to invoking reset\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename Engine> bool operator()(Engine & eng) const;
.fi

.sp
Returns: a random variate distributed according to the
bernoulli_distribution
\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
template<typename Engine> 
  bool operator()(Engine & eng, const param_type & param) const;
.fi

.sp
Returns: a random variate distributed according to the
bernoulli_distribution
with parameters specified by param\&.
.RE

.SS "bernoulli_distribution friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const bernoulli_distribution & bd);
.fi

.sp
Writes the parameters of the distribution to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const bernoulli_distribution & bd);
.fi

.sp
Reads the parameters of the distribution from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const bernoulli_distribution & lhs, 
                       const bernoulli_distribution & rhs);
.fi

.sp
Returns true iff the two distributions will produce identical sequences of values given equal generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const bernoulli_distribution & lhs, 
                       const bernoulli_distribution & rhs);
.fi

.sp
Returns true iff the two distributions will produce different sequences of values given equal generators\&.
.RE


