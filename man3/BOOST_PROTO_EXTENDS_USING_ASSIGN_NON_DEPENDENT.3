.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MA" 3 "" "" ""
.SH "NAME"
BOOST_PROTO_EXTENDS_USING_ASSIGN_NON_DEPENDENT \- For exposing in classes that inherit from proto::extends<> the overloaded assignment operators defined therein\&. Unlike the BOOST_PROTO_EXTENDS_USING_ASSIGN() macro, BOOST_PROTO_EXTENDS_USING_ASSIGN_NON_DEPENDENT() is for use in non\-dependent contexts\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/extends\&.hpp>

BOOST_PROTO_EXTENDS_USING_ASSIGN_NON_DEPENDENT(Derived)
.fi
.SH "DESCRIPTION"
.PP
The standard usage of
proto::extends<>
is to define a class template that inherits from it\&. The derived class template automatically gets a compiler\-generated assignment operator that hides the ones defined in
proto::extends<>\&. Using
BOOST_PROTO_EXTENDS_USING_ASSIGN()
in the derived class solves this problem\&.
.PP
However, if the expression extension is an ordinary class and not a class template, the usage of
BOOST_PROTO_EXTENDS_USING_ASSIGN()
is in a so\-called non\-dependent context\&. In plain English, it means it is illegal to use
typename
in some places where it is required in a class template\&. In those cases, you should use
BOOST_PROTO_EXTENDS_USING_ASSIGN_NON_DEPENDENT()
instead\&.
.PP
See also:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
proto::extends<>.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BOOST_PROTO_EXTENDS_USING_ASSIGN().RE
.sp
.RE


