.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT _BYREF" 3 "" "" ""
.SH "NAME"
boost::proto::_byref \- A unary callable PolymorphicFunctionObject that wraps its argument in a boost::reference_wrapper<>\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/arg\&.hpp>


struct _byref :  proto::callable {
  // member classes/structs/unions
  template<typename This, typename T> 
  struct result<This(T &)> {
    // types
    typedef boost::reference_wrapper< T > const type;
  };
  template<typename This, typename T> 
  struct result<This(T)> {
    // types
    typedef boost::reference_wrapper< T const  > const type;
  };

  // public member functions
  template<typename T> 
    boost::reference_wrapper< T > const operator()(T &) const;
  template<typename T> 
    boost::reference_wrapper< T const > const operator()(T const &) const;
};
.fi
.SH "DESCRIPTION"
.PP
Example:

.sp
.if n \{\
.RS 4
.\}
.nf
proto::terminal<int>::type i = {42};
boost::reference_wrapper<proto::terminal<int>::type> j
  = proto::when<proto::_, proto::_byref(_)>()(i);
assert( boost::addressof(i) == boost::addressof(j\&.get()) );
.fi
.if n \{\
.RE
.\}
.sp

.SS "_byref public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T> 
  boost::reference_wrapper< T > const operator()(T & t) const;
.fi

.sp
Wrap the parameter
t
in a
boost::reference_wrapper<>
.PP
Parameters:
.RS 4
.PP
t
.RS 4
The object to wrap
.RE
.RE
.PP
Returns:
.RS 4

boost::ref(t)
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename T> 
  boost::reference_wrapper< T const > const operator()(T const & t) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


