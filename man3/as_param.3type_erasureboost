.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::type_erasure::as_param \- Metafunction that creates a param\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_erasure/param\&.hpp>

template<typename Any, typename T> 
struct as_param {
  // types
  typedef \fIunspecified\fR type;
};
.fi
.SH "DESCRIPTION"
.PP
If
T
is a (cv/reference qualifed) placeholder, returns param<concept_of<Any>::type, T>, otherwise, returns T\&. This metafunction is intended to be used for function arguments in specializations of
concept_interface\&.
.PP
.PP \fBSee Also:\fR.PP derived, rebind_any

