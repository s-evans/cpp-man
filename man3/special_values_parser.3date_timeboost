.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::date_time::special_values_parser \- Class for special_value parsing\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/special_values_parser\&.hpp>

template<typename date_type, typename charT> 
class special_values_parser {
public:
  // types
  typedef std::basic_string< charT >                string_type;    
  typedef std::istreambuf_iterator< charT >         stream_itr_type;
  typedef date_type::duration_type                  duration_type;  
  typedef string_parse_tree< charT >                parse_tree_type;
  typedef parse_tree_type::parse_match_result_type  match_results;  
  typedef std::vector< std::basic_string< charT > > collection_type;
  typedef charT                                     char_type;      

  // construct/copy/destruct
  special_values_parser();
  special_values_parser(const string_type &, const string_type &, 
                        const string_type &, const string_type &, 
                        const string_type &);
  special_values_parser(typename collection_type::iterator, 
                        typename collection_type::iterator);
  special_values_parser(const special_values_parser< date_type, charT > &);

  // public member functions
  void sv_strings(const string_type &, const string_type &, 
                  const string_type &, const string_type &, 
                  const string_type &);
  bool match(stream_itr_type &, stream_itr_type &, match_results &) const;

  // public data members
  static const char_type nadt_string;
  static const char_type neg_inf_string;
  static const char_type pos_inf_string;
  static const char_type min_date_time_string;
  static const char_type max_date_time_string;
};
.fi
.SH "DESCRIPTION"
.PP
TODO: add doc\-comments for which elements can be changed Parses input stream for strings representing special_values\&. Special values parsed are:
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
not_a_date_time
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
neg_infin
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
pod_infin
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
min_date_time
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
max_date_time
.RE
.sp
.RE

.SS "special_values_parser public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
special_values_parser();
.fi

Creates a special_values_parser with the default set of "sv_strings"\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
special_values_parser(const string_type & nadt_str, 
                      const string_type & neg_inf_str, 
                      const string_type & pos_inf_str, 
                      const string_type & min_dt_str, 
                      const string_type & max_dt_str);
.fi

Creates a special_values_parser using a user defined set of element strings\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
special_values_parser(typename collection_type::iterator beg, 
                      typename collection_type::iterator end);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
special_values_parser(const special_values_parser< date_type, charT > & svp);
.fi

.RE

.SS "special_values_parser public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void sv_strings(const string_type & nadt_str, const string_type & neg_inf_str, 
                const string_type & pos_inf_str, 
                const string_type & min_dt_str, 
                const string_type & max_dt_str);
.fi

Replace special value strings\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
bool match(stream_itr_type & sitr, stream_itr_type & str_end, 
           match_results & mr) const;
.fi

Sets match_results\&.current_match to the corresponding special_value or \-1\&. .RE


