.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::log::basic_settings \- The class represents settings container\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/setup/settings\&.hpp>

template<typename CharT> 
class basic_settings : public boost::log::basic_settings_section< CharT > {
public:
  // types
  typedef basic_settings_section< CharT > section;             // Section type\&. 
  typedef section::property_tree_type     property_tree_type;  // Property tree type\&. 

  // construct/copy/destruct
  basic_settings();
  basic_settings(basic_settings const &);
  basic_settings(this_type &&);
  explicit basic_settings(property_tree_type const &);
  basic_settings & operator=(basic_settings const &);
  basic_settings & operator=(basic_settings &&);
  ~basic_settings();
};
.fi
.SH "DESCRIPTION"
.PP
All settings are presented as a number of named parameters divided into named sections\&. The parameters values are stored as strings\&. Individual parameters may be queried via subscript operators, like this:
.PP
<preformatted> optional< string > param = settings["Section1"]["Param1"]; // reads parameter "Param1" in section "Section1" // returns an empty value if no such parameter exists settings["Section2"]["Param2"] = 10; // sets the parameter "Param2" in section "Section2" // to value "10" </preformatted>
.PP
There are also other methods to work with parameters\&.
.SS "basic_settings public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_settings();
.fi

.sp
Default constructor\&. Creates an empty settings container\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_settings(basic_settings const & that);
.fi

.sp
Copy constructor\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
basic_settings(this_type && that);
.fi

.sp
Move constructor\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
explicit basic_settings(property_tree_type const & tree);
.fi

.sp
Initializing constructor\&. Creates a settings container with the copy of the specified property tree\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
basic_settings & operator=(basic_settings const & that);
.fi

.sp
Copy assignment operator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
basic_settings & operator=(basic_settings && that);
.fi

.sp
Move assignment operator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
~basic_settings();
.fi

.sp
Destructor
.RE


