.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::overloaded_function \- Function object to overload functions with distinct signatures\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/functional/overloaded_function\&.hpp>

template<typename F1, typename F2, \&.\&.\&. > 
class overloaded_function {
public:
  // construct/copy/destruct
  overloaded_function(const boost::function< F1 > &, 
                      const boost::function< F2 > &, \&.\&.\&.);

  // public member functions
  boost::function_traits< F1 >::result_type 
  operator()(typename boost::function_traits< F1 >::arg1_type, 
             typename boost::function_traits< F1 >::arg2_type, \&.\&.\&.) const;
  boost::function_traits< F2 >::result_type 
  operator()(typename boost::function_traits< F2 >::arg1_type, 
             typename boost::function_traits< F2 >::arg2_type, \&.\&.\&.) const;
};
.fi
.SH "DESCRIPTION"
.PP
This function object aggregates together calls to functions of all the specified function types
F1,
F2, etc which must have distinct function signatures from one another\&.
.PP
\fBParameters:\fR
.TS
allbox tab(:);
l l.
T{
\fBF\fIi\fR\fR
T}:T{
Each function type must be specified using the following syntax (which is Boost\&.Function\'s preferred syntax): .if n \{\
.RS 4
.\}
.nf
result_type (argument1_type, argumgnet2_type, \&.\&.\&.)

.fi
.if n \{\
.RE
.\}
.sp
T}
.TE
.sp 1

.PP
In some cases, the
make_overloaded_function
function template can be useful to construct an overloaded function object without explicitly specifying the function types\&.
.PP
At least two distinct function types must be specified (because there is nothing to overload between one or zero functions)\&. The maximum number of functions to overload is given by the
BOOST_FUNCTIONAL_OVERLOADED_FUNCTION_CONFIG_OVERLOAD_MAX
configuration macro\&. The maximum number of function parameters for each of the specified function types is given by the
BOOST_FUNCTIONAL_OVERLOADED_FUNCTION_CONFIG_ARITY_MAX
configuration macro\&.
.PP
\fBSee:\fR
Tutorial
section,
make_overloaded_function,
BOOST_FUNCTIONAL_OVERLOADED_FUNCTION_CONFIG_OVERLOAD_MAX,
BOOST_FUNCTIONAL_OVERLOADED_FUNCTION_CONFIG_ARITY_MAX, Boost\&.Function\&.
.SS "overloaded_function public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
overloaded_function(const boost::function< F1 > &, 
                    const boost::function< F2 > &, \&.\&.\&.);
.fi

.sp
Construct the overloaded function object\&. Any function pointer, function reference, and monomorphic function object that can be converted to a
boost::function
function object can be specified as parameter\&.
.sp
\fBNote:\fR
Unfortunately, it is not possible to support polymorphic function objects (as explained
\m[blue]\fBhere\fR\m[]\&\s-2\u[1]\d\s+2)\&.
.RE

.SS "overloaded_function public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
boost::function_traits< F1 >::result_type 
operator()(typename boost::function_traits< F1 >::arg1_type, 
           typename boost::function_traits< F1 >::arg2_type, \&.\&.\&.) const;
.fi

.sp
Call operator matching the signature of the function type specified as 1st template parameter\&. This will in turn invoke the call operator of the 1st function passed to the constructor\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
boost::function_traits< F2 >::result_type 
operator()(typename boost::function_traits< F2 >::arg1_type, 
           typename boost::function_traits< F2 >::arg2_type, \&.\&.\&.) const;
.fi

.sp
Call operator matching the signature of the function type specified as 2nd template parameter\&. This will in turn invoke the call operator of the 2nd function passed to the constructor\&.
.sp
\fBNote:\fR
Similar call operators are present for all specified function types
F1,
F2, etc (even if not exhaustively listed by this documentation)\&.
.RE


