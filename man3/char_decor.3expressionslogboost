.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPL" 3 "" "" ""
.SH "NAME"
boost::log::expressions::char_decor
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/expressions/formatters/char_decorator\&.hpp>


template<typename FromRangeT, typename ToRangeT> 
  \fIunspecified\fR char_decor(FromRangeT const & from, ToRangeT const & to);
.fi
.SH "DESCRIPTION"
.PP
The function returns a decorator generator object\&. The generator provides
operator[]
that can be used to construct the actual decorator\&.
.PP

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
The
\fIfrom\fR
and
\fIto\fR
sequences mush be of the same size\&. Every
from[i]
substring occurrence in the output will be replaced with
to[i]\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
from
.RS 4
A sequence of strings that will be sought in the output\&.
.RE
.PP
to
.RS 4
A sequence of strings that will be used as replacements\&.
.RE
.RE

