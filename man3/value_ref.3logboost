.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE V" 3 "" "" ""
.SH "NAME"
boost::log::value_ref \- Reference wrapper for a stored attribute value\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/value_ref_fwd\&.hpp>

template<typename T, typename TagT> 
class value_ref {
public:
  // construct/copy/destruct
  value_ref() = default;
  value_ref(value_ref const &) = default;
  template<typename U> 
    explicit value_ref(U const &, 
                       typename enable_if< typename base_type::template is_compatible< U >, int >::type = 0) noexcept;

  // public member functions
  explicit operator bool() const noexcept;
  bool operator!() const noexcept;
  bool empty() const noexcept;
  void swap(value_ref &) noexcept;
};
.fi
.SH "DESCRIPTION"
.PP
The
value_ref
class template provides access to the stored attribute value\&. It is not a traditional reference wrapper since it may be empty (i\&.e\&. refer to no value at all) and it can also refer to values of different types\&. Therefore its interface and behavior combines features of Boost\&.Ref, Boost\&.Optional and Boost\&.Variant, depending on the use case\&.
.PP
The template parameter
T
can be a single type or an MPL sequence of possible types being referred\&. The reference wrapper will act as either an optional reference or an optional variant of references to the specified types\&. In any case, the referred values will not be modifiable (i\&.e\&.
value_ref
always models a const reference)\&.
.PP
Template parameter
TagT
is optional\&. It can be used for customizing the operations on this reference wrapper, such as putting the referred value to log\&.
.SS "value_ref public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
value_ref() = default;
.fi

.sp
Default constructor\&. Creates a reference wrapper that does not refer to a value\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
value_ref(value_ref const & that) = default;
.fi

.sp
Copy constructor\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename U> 
  explicit value_ref(U const & val, 
                     typename enable_if< typename base_type::template is_compatible< U >, int >::type = 0) noexcept;
.fi

.sp
Initializing constructor\&. Creates a reference wrapper that refers to the specified value\&.
.RE

.SS "value_ref public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit operator bool() const noexcept;
.fi

.sp
The operator verifies if the wrapper refers to a value\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
bool operator!() const noexcept;
.fi

.sp
The operator verifies if the wrapper does not refer to a value\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
bool empty() const noexcept;
.fi

.sp

.PP
Returns:
.RS 4
true
if the wrapper does not refer to a value\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
void swap(value_ref & that) noexcept;
.fi

.sp
Swaps two reference wrappers
.RE


