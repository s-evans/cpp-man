.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLA" 3 "" "" ""
.SH "NAME"
boost::property_tree::info_parser::read_info
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/property_tree/info_parser\&.hpp>


template<typename Ptree> 
  void read_info(const std::string & filename, Ptree & pt, 
                 const Ptree & default_ptree, 
                 const std::locale & loc = std::locale());
.fi
.SH "DESCRIPTION"
.PP
Read INFO from a the given file and translate it to a property tree\&. The tree\'s key type must be a string type, i\&.e\&. it must have a nested value_type typedef that is a valid parameter for basic_ifstream\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Replaces the existing contents\&. Strong exception guarantee\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
default_ptree
.RS 4
If parsing fails, pt is set to a copy of this tree\&.
.RE
.RE

