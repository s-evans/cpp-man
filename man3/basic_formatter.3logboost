.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::log::basic_formatter
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/expressions/formatter\&.hpp>

template<typename CharT> 
class basic_formatter {
public:
  // types
  typedef void                                  result_type;  // Result type\&. 
  typedef CharT                                 char_type;    // Character type\&. 
  typedef basic_formatting_ostream< char_type > stream_type;  // Output stream type\&. 

  // construct/copy/destruct
  basic_formatter();
  basic_formatter(basic_formatter const &);
  basic_formatter(this_type &&) noexcept;
  template<typename FunT> basic_formatter(FunT &&);
  basic_formatter & operator=(this_type &&) noexcept;
  basic_formatter & operator=(this_type const &);
  template<typename FunT> basic_formatter & operator=(FunT &&);

  // public member functions
  result_type operator()(record_view const &, stream_type &) const;
  void reset();
  void swap(basic_formatter &) noexcept;
};
.fi
.SH "DESCRIPTION"
.PP
Log record formatter function wrapper\&.
.SS "basic_formatter public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_formatter();
.fi

.sp
Default constructor\&. Creates a formatter that only outputs log message\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_formatter(basic_formatter const & that);
.fi

.sp
Copy constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
basic_formatter(this_type && that) noexcept;
.fi

.sp
Move constructor\&. The moved\-from formatter is left in an unspecified state\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename FunT> basic_formatter(FunT && fun);
.fi

.sp
Initializing constructor\&. Creates a formatter which will invoke the specified function object\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
basic_formatter & operator=(this_type && that) noexcept;
.fi

.sp
Move assignment\&. The moved\-from formatter is left in an unspecified state\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
basic_formatter & operator=(this_type const & that);
.fi

.sp
Copy assignment\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename FunT> basic_formatter & operator=(FunT && fun);
.fi

.sp
Initializing assignment\&. Sets the specified function object to the formatter\&.
.RE

.SS "basic_formatter public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()(record_view const & rec, stream_type & strm) const;
.fi

.sp
Formatting operator\&.
.sp

.PP
Parameters:
.RS 4
.PP
rec
.RS 4
A log record to format\&.
.RE
.PP
strm
.RS 4
A stream to put the formatted characters to\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void reset();
.fi

.sp
Resets the formatter to the default\&. The default formatter only outputs message text\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void swap(basic_formatter & that) noexcept;
.fi

.sp
Swaps two formatters
.RE


