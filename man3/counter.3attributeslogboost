.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE CO" 3 "" "" ""
.SH "NAME"
boost::log::attributes::counter \- A class of an attribute that counts an integral value\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/counter\&.hpp>

template<typename T> 
class counter : public attribute {
public:
  // types
  typedef T value_type;  // A counter value type\&. 

  // member classes/structs/unions

  // Base class for factory implementation\&.

  class impl : public attribute::impl {
  };

  class impl_dec : public counter< T >::impl {
  public:
    // construct/copy/destruct
    explicit impl_dec(value_type);

    // public member functions
    attribute_value get_value();
  };

  class impl_generic : public counter< T >::impl {
  public:
    // construct/copy/destruct
    impl_generic(value_type, long);

    // public member functions
    attribute_value get_value();
  };

  class impl_inc : public counter< T >::impl {
  public:
    // construct/copy/destruct
    explicit impl_inc(value_type);

    // public member functions
    attribute_value get_value();
  };

  // construct/copy/destruct
  explicit counter(value_type = (value_type) 0, long = 1);
  explicit counter(cast_source const &);
};
.fi
.SH "DESCRIPTION"
.PP
This type of attribute acts as a counter, that is, it returns a monotonously changing value each time requested\&. The attribute value type can be specified as a template parameter\&. However, the type must be an integral type of size no more than
sizeof(long)\&.
.SS "counter public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit counter(value_type initial = (value_type) 0, long step = 1);
.fi

.sp
Constructor
.sp

.PP
Parameters:
.RS 4
.PP
initial
.RS 4
Initial value of the counter
.RE
.PP
step
.RS 4
Changing step of the counter\&. Each value acquired from the attribute will be greater than the previous one to this amount\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit counter(cast_source const & source);
.fi

.sp
Constructor for casting support
.RE


