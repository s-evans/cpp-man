.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::move_insert_iterator
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/move/iterator\&.hpp>

template<typename C> 
class move_insert_iterator {
public:
  // types
  typedef C                        container_type;   
  typedef C::value_type            value_type;       
  typedef C::reference             reference;        
  typedef C::pointer               pointer;          
  typedef C::difference_type       difference_type;  
  typedef std::output_iterator_tag iterator_category;

  // construct/copy/destruct
  explicit move_insert_iterator(C &, typename C::iterator);
  move_insert_iterator & operator=(reference);
  move_insert_iterator & operator=(value_type &&);

  // public member functions
  move_insert_iterator & operator*();
  move_insert_iterator & operator++();
  move_insert_iterator & operator++(int);
};
.fi
.SH "DESCRIPTION"
.SS "move_insert_iterator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit move_insert_iterator(C & x, typename C::iterator pos);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
move_insert_iterator & operator=(reference x);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
move_insert_iterator & operator=(value_type && x);
.fi

.RE

.SS "move_insert_iterator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
move_insert_iterator & operator*();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
move_insert_iterator & operator++();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
move_insert_iterator & operator++(int);
.fi

.RE


