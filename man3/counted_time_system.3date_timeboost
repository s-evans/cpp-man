.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::date_time::counted_time_system \- An unadjusted time system implementation\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/time_system_counted\&.hpp>

template<typename time_rep> 
class counted_time_system {
public:
  // types
  typedef time_rep                                    time_rep_type;          
  typedef time_rep_type::impl_type                    impl_type;              
  typedef time_rep_type::time_duration_type           time_duration_type;     
  typedef time_duration_type::fractional_seconds_type fractional_seconds_type;
  typedef time_rep_type::date_type                    date_type;              
  typedef time_rep_type::date_duration_type           date_duration_type;     

  // public static functions
  template<typename T> static void unused_var(const T &);
  static time_rep_type 
  get_time_rep(const date_type &, const time_duration_type &, 
               date_time::dst_flags = not_dst);
  static time_rep_type get_time_rep(special_values);
  static date_type get_date(const time_rep_type &);
  static time_duration_type get_time_of_day(const time_rep_type &);
  static std::string zone_name(const time_rep_type &);
  static bool is_equal(const time_rep_type &, const time_rep_type &);
  static bool is_less(const time_rep_type &, const time_rep_type &);
  static time_rep_type 
  add_days(const time_rep_type &, const date_duration_type &);
  static time_rep_type 
  subtract_days(const time_rep_type &, const date_duration_type &);
  static time_rep_type 
  subtract_time_duration(const time_rep_type &, const time_duration_type &);
  static time_rep_type 
  add_time_duration(const time_rep_type &, time_duration_type);
  static time_duration_type 
  subtract_times(const time_rep_type &, const time_rep_type &);
};
.fi
.SH "DESCRIPTION"
.SS "counted_time_system public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T> static void unused_var(const T &);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static time_rep_type 
get_time_rep(const date_type & day, const time_duration_type & tod, 
             date_time::dst_flags dst = not_dst);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
static time_rep_type get_time_rep(special_values sv);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
static date_type get_date(const time_rep_type & val);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
static time_duration_type get_time_of_day(const time_rep_type & val);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
static std::string zone_name(const time_rep_type &);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
static bool is_equal(const time_rep_type & lhs, const time_rep_type & rhs);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
static bool is_less(const time_rep_type & lhs, const time_rep_type & rhs);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
static time_rep_type 
add_days(const time_rep_type & base, const date_duration_type & dd);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
static time_rep_type 
subtract_days(const time_rep_type & base, const date_duration_type & dd);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
static time_rep_type 
subtract_time_duration(const time_rep_type & base, 
                       const time_duration_type & td);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
static time_rep_type 
add_time_duration(const time_rep_type & base, time_duration_type td);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "13." 4.2
.\}

.sp

.nf
static time_duration_type 
subtract_times(const time_rep_type & lhs, const time_rep_type & rhs);
.fi

.RE


