.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::proto::functional::as_child \- A callable PolymorphicFunctionObject that is equivalent to the proto::as_child() function\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/traits\&.hpp>

template<typename Domain = proto::default_domain> 
struct as_child :  proto::callable {
  // member classes/structs/unions
  template<typename This, typename T> 
  struct result<This(T)> :  proto::result_of::as_child< typename remove_reference< T >::type, Domain >
  {
  };

  // public member functions
  template<typename T> 
    typename proto::result_of::as_child< T, Domain >::type 
    operator()(T &) const;
  template<typename T> 
    typename proto::result_of::as_child< T const, Domain >::type 
    operator()(T const &) const;
};
.fi
.SH "DESCRIPTION"
.SS "as_child public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T> 
  typename proto::result_of::as_child< T, Domain >::type 
  operator()(T & t) const;
.fi

.sp
Wrap an object in a Proto terminal if it isn\'t a Proto expression already\&.
.PP
Parameters:
.RS 4
.PP
t
.RS 4
The object to wrap\&.
.RE
.RE
.PP
Returns:
.RS 4

proto::as_child<Domain>(t)
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename T> 
  typename proto::result_of::as_child< T const, Domain >::type 
  operator()(T const & t) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


