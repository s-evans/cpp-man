.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLA" 3 "" "" ""
.SH "NAME"
boost::icl::split_interval_set \- implements a set as a set of intervals \- on insertion overlapping intervals are split
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/icl/split_interval_set\&.hpp>

template<typename DomainT, 
         ICL_COMPARE Compare = ICL_COMPARE_INSTANCE(ICL_COMPARE_DEFAULT, DomainT), 
         ICL_INTERVAL(ICL_COMPARE) Interval = ICL_INTERVAL_INSTANCE(ICL_INTERVAL_DEFAULT, DomainT, Compare), 
         ICL_ALLOC Alloc = std::allocator> 
class split_interval_set : public boost::icl::interval_base_set< split_interval_set< DomainT, Compare, Interval, Alloc >, DomainT, Compare, Interval, Alloc >
{
public:
  // types
  typedef split_interval_set< DomainT, Compare, Interval, Alloc >      type;                 
  typedef interval_base_set< type, DomainT, Compare, Interval, Alloc > base_type;            
  typedef interval_set< DomainT, Compare, Interval, Alloc >            joint_type;           
  typedef type                                                         overloadable_type;    
  typedef type                                                         key_object_type;      
  typedef DomainT                                                      domain_type;            // The domain type of the set\&. 
  typedef DomainT                                                      codomain_type;          // The codomaintype is the same as domain_type\&. 
  typedef DomainT                                                      element_type;           // The element type of the set\&. 
  typedef interval_type                                                segment_type;           // The segment type of the set\&. 
  typedef exclusive_less_than< interval_type >                         interval_compare;       // Comparison functor for intervals\&. 
  typedef exclusive_less_than< interval_type >                         key_compare;            // Comparison functor for keys\&. 
  typedef Alloc< interval_type >                                       allocator_type;         // The allocator type of the set\&. 
  typedef Alloc< DomainT >                                             domain_allocator_type;  // allocator type of the corresponding element set 
  typedef base_type::atomized_type                                     atomized_type;          // The corresponding atomized type representing this interval container of elements\&. 
  typedef base_type::ImplSetT                                          ImplSetT;               // Container type for the implementation\&. 
  typedef ImplSetT::key_type                                           key_type;               // key type of the implementing container 
  typedef ImplSetT::value_type                                         data_type;              // data type of the implementing container 
  typedef ImplSetT::value_type                                         value_type;             // value type of the implementing container 
  typedef ImplSetT::iterator                                           iterator;               // iterator for iteration over intervals 
  typedef ImplSetT::const_iterator                                     const_iterator;         // const_iterator for iteration over intervals 

  enum @12 { fineness = = 3 };

  // construct/copy/destruct
  split_interval_set();
  split_interval_set(const split_interval_set &);
  template<typename SubType> 
    split_interval_set(const interval_base_set< SubType, DomainT, Compare, Interval, Alloc > &);
  explicit split_interval_set(const interval_type &);
  explicit split_interval_set(const domain_type &);
  split_interval_set(split_interval_set &&);
  template<typename SubType> 
    split_interval_set & 
    operator=(const interval_base_set< SubType, DomainT, Compare, Interval, Alloc > &);
  split_interval_set & operator=(split_interval_set);

  // public member functions
  typedef ICL_INTERVAL_TYPE(Interval, DomainT, Compare);
  typedef ICL_COMPARE_DOMAIN(Compare, DomainT);
  template<typename SubType> 
    void assign(const interval_base_set< SubType, DomainT, Compare, Interval, Alloc > &);

  // private member functions
  iterator handle_inserted(iterator);
  iterator add_over(const interval_type &, iterator);
  iterator add_over(const interval_type &);
};
.fi
.SH "DESCRIPTION"
.SS "split_interval_set public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
split_interval_set();
.fi

Default constructor for the empty object\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
split_interval_set(const split_interval_set & src);
.fi

Copy constructor\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SubType> 
  split_interval_set(const interval_base_set< SubType, DomainT, Compare, Interval, Alloc > & src);
.fi

Copy constructor for base_type\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
explicit split_interval_set(const interval_type & elem);
.fi

Constructor for a single element\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
explicit split_interval_set(const domain_type & itv);
.fi

Constructor for a single interval\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
split_interval_set(split_interval_set && src);
.fi

Move constructor\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename SubType> 
  split_interval_set & 
  operator=(const interval_base_set< SubType, DomainT, Compare, Interval, Alloc > & src);
.fi

Assignment operator for base type\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
split_interval_set & operator=(split_interval_set src);
.fi

Move assignment operator\&. .RE

.SS "split_interval_set public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
typedef ICL_INTERVAL_TYPE(Interval, DomainT, Compare);
.fi

The interval type of the set\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
typedef ICL_COMPARE_DOMAIN(Compare, DomainT);
.fi

Comparison functor for domain values\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SubType> 
  void assign(const interval_base_set< SubType, DomainT, Compare, Interval, Alloc > & src);
.fi

Assignment from a base interval_set\&. .RE

.SS "split_interval_set private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
iterator handle_inserted(iterator inserted_);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
iterator add_over(const interval_type & addend, iterator last_);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
iterator add_over(const interval_type & addend);
.fi

.RE


