.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE EV" 3 "" "" ""
.SH "NAME"
boost::proto::context::callable_context::eval
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/context/callable\&.hpp>


template<typename Expr, typename ThisContext = Context> 
struct eval :  \fIsee\-below\fR {
};
.fi
.SH "DESCRIPTION"
.PP
A BinaryFunction that accepts an
Expr
and a
Context, and either fans out the expression and passes it to the context, or else hands off the expression to
DefaultCtx\&.
.PP
If
Context
is a
PolymorphicFunctionObject
such that it can be invoked with the tag and children of
Expr, as
ctx(typename Expr::proto_tag(), child_c<0>(expr),\&.\&.\&. child_c<N>(expr)), then
eval<Expr, ThisContext>
inherits from
proto::context::callable_eval<Expr, ThisContext>\&. Otherwise,
eval<Expr, ThisContext>
inherits from
DefaultCtx::eval<Expr, Context>\&.

