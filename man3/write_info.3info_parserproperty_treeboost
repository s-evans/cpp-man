.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPL" 3 "" "" ""
.SH "NAME"
boost::property_tree::info_parser::write_info
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/property_tree/info_parser\&.hpp>


template<typename Ptree> 
  void write_info(const std::string & filename, const Ptree & pt, 
                  const std::locale & loc = std::locale(), 
                  const info_writer_settings< typename Ptree::key_type::value_type > & settings = info_writer_make_settings< typename Ptree::key_type::value_type >());
.fi
.SH "DESCRIPTION"
.PP
Writes a tree to the file in INFO format\&. The tree\'s key type must be a string type, i\&.e\&. it must have a nested value_type typedef that is a valid parameter for basic_ofstream\&.
.PP
Parameters:
.RS 4
.PP
settings
.RS 4
The settings to use when writing the INFO data\&.
.RE
.RE
.PP
Throws:
.RS 4
info_parser_error If the file cannot be written to, or a conversion fails\&.
.RE

