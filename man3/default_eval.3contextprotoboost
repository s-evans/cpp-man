.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::proto::context::default_eval \- A BinaryFunction that accepts a Proto expression and a context, evaluates each child expression with the context, and combines the result using the standard C++ meaning for the operator represented by the current expression node\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/context/default\&.hpp>

template<typename Expr, typename Context> 
struct default_eval {
  // types
  typedef typename Expr::tag_type Tag;          // For exposition only
  typedef \fIsee\fR\fI\-\fR\fIbelow\fR               result_type;

  // public member functions
  result_type operator()(Expr &, Context &) const;

  // public data members
  static Expr & s_expr;  // For exposition only
  static Context & s_context;  // For exposition only
};
.fi
.SH "DESCRIPTION"
.PP
Let
OP
be the C++ operator corresponding to
Expr::proto_tag\&. (For example, if
Tag
is
proto::tag::plus, let
OP
be
+\&.)
.PP
The behavior of this class is specified in terms of the C++0x
decltype
keyword\&. In systems where this keyword is not available, Proto uses the Boost\&.Typeof library to approximate the behavior\&.
.SS "default_eval public types"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

typedef
\fIsee\fR\fI\-\fR\fIbelow\fR
result_type;

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
corresponds to a unary prefix operator, then the result type is

.sp
.if n \{\
.RS 4
.\}
.nf
decltype(
  OP proto::eval(proto::child(s_expr), s_context)
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
corresponds to a unary postfix operator, then the result type is

.sp
.if n \{\
.RS 4
.\}
.nf
decltype(
  proto::eval(proto::child(s_expr), s_context) OP
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
corresponds to a binary infix operator, then the result type is

.sp
.if n \{\
.RS 4
.\}
.nf
decltype(
  proto::eval(proto::left(s_expr), s_context) OP
  proto::eval(proto::right(s_expr), s_context)
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
is
proto::tag::subscript, then the result type is

.sp
.if n \{\
.RS 4
.\}
.nf
decltype(
  proto::eval(proto::left(s_expr), s_context) [
  proto::eval(proto::right(s_expr), s_context) ]
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
is
proto::tag::if_else_, then the result type is

.sp
.if n \{\
.RS 4
.\}
.nf
decltype(
  proto::eval(proto::child_c<0>(s_expr), s_context) ?
  proto::eval(proto::child_c<1>(s_expr), s_context) :
  proto::eval(proto::child_c<2>(s_expr), s_context)
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
is
proto::tag::function, then the result type is

.sp
.if n \{\
.RS 4
.\}
.nf
decltype(
  proto::eval(proto::child_c<0>(s_expr), s_context) (
  proto::eval(proto::child_c<1>(s_expr), s_context),
  \&.\&.\&.
  proto::eval(proto::child_c<N>(s_expr), s_context) )
)
.fi
.if n \{\
.RE
.\}
.sp

.RE
.RE

.SS "default_eval public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()(Expr & expr, Context & context) const;
.fi


.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
corresponds to a unary prefix operator, then return

.sp
.if n \{\
.RS 4
.\}
.nf
OP proto::eval(proto::child(expr), context)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
corresponds to a unary postfix operator, then return

.sp
.if n \{\
.RS 4
.\}
.nf
proto::eval(proto::child(expr), context) OP
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
corresponds to a binary infix operator, then return

.sp
.if n \{\
.RS 4
.\}
.nf
proto::eval(proto::left(expr), context) OP
proto::eval(proto::right(expr), context)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
is
proto::tag::subscript, then return

.sp
.if n \{\
.RS 4
.\}
.nf
proto::eval(proto::left(expr), context) [
proto::eval(proto::right(expr), context) ]
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
is
proto::tag::if_else_, then return

.sp
.if n \{\
.RS 4
.\}
.nf
proto::eval(proto::child_c<0>(expr), context) ?
proto::eval(proto::child_c<1>(expr), context) :
proto::eval(proto::child_c<2>(expr), context)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
Tag
is
proto::tag::function, then return

.sp
.if n \{\
.RS 4
.\}
.nf
proto::eval(proto::child_c<0>(expr), context) (
proto::eval(proto::child_c<1>(expr), context),
\&.\&.\&.
proto::eval(proto::child_c<N>(expr), context) )
.fi
.if n \{\
.RE
.\}
.sp

.RE
.RS 4
.PP
Parameters:
.RS 4
.PP
context
.RS 4
The evaluation context
.RE
.PP
expr
.RS 4
The current expression
.RE
.RE
.RE


