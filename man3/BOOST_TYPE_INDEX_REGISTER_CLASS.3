.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MACRO BOOS" 3 "" "" ""
.SH "NAME"
BOOST_TYPE_INDEX_REGISTER_CLASS
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_index\&.hpp>

BOOST_TYPE_INDEX_REGISTER_CLASS
.fi
.SH "DESCRIPTION"
.PP
BOOST_TYPE_INDEX_REGISTER_CLASS is used to help to emulate RTTI\&. Put this macro into the public section of polymorphic class to allow runtime type detection\&.
.PP
Depending on the typeid() availability this macro will expand to nothing or to virtual helper function
virtual const type_info& boost_type_info_type_id_runtime_() const noexcept\&.
.PP
\fBExample:\fR

.sp
.if n \{\
.RS 4
.\}
.nf
class A {
public:
    BOOST_TYPE_INDEX_REGISTER_CLASS
    virtual ~A(){}
};

struct B: public A {
    BOOST_TYPE_INDEX_REGISTER_CLASS
};

struct C: public B {
    BOOST_TYPE_INDEX_REGISTER_CLASS
};

\&.\&.\&.

C c1;
A* pc1 = &c1;
assert(boost::typeindex::type_id<C>() == boost::typeindex::type_id_runtime(*pc1));

.fi
.if n \{\
.RE
.\}
.sp


