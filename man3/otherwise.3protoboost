.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::proto::otherwise \- Syntactic sugar for proto::when< proto::_, Fun >, for use in grammars to handle all the cases not yet handled\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/when\&.hpp>

template<typename Fun> 
struct otherwise :  proto::when< proto::_, Fun > {
};
.fi
.SH "DESCRIPTION"
.PP
Use
proto::otherwise<T>
in your grammars as a synonym for
proto::when< proto::_, Fun >
as in the following transform which counts the number of terminals in an expression\&.
.PP


.sp
.if n \{\
.RS 4
.\}
.nf
// Count the terminals in an expression tree\&.
// Must be invoked with initial state == mpl::int_<0>()\&.
struct CountLeaves :
  proto::or_<
    proto::when<proto::terminal<proto::_>, mpl::next<proto::_state>()>,
    proto::otherwise<proto::fold<proto::_, proto::_state, CountLeaves> >
  >
{};
.fi
.if n \{\
.RE
.\}
.sp


