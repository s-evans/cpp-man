.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE ENV" 3 "" "" ""
.SH "NAME"
boost::proto::env
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/env\&.hpp>

template<typename Key, typename Value, typename Env = proto::empty_env> 
struct env {
  // construct/copy/destruct
  explicit env(Value const &, Env const & = Env());

  // public member functions
  \fIsee\fR\fI\-\fR\fIbelow\fR operator[](\fIsee\fR\fI\-\fR\fIbelow\fR) const;
};
.fi
.SH "DESCRIPTION"
.SS "env public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit env(Value const & value, Env const & other = Env());
.fi

.PP
Parameters:
.RS 4
.PP
other
.RS 4
Another key/value store\&.
.RE
.PP
value
.RS 4
The value to be associated with the
Key\&.
.RE
.RE
.RE

.SS "env public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
\fIsee\fR\fI\-\fR\fIbelow\fR operator[](\fIsee\fR\fI\-\fR\fIbelow\fR) const;
.fi

.sp
If called with an object that is implicitly convertible to type
Key, this function returns the
Value
passed to the constructor\&. Otherwise, it returns the result of calling
operator[]
on the
Env
passed to the constructor\&.
.RE


