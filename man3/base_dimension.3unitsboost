.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::units::base_dimension
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/units/base_dimension\&.hpp>

template<typename Derived, long N> 
class base_dimension : public ordinal< N > {
public:
  // types
  typedef \fIunspecified\fR dimension_type;  // A convenience typedef\&. Equivalent to boost::units::derived_dimension<Derived,1>::type\&. 
  typedef Derived     type;            // Provided for mpl compatability\&. 
};
.fi
.SH "DESCRIPTION"
.PP
Defines a base dimension\&. To define a dimension you need to provide the derived class (CRTP) and a unique integer\&.

.sp
.if n \{\
.RS 4
.\}
.nf
struct my_dimension : boost::units::base_dimension<my_dimension, 1> {};

.fi
.if n \{\
.RE
.\}
.sp
It is designed so that you will get an error message if you try to use the same value in multiple definitions\&.

