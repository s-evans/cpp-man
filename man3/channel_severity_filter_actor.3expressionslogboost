.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS " 3 "" "" ""
.SH "NAME"
boost::log::expressions::channel_severity_filter_actor
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/expressions/predicates/channel_severity_filter\&.hpp>

template<typename ChannelT, typename SeverityT, 
         typename ChannelFallbackT = fallback_to_none, 
         typename SeverityFallbackT = fallback_to_none, 
         typename ChannelOrderT = less, 
         typename SeverityCompareT = greater_equal, 
         typename AllocatorT = std::allocator< void >, 
         template< typename > class ActorT = phoenix::actor> 
class channel_severity_filter_actor : public ActorT< channel_severity_filter_terminal< ChannelT, SeverityT, ChannelFallbackT, SeverityFallbackT, ChannelOrderT, SeverityCompareT, AllocatorT > >
{
public:
  // types
  typedef channel_severity_filter_terminal< ChannelT, SeverityT, ChannelFallbackT, SeverityFallbackT, ChannelOrderT, SeverityCompareT, AllocatorT > terminal_type;             // Terminal type\&. 
  typedef ActorT< terminal_type >                                                                                                                   base_type;                 // Base actor type\&. 
  typedef terminal_type::channel_value_type                                                                                                         channel_value_type;        // Channel attribute value type\&. 
  typedef terminal_type::channel_fallback_policy                                                                                                    channel_fallback_policy;   // Channel fallback policy\&. 
  typedef terminal_type::severity_value_type                                                                                                        severity_value_type;       // Severity level attribute value type\&. 
  typedef terminal_type::severity_fallback_policy                                                                                                   severity_fallback_policy;  // Severity level fallback policy\&. 

  // member classes/structs/unions

  // An auxiliary pseudo\-reference to implement insertion through subscript
  // operator\&.

  class subscript_result {
  public:
    // construct/copy/destruct
    subscript_result(channel_severity_filter_actor &, 
                     channel_value_type const &);
    void operator=(severity_value_type const &);
  };

  // construct/copy/destruct
  explicit channel_severity_filter_actor(base_type const &);
  channel_severity_filter_actor(channel_severity_filter_actor const &);

  // public member functions
  this_type & set_default(bool);
  this_type & add(channel_value_type const &, severity_value_type const &);
  subscript_result operator[](channel_value_type const &);
};
.fi
.SH "DESCRIPTION"
.SS "channel_severity_filter_actor public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit channel_severity_filter_actor(base_type const & act);
.fi

Initializing constructor\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
channel_severity_filter_actor(channel_severity_filter_actor const & that);
.fi

Copy constructor\&. .RE

.SS "channel_severity_filter_actor public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
this_type & set_default(bool def);
.fi

Sets the default function result\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
this_type & add(channel_value_type const & channel, 
                severity_value_type const & severity);
.fi

Adds a new element to the mapping\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
subscript_result operator[](channel_value_type const & channel);
.fi

Alternative interface for adding a new element to the mapping\&. .RE


