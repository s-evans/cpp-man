.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPL" 3 "" "" ""
.SH "NAME"
boost::proto::reverse_fold_tree \- A PrimitiveTransform that recursively applies the proto::reverse_fold<> transform to sub\-trees that all share a common tag type\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/fold_tree\&.hpp>

template<typename Sequence, typename State0, typename Fun> 
struct reverse_fold_tree :
   proto::transform< reverse_fold_tree<Sequence, State0, Fun> >
{
  // member classes/structs/unions
  template<typename Expr, typename State, typename Data> 
  struct impl :  
    proto::reverse_fold<Sequence, State0, recurse_if_<typename Expr::proto_tag, Fun> >
      ::template impl<Expr, State, Data>
  {
  };
};
.fi
.SH "DESCRIPTION"
.PP

proto::reverse_fold_tree<>
is useful for flattening trees into lists; for example, you might use
proto::reverse_fold_tree<>
to flatten an expression tree like
a | b | c
into a Fusion list like
cons(a, cons(b, cons(c)))\&.
.PP

proto::reverse_fold_tree<>
is easily understood in terms of a
recurse_if_<>
helper, defined as follows:

.sp
.if n \{\
.RS 4
.\}
.nf
 template<typename Tag, typename Fun>
struct recurse_if_ :
  proto::if_<
    // If the current node has type type "Tag" \&.\&.\&.
    boost::is_same<proto::tag_of<proto::_>, Tag>(),
    // \&.\&.\&. recurse, otherwise \&.\&.\&.
    proto::reverse_fold<proto::_, proto::_state, recurse_if_<Tag, Fun> >,
    // \&.\&.\&. apply the Fun transform\&.
    Fun
  >
{};
.fi
.if n \{\
.RE
.\}
.sp

.PP
With
recurse_if_<>
as defined above,
proto::reverse_fold_tree<Sequence, State0, Fun>()(expr, state, data)
is equivalent to:

.sp
.if n \{\
.RS 4
.\}
.nf
proto::reverse_fold<
  Sequence,
  State0,
  recurse_if_<typename Expr::proto_tag, Fun>
>()(expr, state, data)\&.
.fi
.if n \{\
.RE
.\}
.sp
It has the effect of folding a tree back\-to\-front, recursing into child nodes that share a tag type with the parent node\&.

