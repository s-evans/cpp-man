.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION ALL_TO_ALL" 3 "" "" ""
.SH "NAME"
boost::mpi::all_to_all \- Send data from every process to every other process\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/mpi/collectives\&.hpp>


template<typename T> 
  void all_to_all(const communicator & comm, 
                  const std::vector< T > & in_values, 
                  std::vector< T > & out_values);
template<typename T> 
  void all_to_all(const communicator & comm, const T * in_values, 
                  T * out_values);
template<typename T> 
  void all_to_all(const communicator & comm, 
                  const std::vector< T > & in_values, int n, 
                  std::vector< T > & out_values);
template<typename T> 
  void all_to_all(const communicator & comm, const T * in_values, int n, 
                  T * out_values);
.fi
.SH "DESCRIPTION"
.PP
all_to_all
is a collective algorithm that transmits
p
values from every process to every other process\&. On process i, jth value of the
in_values
vector is sent to process j and placed in the ith position of the
out_values
vector in process
j\&. The type
T
of the values may be any type that is serializable or has an associated MPI data type\&. If
n
is provided, then arrays of
n
values will be transferred from one process to another\&.
.PP
When the type
T
has an associated MPI data type, this routine invokes
MPI_Alltoall
to scatter the values\&.
.PP

.PP
Parameters:
.RS 4
.PP
comm
.RS 4
The communicator over which the all\-to\-all communication will occur\&.
.RE
.PP
in_values
.RS 4
A vector or pointer to storage that contains the values to send to each process, indexed by the process ID number\&.
.RE
.PP
out_values
.RS 4
A vector or pointer to storage that will be updated to contain the values received from other processes\&. The jth value in
out_values
will come from the procss with rank j\&.
.RE
.RE

