.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS SLOT_BASE" 3 "" "" ""
.SH "NAME"
boost::signals2::slot_base \- Base class for slots\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/signals2/slot_base\&.hpp>


class slot_base {
public:
  // types
  typedef std::vector<\fIimplementation\fR\fI\-\fR\fIdetail\fR> locked_container_type;

  // tracking
  bool expired() const;
  locked_container_type lock() const;
};
.fi
.SH "DESCRIPTION"
.PP

.SS "slot_base tracking"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
bool expired() const;
.fi

.PP
Returns:
.RS 4
true
if any tracked object has expired\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
locked_container_type lock() const;
.fi

.PP
Returns:
.RS 4
A container holding shared_ptrs to each of the slot\'s tracked objects\&.  As long
            as the returned container is kept in scope, none of the slot\'s tracked objects can expire\&..RE
.PP
Throws:
.RS 4
expired_slot if any of the slot\'s tracked objects have expired\&..RE
.RE


