.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPL" 3 "" "" ""
.SH "NAME"
boost::move_upd::get_element_type
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/move/unique_ptr\&.hpp>

template<typename T> 
struct get_element_type {
  // types
  typedef bmupmu::if_c< value, T, DefaultWrap >::type::element_type type;

  // member classes/structs/unions

  struct DefaultWrap {
    // types
    typedef bmupmu::natify< T > element_type;
  };

  // public static functions
  template<typename X> static char test(int, typename X::element_type *);
  template<typename X> static int test(\&.\&.\&.);

  // public data members
  static const bool value;
};
.fi
.SH "DESCRIPTION"
.SS "get_element_type public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename X> static char test(int, typename X::element_type *);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename X> static int test(\&.\&.\&.);
.fi

.RE


