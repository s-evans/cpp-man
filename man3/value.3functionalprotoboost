.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT VALUE" 3 "" "" ""
.SH "NAME"
boost::proto::functional::value \- A callable PolymorphicFunctionObject that is equivalent to the proto::value() function\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/traits\&.hpp>


struct value :  proto::callable {
  // member classes/structs/unions
  template<typename This, typename Expr> 
  struct result<This(Expr)> :  proto::result_of::value< Expr > {
  };

  // public member functions
  template<typename Expr> 
    typename proto::result_of::value< Expr & >::type operator()(Expr &) const;
  template<typename Expr> 
    typename proto::result_of::value< Expr const & >::type 
    operator()(Expr const &) const;
};
.fi
.SH "DESCRIPTION"
.SS "value public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Expr> 
  typename proto::result_of::value< Expr & >::type 
  operator()(Expr & expr) const;
.fi

.sp
Return the value of the given terminal expression\&.
.PP
Parameters:
.RS 4
.PP
expr
.RS 4
The terminal expression node\&.
.RE
.RE
.PP
Requires:
.RS 4

proto::is_expr<Expr>::value
is
true
.sp

0 == Expr::proto_arity::value
.RE
.PP
Returns:
.RS 4

proto::value(expr)
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename Expr> 
  typename proto::result_of::value< Expr const & >::type 
  operator()(Expr const & expr) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


