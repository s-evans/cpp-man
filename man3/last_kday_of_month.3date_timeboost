.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLA" 3 "" "" ""
.SH "NAME"
boost::date_time::last_kday_of_month \- Calculate something like Last Sunday of January\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/date_generators\&.hpp>

template<typename date_type> 
class last_kday_of_month :
  public boost::date_time::year_based_generator< date_type >
{
public:
  // types
  typedef date_type::calendar_type        calendar_type;   
  typedef calendar_type::day_of_week_type day_of_week_type;
  typedef calendar_type::month_type       month_type;      
  typedef calendar_type::year_type        year_type;       
  typedef date_type::duration_type        duration_type;   

  // construct/copy/destruct
  last_kday_of_month(day_of_week_type, month_type);

  // public member functions
  virtual date_type get_date(year_type) const;
  month_type month() const;
  day_of_week_type day_of_week() const;
  virtual std::string to_string() const;
};
.fi
.SH "DESCRIPTION"
.PP
Useful generator functor for finding holidays and daylight savings Get the last day of the month and then calculate the difference to the last previous day\&.
.SS "last_kday_of_month public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
last_kday_of_month(day_of_week_type dow, month_type m);
.fi

.sp
Specify the date spec like last \'Sunday\' in \'April\' spec\&. 
.PP
Parameters:
.RS 4
.PP
dow
.RS 4
The day of week, eg: Sunday, Monday, etc
.RE
.PP
m
.RS 4
The month of the year, eg: Jan, Feb, Mar, etc
.RE
.RE
.RE

.SS "last_kday_of_month public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual date_type get_date(year_type year) const;
.fi

Return a concrete date when provided with a year specific year\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
month_type month() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
day_of_week_type day_of_week() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
virtual std::string to_string() const;
.fi

.sp
Returns string suitable for use in POSIX time zone string\&. Returns a string formatted as "M4\&.5\&.0" ==> last Sunday in April\&.
.RE


