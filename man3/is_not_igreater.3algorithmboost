.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT IS_NOT_IGR" 3 "" "" ""
.SH "NAME"
boost::algorithm::is_not_igreater \- case insensitive version of is_not_greater
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/algorithm/string/compare\&.hpp>


struct is_not_igreater {
  // construct/copy/destruct
  is_not_igreater(const std::locale & = std::locale());

  // public member functions
  template<typename T1, typename T2> 
    bool operator()(const T1 &, const T2 &) const;
};
.fi
.SH "DESCRIPTION"
.PP
Case insensitive comparison predicate\&. Comparison is done using specified locales\&.
.SS "is_not_igreater public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
is_not_igreater(const std::locale & Loc = std::locale());
.fi

.sp
Constructor\&. 
.PP
Parameters:
.RS 4
.PP
Loc
.RS 4
locales used for comparison
.RE
.RE
.RE

.SS "is_not_igreater public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T1, typename T2> 
  bool operator()(const T1 & Arg1, const T2 & Arg2) const;
.fi

.sp
Function operator\&. Compare two operands\&. Case is ignored\&.
.RE


