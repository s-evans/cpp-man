.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS INTERPRO" 3 "" "" ""
.SH "NAME"
boost::interprocess::interprocess_condition
.SH "SYNOPSIS"
.\" wait: Class interprocess_condition
.\" Class interprocess_condition: wait
.\" timed_wait: Class interprocess_condition
.\" Class interprocess_condition: timed_wait
.\" notify_one: Class interprocess_condition
.\" Class interprocess_condition: notify_one
.\" notify_all: Class interprocess_condition
.\" Class interprocess_condition: notify_all
.\" interprocess_condition: Class interprocess_condition
.\" Class interprocess_condition: interprocess_condition
.\" interprocess_condition: Class interprocess_condition
.\" Class interprocess_condition: interprocess_condition

.sp
.nf
// In header: <boost/interprocess/sync/interprocess_condition\&.hpp>


class interprocess_condition {
public:
  // construct/copy/destruct
  interprocess_condition();
  ~interprocess_condition();

  // public member functions
  void notify_one();
  void notify_all();
  template<typename L> void wait(L &);
  template<typename L, typename Pr> void wait(L &, Pr);
  template<typename L> bool timed_wait(L &, const boost::posix_time::ptime &);
  template<typename L, typename Pr> 
    bool timed_wait(L &, const boost::posix_time::ptime &, Pr);
};
.fi
.SH "DESCRIPTION"
.PP
This class is a condition variable that can be placed in shared memory or memory mapped files\&. Destroys the object of type std::condition_variable_any
.PP
Unlike std::condition_variable in C++11, it is NOT safe to invoke the destructor if all threads have been only notified\&. It is required that they have exited their respective wait functions\&.
.SS "interprocess_condition public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
interprocess_condition();
.fi

Constructs a interprocess_condition\&. On error throws interprocess_exception\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~interprocess_condition();
.fi

.sp
Destroys *this liberating system resources\&.
.RE

.SS "interprocess_condition public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" notify_one: Class interprocess_condition
.\" Class interprocess_condition: notify_one

.sp

.nf
void notify_one();
.fi

.sp
If there is a thread waiting on *this, change that thread\'s state to ready\&. Otherwise there is no effect\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" notify_all: Class interprocess_condition
.\" Class interprocess_condition: notify_all

.sp

.nf
void notify_all();
.fi

.sp
Change the state of all threads waiting on *this to ready\&. If there are no waiting threads, notify_all() has no effect\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
.\" wait: Class interprocess_condition
.\" Class interprocess_condition: wait

.sp

.nf
template<typename L> void wait(L & lock);
.fi

.sp
Releases the lock on the
interprocess_mutex
object associated with lock, blocks the current thread of execution until readied by a call to this\->notify_one() or this\->notify_all(), and then reacquires the lock\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" wait: Class interprocess_condition
.\" Class interprocess_condition: wait

.sp

.nf
template<typename L, typename Pr> void wait(L & lock, Pr pred);
.fi

.sp
The same as: while (!pred()) wait(lock)
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
.\" timed_wait: Class interprocess_condition
.\" Class interprocess_condition: timed_wait

.sp

.nf
template<typename L> 
  bool timed_wait(L & lock, const boost::posix_time::ptime & abs_time);
.fi

.sp
Releases the lock on the
interprocess_mutex
object associated with lock, blocks the current thread of execution until readied by a call to this\->notify_one() or this\->notify_all(), or until time abs_time is reached, and then reacquires the lock\&. Returns: false if time abs_time is reached, otherwise true\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
.\" pred: Class interprocess_condition
.\" Class interprocess_condition: pred
.\" timed_wait: Class interprocess_condition
.\" Class interprocess_condition: timed_wait

.sp

.nf
template<typename L, typename Pr> 
  bool timed_wait(L & lock, const boost::posix_time::ptime & abs_time, 
                  Pr pred);
.fi

.sp
The same as: while (!pred()) { if (!timed_wait(lock, abs_time)) return pred(); } return true;
.RE


