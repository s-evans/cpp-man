.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLA" 3 "" "" ""
.SH "NAME"
boost::container::small_vector_base
.SH "SYNOPSIS"
.\" vector: Class template small_vector_base
.\" Class template small_vector_base: vector
.\" swap: Class template small_vector_base
.\" Class template small_vector_base: swap
.\" small_vector_base: Class template small_vector_base
.\" Class template small_vector_base: small_vector_base
.\" small_vector_allocator: Class template small_vector_base
.\" Class template small_vector_base: small_vector_allocator

.sp
.nf
// In header: <boost/container/small_vector\&.hpp>

template<typename T, typename SecondaryAllocator> 
class small_vector_base : public boost::container::vector< T, small_vector_allocator< SecondaryAllocator > >
{
public:
  // construct/copy/destruct
  small_vector_base & operator=(const small_vector_base &);
  small_vector_base & operator=(small_vector_base &&);

  // public member functions
  void swap(small_vector_base &);
};
.fi
.SH "DESCRIPTION"
.\" modify_any_small_vector_of_foo: Class template small_vector_base
.\" Class template small_vector_base: modify_any_small_vector_of_foo
.\" read_any_small_vector_of_foo: Class template small_vector_base
.\" Class template small_vector_base: read_any_small_vector_of_foo
.\" modify_any_small_vector_of_foo: Class template small_vector_base
.\" Class template small_vector_base: modify_any_small_vector_of_foo
.PP
This class consists of common code from all small_vector<T, N> types that don\'t depend on the "N" template parameter\&. This class is non\-copyable and non\-destructible, so this class tipically used as reference argument to functions that read or write small vectors\&. Since
small_vector<T, N>
derives from
small_vector_base<T>, the conversion to
small_vector_base
is implicit:

.PP
//Clients can pass any small_vector<Foo, N>\&. void read_any_small_vector_of_foo(const small_vector_base<Foo> &in_parameter); void modify_any_small_vector_of_foo(small_vector_base<Foo> &out_parameter);
.PP
void some_function() { small_vector<Foo, 8> myvector; read_any_small_vector_of_foo(myvector); // Reads myvector modify_any_small_vector_of_foo(myvector); // Modifies myvector }
.PP
All
boost::container:vector
member functions are inherited\&. See
vector
documentation for details\&.
.SS "small_vector_base public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
small_vector_base & operator=(const small_vector_base & other);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
small_vector_base & operator=(small_vector_base && other);
.fi

.RE

.SS "small_vector_base public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" swap: Class template small_vector_base
.\" Class template small_vector_base: swap

.sp

.nf
void swap(small_vector_base & other);
.fi

.RE


