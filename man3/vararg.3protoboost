.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE V" 3 "" "" ""
.SH "NAME"
boost::proto::vararg \- For matching a Grammar to a variable number of sub\-expressions\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/matches\&.hpp>

template<typename Grammar> 
struct vararg {
};
.fi
.SH "DESCRIPTION"
.PP
An expression type
proto::basic_expr<AT, proto::listN<A0,\&.\&.\&.An,U0,\&.\&.\&.Um> >
matches a grammar
proto::basic_expr<BT, proto::listM<B0,\&.\&.\&.Bn,proto::vararg<V> > >
if
BT
is
proto::_
or
AT, and if
Ax
matches
Bx
for each
x
in
[0,n]
and if
Ux
matches
V
for each
x
in
[0,m]\&.
.PP
For example:
.PP


.sp
.if n \{\
.RS 4
.\}
.nf
// Match any function call expression, regardless
// of the number of function arguments:
struct Function :
  proto::function< proto::vararg<proto::_> >
{};
.fi
.if n \{\
.RE
.\}
.sp

.PP
When used as a transform,
proto::vararg<G>
applies
G\'s transform\&.

