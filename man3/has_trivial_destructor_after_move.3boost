.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRU" 3 "" "" ""
.SH "NAME"
boost::has_trivial_destructor_after_move
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/move/traits\&.hpp>

template<typename T> 
struct has_trivial_destructor_after_move {
};
.fi
.SH "DESCRIPTION"
.PP
If this trait yields to true (\fIhas_trivial_destructor_after_move\fR\fI <T>::value == true\fR) means that if T is used as argument of a move construction/assignment, there is no need to call T\'s destructor\&. This optimization tipically is used to improve containers\' performance\&.
.PP
By default this trait is true if the type has trivial destructor, every class should specialize this trait if it wants to improve performance when inserted in containers\&.

