.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::random::uniform_smallint
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/uniform_smallint\&.hpp>

template<typename IntType = int> 
class uniform_smallint {
public:
  // types
  typedef IntType input_type; 
  typedef IntType result_type;

  // member classes/structs/unions

  class param_type {
  public:
    // types
    typedef uniform_smallint distribution_type;

    // construct/copy/destruct
    param_type(IntType = 0, IntType = 9);

    // public member functions
    IntType a() const;
    IntType b() const;

    // friend functions
    template<typename CharT, typename Traits> 
      friend std::basic_ostream< CharT, Traits > & 
      operator<<(std::basic_ostream< CharT, Traits > &, const param_type &);
    template<typename CharT, typename Traits> 
      friend std::basic_istream< CharT, Traits > & 
      operator>>(std::basic_istream< CharT, Traits > &, const param_type &);
    friend bool operator==(const param_type &, const param_type &);
    friend bool operator!=(const param_type &, const param_type &);
  };

  // construct/copy/destruct
  explicit uniform_smallint(IntType = 0, IntType = 9);
  explicit uniform_smallint(const param_type &);

  // public member functions
  result_type a() const;
  result_type b() const;
  result_type min() const;
  result_type max() const;
  param_type param() const;
  void param(const param_type &);
  void reset();
  template<typename Engine> result_type operator()(Engine &) const;
  template<typename Engine> 
    result_type operator()(Engine &, const param_type &) const;

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const uniform_smallint &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, 
               const uniform_smallint &);
  friend bool operator==(const uniform_smallint &, const uniform_smallint &);
  friend bool operator!=(const uniform_smallint &, const uniform_smallint &);
};
.fi
.SH "DESCRIPTION"
.PP
The distribution function
uniform_smallint
models a
random distribution
\&. On each invocation, it returns a random integer value uniformly distributed in the set of integer numbers {min, min+1, min+2, \&.\&.\&., max}\&. It assumes that the desired range (max\-min+1) is small compared to the range of the underlying source of random numbers and thus makes no attempt to limit quantization errors\&.
.PP
Let
\&\s-2\u[1]\d\s+2[IMAGE]\&\s-2\u[2]\d\s+2 [$r_{\mathtt{out}} = (\mbox{max}-\mbox{min}+1)$]
the desired range of integer numbers, and let
\&\s-2\u[3]\d\s+2[IMAGE]\&\s-2\u[4]\d\s+2 [$r_{\mathtt{base}}$]
be the range of the underlying source of random numbers\&. Then, for the uniform distribution, the theoretical probability for any number i in the range
\&\s-2\u[5]\d\s+2[IMAGE]\&\s-2\u[6]\d\s+2 [$r_{\mathtt{out}}$]
will be
\&\s-2\u[7]\d\s+2[IMAGE]\&\s-2\u[8]\d\s+2 [$\displaystyle p_{\mathtt{out}}(i) = \frac{1}{r_{\mathtt{out}}}$]\&. Likewise, assume a uniform distribution on
\&\s-2\u[9]\d\s+2[IMAGE]\&\s-2\u[4]\d\s+2 [$r_{\mathtt{base}}$]
for the underlying source of random numbers, i\&.e\&.
\&\s-2\u[10]\d\s+2[IMAGE]\&\s-2\u[11]\d\s+2 [$\displaystyle p_{\mathtt{base}}(i) = \frac{1}{r_{\mathtt{base}}}$]\&. Let
\&\s-2\u[12]\d\s+2[IMAGE]\&\s-2\u[13]\d\s+2 [$p_{\mathtt{out\_s}}(i)$]
denote the random distribution generated by
uniform_smallint\&. Then the sum over all i in
\&\s-2\u[14]\d\s+2[IMAGE]\&\s-2\u[6]\d\s+2 [$r_{\mathtt{out}}$]
of
\&\s-2\u[15]\d\s+2[IMAGE]\&\s-2\u[16]\d\s+2 [$\displaystyle \left(\frac{p_{\mathtt{out\_s}}(i)}{p_{\mathtt{out}}(i)} - 1\right)^2$]
shall not exceed
\&\s-2\u[17]\d\s+2[IMAGE]\&\s-2\u[18]\d\s+2 [$\displaystyle \frac{r_{\mathtt{out}}}{r_{\mathtt{base}}^2} (r_{\mathtt{base}} \mbox{ mod } r_{\mathtt{out}}) (r_{\mathtt{out}} - r_{\mathtt{base}} \mbox{ mod } r_{\mathtt{out}})$]\&.
.PP
The template parameter IntType shall denote an integer\-like value type\&.
.PP

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
The property above is the square sum of the relative differences in probabilities between the desired uniform distribution
\&\s-2\u[19]\d\s+2[IMAGE]\&\s-2\u[20]\d\s+2 [$p_{\mathtt{out}}(i)$]
and the generated distribution
\&\s-2\u[21]\d\s+2[IMAGE]\&\s-2\u[13]\d\s+2 [$p_{\mathtt{out\_s}}(i)$]\&. The property can be fulfilled with the calculation
\&\s-2\u[22]\d\s+2[IMAGE]\&\s-2\u[23]\d\s+2 [$(\mbox{base\_rng} \mbox{ mod } r_{\mathtt{out}})$], as follows: Let
\&\s-2\u[24]\d\s+2[IMAGE]\&\s-2\u[25]\d\s+2 [$r = r_{\mathtt{base}} \mbox{ mod } r_{\mathtt{out}}$]\&. The base distribution on
\&\s-2\u[26]\d\s+2[IMAGE]\&\s-2\u[4]\d\s+2 [$r_{\mathtt{base}}$]
is folded onto the range
\&\s-2\u[27]\d\s+2[IMAGE]\&\s-2\u[6]\d\s+2 [$r_{\mathtt{out}}$]\&. The numbers i < r have assigned
\&\s-2\u[28]\d\s+2[IMAGE]\&\s-2\u[29]\d\s+2 [$\displaystyle \left\lfloor\frac{r_{\mathtt{base}}}{r_{\mathtt{out}}}\right\rfloor+1$]
numbers of the base distribution, the rest has only
\&\s-2\u[30]\d\s+2[IMAGE]\&\s-2\u[31]\d\s+2 [$\displaystyle \left\lfloor\frac{r_{\mathtt{base}}}{r_{\mathtt{out}}}\right\rfloor$]\&. Therefore,
\&\s-2\u[32]\d\s+2[IMAGE]\&\s-2\u[33]\d\s+2 [$\displaystyle p_{\mathtt{out\_s}}(i) = \left(\left\lfloor\frac{r_{\mathtt{base}}} {r_{\mathtt{out}}}\right\rfloor+1\right) / r_{\mathtt{base}}$]
for i < r and
\&\s-2\u[34]\d\s+2[IMAGE]\&\s-2\u[35]\d\s+2 [$\displaystyle p_{\mathtt{out\_s}}(i) = \left\lfloor\frac{r_{\mathtt{base}}} {r_{\mathtt{out}}}\right\rfloor/r_{\mathtt{base}}$]
otherwise\&. Substituting this in the above sum formula leads to the desired result\&.
.sp .5v
.RE

.PP
Note: The upper bound for
\&\s-2\u[36]\d\s+2[IMAGE]\&\s-2\u[37]\d\s+2 [$(r_{\mathtt{base}} \mbox{ mod } r_{\mathtt{out}}) (r_{\mathtt{out}} - r_{\mathtt{base}} \mbox{ mod } r_{\mathtt{out}})$]
is
\&\s-2\u[38]\d\s+2[IMAGE]\&\s-2\u[39]\d\s+2 [$\displaystyle \frac{r_{\mathtt{out}}^2}{4}$]\&. Regarding the upper bound for the square sum of the relative quantization error of
\&\s-2\u[40]\d\s+2[IMAGE]\&\s-2\u[41]\d\s+2 [$\displaystyle \frac{r_\mathtt{out}^3}{4r_{\mathtt{base}}^2}$], it seems wise to either choose
\&\s-2\u[42]\d\s+2[IMAGE]\&\s-2\u[4]\d\s+2 [$r_{\mathtt{base}}$]
so that
\&\s-2\u[43]\d\s+2[IMAGE]\&\s-2\u[44]\d\s+2 [$r_{\mathtt{base}} > 10r_{\mathtt{out}}^2$]
or ensure that
\&\s-2\u[45]\d\s+2[IMAGE]\&\s-2\u[4]\d\s+2 [$r_{\mathtt{base}}$]
is divisible by
\&\s-2\u[46]\d\s+2[IMAGE]\&\s-2\u[6]\d\s+2 [$r_{\mathtt{out}}$]\&.
.SS "uniform_smallint public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit uniform_smallint(IntType min = 0, IntType max = 9);
.fi

.sp
Constructs a
uniform_smallint\&.
min
and
max
are the lower and upper bounds of the output range, respectively\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit uniform_smallint(const param_type & param);
.fi

.sp
Constructs a
uniform_smallint
from its parameters\&.
.RE

.SS "uniform_smallint public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type a() const;
.fi

.sp
Returns the minimum value of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
result_type b() const;
.fi

.sp
Returns the maximum value of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
result_type min() const;
.fi

.sp
Returns the minimum value of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
result_type max() const;
.fi

.sp
Returns the maximum value of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
param_type param() const;
.fi

.sp
Returns the parameters of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void param(const param_type & param);
.fi

.sp
Sets the parameters of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void reset();
.fi

.sp
Effects: Subsequent uses of the distribution do not depend on values produced by any engine prior to invoking reset\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
template<typename Engine> result_type operator()(Engine & eng) const;
.fi

.sp
Returns a value uniformly distributed in the range [min(), max()]\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
template<typename Engine> 
  result_type operator()(Engine & eng, const param_type & param) const;
.fi

.sp
Returns a value uniformly distributed in the range [param\&.a(), param\&.b()]\&.
.RE

.SS "uniform_smallint friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const uniform_smallint & ud);
.fi

.sp
Writes the distribution to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const uniform_smallint & ud);
.fi

.sp
Reads the distribution from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const uniform_smallint & lhs, 
                       const uniform_smallint & rhs);
.fi

.sp
Returns true if the two distributions will produce identical sequences of values given equal generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const uniform_smallint & lhs, 
                       const uniform_smallint & rhs);
.fi

.sp
Returns true if the two distributions may produce different sequences of values given equal generators\&.
.RE


