.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPL" 3 "" "" ""
.SH "NAME"
boost::visit_each \- Allow limited exploration of class members\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/visit_each\&.hpp>


template<typename Visitor, typename T> 
  void visit_each(const Visitor& visitor, const T& t, int);
.fi
.SH "DESCRIPTION"
.PP
The
visit_each
mechanism allows a visitor to be applied to every subobject in a given object\&. It is used by the Signals library to discover
signals::trackable
objects within a function object, but other uses may surface if used universally (e\&.g\&., conservative garbage collection)\&. To fit within the
visit_each
framework, a
visit_each
overload must be supplied for each object type\&.
.PP
Effects:
.RS 4
visitor(t), and for every subobject
x
of
t:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
x
is a reference,
visit_each(visitor, ref(x), 0)
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise,
visit_each(visitor, x, 0)
.RE
.RS 4

.RE
.PP
Notes:
.RS 4
The third parameter is
long
for the fallback version of
visit_each
and the argument supplied to this third paramter must always be 0\&. The third parameter is an artifact of the widespread lack of proper function template ordering, and will be removed in the future\&.
.sp
Library authors will be expected to add additional overloads that specialize the T argument for their classes, so that subobjects can be visited\&.
.sp
Calls to visit_each are required to be unqualified, to enable argument\-dependent lookup\&.
.RE

