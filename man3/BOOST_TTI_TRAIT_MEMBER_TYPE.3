.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MACRO BOOST_" 3 "" "" ""
.SH "NAME"
BOOST_TTI_TRAIT_MEMBER_TYPE \- Expands to a metafunction whose typedef \'type\' is either the named type or a marker type\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/tti/member_type\&.hpp>

BOOST_TTI_TRAIT_MEMBER_TYPE(trait, name)
.fi
.SH "DESCRIPTION"
.PP
trait = the name of the metafunction within the tti namespace\&.
.PP
name = the name of the inner type\&.
.PP
generates a metafunction called "trait" where \'trait\' is the macro parameter\&. template<class BOOST_TTI_TP_T,class BOOST_TTI_TP_MARKER_TYPE = boost::tti::detail::notype> struct trait { typedef unspecified type; typedef BOOST_TTI_TP_MARKER_TYPE boost_tti_marker_type; }; The metafunction types and return: BOOST_TTI_TP_T = the enclosing type\&. BOOST_TTI_TP_MARKER_TYPE = (optional) a type to use as the marker type\&. defaults to the internal boost::tti::detail::notype\&. returns = \'type\' is the inner type of \'name\' if the inner type exists within the enclosing type, else \'type\' is a marker type\&. if the end\-user does not specify a marker type then an internal boost::tti::detail::notype marker type is used\&. The metafunction also encapsulates the type of the marker type as a nested \'boost_tti_marker_type\'\&.
.PP
The purpose of this macro is to encapsulate the \'name\' type as the typedef \'type\' of a metafunction, but only if it exists within the enclosing type\&. This allows for an evaluation of inner type existence, without generating a compiler error, which can be used by other metafunctions in this library\&.

