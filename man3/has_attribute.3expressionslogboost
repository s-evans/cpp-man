.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::log::expressions::has_attribute
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/expressions/predicates/has_attr\&.hpp>

template<typename T> 
class has_attribute {
public:
  // types
  typedef bool result_type;  // Function result_type\&. 
  typedef T    value_type;   // Expected attribute value type\&. 

  // construct/copy/destruct
  explicit has_attribute(attribute_name const &);

  // public member functions
  template<typename ArgT> result_type operator()(ArgT const &) const;
};
.fi
.SH "DESCRIPTION"
.PP
An attribute value presence checker\&.
.SS "has_attribute public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit has_attribute(attribute_name const & name);
.fi

.sp
Initializing constructor
.sp

.PP
Parameters:
.RS 4
.PP
name
.RS 4
Attribute name
.RE
.RE
.RE

.SS "has_attribute public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename ArgT> result_type operator()(ArgT const & arg) const;
.fi

.sp
Checking operator
.sp

.PP
Parameters:
.RS 4
.PP
arg
.RS 4
A set of attribute values or a log record
.RE
.RE
.PP
Returns:
.RS 4
true
if the log record contains the sought attribute value,
false
otherwise
.RE
.RE

.SS "Specializations"

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Class has_attribute<void>
.RE

