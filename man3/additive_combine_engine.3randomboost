.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::random::additive_combine_engine
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/additive_combine\&.hpp>

template<typename MLCG1, typename MLCG2> 
class additive_combine_engine {
public:
  // types
  typedef MLCG1              first_base; 
  typedef MLCG2              second_base;
  typedef MLCG1::result_type result_type;

  // construct/copy/destruct
  additive_combine_engine();
  explicit additive_combine_engine(result_type);
  template<typename SeedSeq> explicit additive_combine_engine(SeedSeq &);
  additive_combine_engine(typename MLCG1::result_type, 
                          typename MLCG2::result_type);
  template<typename It> additive_combine_engine(It &, It);

  // public static functions
  static result_type min();
  static result_type max();

  // public member functions
  void seed();
  void seed(result_type);
  template<typename SeedSeq> void seed(SeedSeq &);
  void seed(typename MLCG1::result_type, typename MLCG2::result_type);
  template<typename It> void seed(It &, It);
  result_type operator()();
  template<typename Iter> void generate(Iter, Iter);
  void discard(boost::uintmax_t);

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const additive_combine_engine &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, 
               const additive_combine_engine &);
  friend bool operator==(const additive_combine_engine &, 
                         const additive_combine_engine &);
  friend bool operator!=(const additive_combine_engine &, 
                         const additive_combine_engine &);

  // public data members
  static const bool has_fixed_range;
};
.fi
.SH "DESCRIPTION"
.PP
An instantiation of class template
additive_combine_engine
models a
pseudo\-random number generator
\&. It combines two multiplicative
linear_congruential_engine
number generators, i\&.e\&. those with
c
= 0\&. It is described in
.PP

.PP "Efficient and Portable Combined Random Number Generators", Pierre L\'Ecuyer, Communications of the ACM, Vol\&. 31, No\&. 6, June 1988, pp\&. 742\-749, 774
.PP
The template parameters MLCG1 and MLCG2 shall denote two different
linear_congruential_engine
number generators, each with c = 0\&. Each invocation returns a random number X(n) := (MLCG1(n) \- MLCG2(n)) mod (m1 \- 1), where m1 denotes the modulus of MLCG1\&.
.SS "additive_combine_engine public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
additive_combine_engine();
.fi

.sp
Constructs an
additive_combine_engine
using the default constructors of the two base generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit additive_combine_engine(result_type seed);
.fi

.sp
Constructs an
additive_combine_engine, using seed as the constructor argument for both base generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeedSeq> explicit additive_combine_engine(SeedSeq & seq);
.fi

.sp
Constructs an
additive_combine_engine, using seq as the constructor argument for both base generators\&.
.sp

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
The semantics of this function are liable to change\&. A
seed_seq
is designed to generate all the seeds in one shot, but this seeds the two base engines independantly and probably ends up giving the same sequence to both\&.
.sp .5v
.RE

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
additive_combine_engine(typename MLCG1::result_type seed1, 
                        typename MLCG2::result_type seed2);
.fi

.sp
Constructs an
additive_combine_engine, using
seed1
and
seed2
as the constructor argument to the first and second base generators, respectively\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename It> additive_combine_engine(It & first, It last);
.fi

.sp
Contructs an
additive_combine_engine
with values from the range defined by the input iterators first and last\&. first will be modified to point to the element after the last one used\&.
.sp
Throws:
std::invalid_argument
if the input range is too small\&.
.sp
Exception Safety: Basic
.RE

.SS "additive_combine_engine public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static result_type min();
.fi

.sp
Returns the smallest value that the generator can produce
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static result_type max();
.fi

.sp
Returns the largest value that the generator can produce
.RE

.SS "additive_combine_engine public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void seed();
.fi

.sp
Seeds an
additive_combine_engine
using the default seeds of the two base generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void seed(result_type seed);
.fi

.sp
Seeds an
additive_combine_engine, using
seed
as the seed for both base generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeedSeq> void seed(SeedSeq & seq);
.fi

.sp
Seeds an
additive_combine_engine, using
seq
to seed both base generators\&.
.sp
See the warning on the corresponding constructor\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
void seed(typename MLCG1::result_type seed1, 
          typename MLCG2::result_type seed2);
.fi

.sp
Seeds an
additive_combine
generator, using
seed1
and
seed2
as the seeds to the first and second base generators, respectively\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename It> void seed(It & first, It last);
.fi

.sp
Seeds an
additive_combine_engine
with values from the range defined by the input iterators first and last\&. first will be modified to point to the element after the last one used\&.
.sp
Throws:
std::invalid_argument
if the input range is too small\&.
.sp
Exception Safety: Basic
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
result_type operator()();
.fi

.sp
Returns the next value of the generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename Iter> void generate(Iter first, Iter last);
.fi

.sp
Fills a range with random values
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
void discard(boost::uintmax_t z);
.fi

.sp
Advances the state of the generator by
z\&.
.RE

.SS "additive_combine_engine friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const additive_combine_engine & r);
.fi

.sp
Writes the state of an
additive_combine_engine
to a
std::ostream\&. The textual representation of an
additive_combine_engine
is the textual representation of the first base generator followed by the textual representation of the second base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const additive_combine_engine & r);
.fi

.sp
Reads the state of an
additive_combine_engine
from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const additive_combine_engine & x, 
                       const additive_combine_engine & y);
.fi

.sp
Returns: true iff the two
additive_combine_engines
will produce the same sequence of values\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const additive_combine_engine & lhs, 
                       const additive_combine_engine & rhs);
.fi

.sp
Returns: true iff the two
additive_combine_engines
will produce different sequences of values\&.
.RE


