.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::property_tree::load
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/property_tree/ptree_serialization\&.hpp>


template<typename Archive, typename K, typename D, typename C> 
  void load(Archive & ar, basic_ptree< K, D, C > & t, 
            const unsigned int file_version);
.fi
.SH "DESCRIPTION"
.PP
De\-serialize the property tree to the given archive\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
In addition to de\-serializing from regular archives, this supports loading from archives requiring name\-value pairs, e\&.g\&. XML archives\&. The format should be that used by boost::property_tree::save\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
ar
.RS 4
The archive from which to load the serialized property tree\&. This archive should conform to the concept laid out by the Boost\&.Serialization library\&.
.RE
.PP
file_version
.RS 4
file_version for the archive\&.
.RE
.PP
t
.RS 4
The property tree to de\-serialize\&.
.RE
.RE
.PP
Postconditions:
.RS 4
t
will contain the de\-serialized data from
ar\&.
.RE

