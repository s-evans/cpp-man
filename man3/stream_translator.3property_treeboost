.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLA" 3 "" "" ""
.SH "NAME"
boost::property_tree::stream_translator \- Implementation of Translator that uses the stream overloads\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/property_tree/stream_translator\&.hpp>

template<typename Ch, typename Traits, typename Alloc, typename E> 
class stream_translator {
public:
  // types
  typedef std::basic_string< Ch, Traits, Alloc > internal_type;
  typedef E                                      external_type;

  // construct/copy/destruct
  explicit stream_translator(std::locale = std::locale());

  // public member functions
  boost::optional< E > get_value(const internal_type &);
  boost::optional< internal_type > put_value(const E &);
};
.fi
.SH "DESCRIPTION"
.SS "stream_translator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit stream_translator(std::locale loc = std::locale());
.fi

.RE

.SS "stream_translator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
boost::optional< E > get_value(const internal_type & v);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
boost::optional< internal_type > put_value(const E & v);
.fi

.RE


