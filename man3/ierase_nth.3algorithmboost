.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPL" 3 "" "" ""
.SH "NAME"
boost::algorithm::ierase_nth \- Erase nth algorithm\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/algorithm/string/erase\&.hpp>


template<typename SequenceT, typename RangeT> 
  void ierase_nth(SequenceT & Input, const RangeT & Search, int Nth, 
                  const std::locale & Loc = std::locale());
.fi
.SH "DESCRIPTION"
.PP
Remove the Nth occurrence of the substring in the input\&. The input sequence is modified in\-place\&. Searching is case insensitive\&.
.PP

.PP
Parameters:
.RS 4
.PP
Input
.RS 4
An input string
.RE
.PP
Loc
.RS 4
A locale used for case insensitive comparison
.RE
.PP
Nth
.RS 4
An index of the match to be replaced\&. The index is 0\-based\&. For negative N, matches are counted from the end of string\&.
.RE
.PP
Search
.RS 4
A substring to be searched for\&.
.RE
.RE

