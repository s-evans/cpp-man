.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE EX" 3 "" "" ""
.SH "NAME"
boost::proto::exact \- For forcing exact matches of terminal types\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/matches\&.hpp>

template<typename T> 
struct exact {
};
.fi
.SH "DESCRIPTION"
.PP
By default, matching terminals ignores references and cv\-qualifiers\&. For instance, a terminal expression of type
proto::terminal<int const &>::type
will match the grammar
proto::terminal<int>\&. If that is not desired, you can force an exact match with
proto::terminal<proto::exact<int> >\&. This will only match integer terminals where the terminal is held by value\&.

