.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::proto::pod_generator \- A generator that wraps expressions passed to it in the specified extension wrapper and uses aggregate initialization for the wrapper\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/generate\&.hpp>

template<template< typename > class Extends> 
struct pod_generator :  proto::callable {
  // member classes/structs/unions
  template<typename This, typename Expr> 
  struct result<This(Expr)> {
    // types
    typedef Extends< Expr > type;
  };

  // public member functions
  template<typename Expr> Extends< Expr > operator()(Expr const &) const;
};
.fi
.SH "DESCRIPTION"
.PP
Generators are intended for use as the first template parameter to the
proto::domain<>
class template and control if and how expressions within that domain are to be customized\&.
proto::pod_generator<>
wraps each expression passed to it in the
Extends<>
wrapper, and uses aggregate initialzation for the wrapped object\&.
.SS "pod_generator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Expr> Extends< Expr > operator()(Expr const & expr) const;
.fi

.PP
Parameters:
.RS 4
.PP
expr
.RS 4
A Proto expression
.RE
.RE
.PP
Returns:
.RS 4

Extends<Expr> that = {expr}; return that;
.RE
.RE


