.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE FU" 3 "" "" ""
.SH "NAME"
boost::log::attributes::function \- A class of an attribute that acquires its value from a third\-party function object\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/function\&.hpp>

template<typename R> 
class function : public attribute {
public:
  // types
  typedef R value_type;  // The attribute value type\&. 

  // member classes/structs/unions

  // Base class for factory implementation\&.

  class impl : public attribute::impl {
  };

  // Factory implementation\&.
  template<typename T> 
  class impl_template : public function< R >::impl {
  public:
    // construct/copy/destruct
    explicit impl_template(T const &);

    // public member functions
    virtual attribute_value get_value();
  };

  // construct/copy/destruct
  template<typename T> explicit function(T const &);
  explicit function(cast_source const &);
};
.fi
.SH "DESCRIPTION"
.PP
The attribute calls a stored nullary function object to acquire each value\&. The result type of the function object is the attribute value type\&.
.PP
It is not recommended to use this class directly\&. Use
make_function
convenience functions to construct the attribute instead\&.
.SS "function public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T> explicit function(T const & fun);
.fi

.sp
Initializing constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit function(cast_source const & source);
.fi

.sp
Constructor for casting support
.RE


