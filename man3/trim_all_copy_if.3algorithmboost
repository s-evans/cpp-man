.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TE" 3 "" "" ""
.SH "NAME"
boost::algorithm::trim_all_copy_if \- Trim All \- parametric\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/algorithm/string/trim_all\&.hpp>


template<typename SequenceT, typename PredicateT> 
  SequenceT trim_all_copy_if(const SequenceT & Input, PredicateT IsSpace);
.fi
.SH "DESCRIPTION"
.PP
Remove all leading and trailing spaces from the input and compress all other spaces to a single character\&. The result is a trimmed copy of the input
.PP

.PP
Parameters:
.RS 4
.PP
Input
.RS 4
An input sequence
.RE
.PP
IsSpace
.RS 4
A unary predicate identifying spaces
.RE
.RE
.PP
Returns:
.RS 4
A trimmed copy of the input
.RE

