.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS ERROR_W" 3 "" "" ""
.SH "NAME"
boost::program_options::error_with_no_option_name
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/errors\&.hpp>


class error_with_no_option_name :
  public boost::program_options::error_with_option_name
{
public:
  // construct/copy/destruct
  error_with_no_option_name(const std::string &, const std::string & = "");
  ~error_with_no_option_name();

  // public member functions
  virtual void set_option_name(const std::string &);
};
.fi
.SH "DESCRIPTION"
.PP
Base class of unparsable options, when the desired option cannot be identified\&.
.PP
It makes no sense to have an option name, when we can\'t match an option to the parameter
.PP
Having this a part of the
error_with_option_name
hierachy makes error handling a lot easier, even if the name indicates some sort of conceptual dissonance!
.SS "error_with_no_option_name public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
error_with_no_option_name(const std::string & template_, 
                          const std::string & original_token = "");
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~error_with_no_option_name();
.fi

.RE

.SS "error_with_no_option_name public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual void set_option_name(const std::string &);
.fi

.sp
Does NOT set option name, because no option name makes sense
.RE


