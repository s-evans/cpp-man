.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE TUP" 3 "" "" ""
.SH "NAME"
boost::type_erasure::tuple
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_erasure/tuple\&.hpp>

template<typename Concept, class\&.\&.\&. T> 
class tuple {
public:
  // construct/copy/destruct
  template<class\&.\&.\&. U> explicit tuple(U &&\&.\&.\&.);
};
.fi
.SH "DESCRIPTION"
.PP
tuple
is a Boost\&.Fusion Random Access Sequence containing anys\&.
Concept
specifies the
Concept
for each of the elements\&. The remaining arguments must be (possibly const and/or reference qualified) placeholders, which are the
placeholders
of the elements\&.
.SS "tuple public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<class\&.\&.\&. U> explicit tuple(U &&\&.\&.\&. args);
.fi

.sp
Constructs a tuple\&. Each element of
args
will be used to initialize the corresponding any member\&. The
binding
for the tuple elements is determined by mapping the placeholders in
T
to the corresponding types in
U\&.
.RE


