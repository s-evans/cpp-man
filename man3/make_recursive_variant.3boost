.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::make_recursive_variant \- Simplifies declaration of recursive variant types\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/variant/recursive_variant\&.hpp>

template<typename T1, typename T2 = \fIunspecified\fR, \&.\&.\&., 
         typename TN = \fIunspecified\fR> 
class make_recursive_variant {
public:
  // types
  typedef boost::variant< \fIunspecified\fR > type;
};
.fi
.SH "DESCRIPTION"
.PP
type
has behavior equivalent in every respect to some
variant< U1, U2, \&.\&.\&., UN >, where each type
U\fIi\fR
is the result of the corresponding type
T\fIi\fR
undergone a transformation function\&. The following pseudo\-code specifies the behavior of this transformation (call it
substitute):

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If T\fIi\fR is
              boost::recursive_variant_ then:
              variant< U1, U2, \&.\&.\&., UN >;.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Else if T\fIi\fR is of the
              form X * then:
              substitute(X) *;.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Else if T\fIi\fR is of the
              form X & then:
              substitute(X) &;.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Else if T\fIi\fR is of the
              form R (*)( X1, X2, \&.\&.\&., XN ) then:
              substitute(R) (*)( substitute(X1), substitute(X2), \&.\&.\&., substitute(XN) );.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Else if T\fIi\fR is of the
              form F < X1, X2, \&.\&.\&., XN > then:
              F< substitute(X1), substitute(X2), \&.\&.\&., substitute(XN) >;.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Else: T\fIi\fR\&..RE
.sp
.RE

.PP
Note that cv\-qualifiers are preserved and that the actual process is generally a bit more complicated\&. However, the above does convey the essential idea as well as describe the extent of the substititions\&.
.PP
Use of
make_recursive_variant
is demonstrated in
the section called &#8220;Recursive types with make_recursive_variant&#8221;\&.
.PP
\fBPortability\fR: Due to standard conformance issues in several compilers,
make_recursive_variant
is not universally supported\&. On these compilers the library indicates its lack of support via the definition of the preprocessor symbol
BOOST_VARIANT_NO_FULL_RECURSIVE_VARIANT_SUPPORT\&.

