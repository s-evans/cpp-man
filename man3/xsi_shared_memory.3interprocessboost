.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS XSI_SHARED_" 3 "" "" ""
.SH "NAME"
boost::interprocess::xsi_shared_memory
.SH "SYNOPSIS"
.\" xsi_shared_memory: Class xsi_shared_memory
.\" Class xsi_shared_memory: xsi_shared_memory
.\" swap: Class xsi_shared_memory
.\" Class xsi_shared_memory: swap
.\" remove: Class xsi_shared_memory
.\" Class xsi_shared_memory: remove

.sp
.nf
// In header: <boost/interprocess/xsi_shared_memory\&.hpp>


class xsi_shared_memory {
public:
  // construct/copy/destruct
  xsi_shared_memory();
  xsi_shared_memory(open_only_t, int);
  xsi_shared_memory(create_only_t, const xsi_key &, std::size_t, 
                    const permissions & = permissions());
  xsi_shared_memory(open_or_create_t, const xsi_key &, std::size_t, 
                    const permissions & = permissions());
  xsi_shared_memory(open_only_t, const xsi_key &);
  xsi_shared_memory(xsi_shared_memory &&);
  xsi_shared_memory & operator=(xsi_shared_memory &&);
  ~xsi_shared_memory();

  // public member functions
  void swap(xsi_shared_memory &);
  int get_shmid() const;
  mapping_handle_t get_mapping_handle() const;

  // public static functions
  static bool remove(int);
};
.fi
.SH "DESCRIPTION"
.PP
A class that wraps XSI (System V) shared memory\&. Unlike
shared_memory_object,
xsi_shared_memory
needs a valid
xsi_key
to identify a shared memory object\&.
.PP
Warning: XSI shared memory and interprocess portable shared memory (boost::interprocess::shared_memory_object) can\'t communicate between them\&.
.SS "xsi_shared_memory public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
xsi_shared_memory();
.fi

.sp
Default constructor\&. Represents an empty
xsi_shared_memory\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
xsi_shared_memory(open_only_t, int shmid);
.fi

.sp
Initializes *this with a shmid previously obtained (possibly from another process) This lower\-level initializer allows shared memory mapping without having a key\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
xsi_shared_memory(create_only_t, const xsi_key & key, std::size_t size, 
                  const permissions & perm = permissions());
.fi

.sp
Creates a new XSI shared memory from \'key\', with size "size" and permissions "perm"\&. If the shared memory previously exists, throws an error\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
xsi_shared_memory(open_or_create_t, const xsi_key & key, std::size_t size, 
                  const permissions & perm = permissions());
.fi

.sp
Opens an existing shared memory with identifier \'key\' or creates a new XSI shared memory from identifier \'key\', with size "size" and permissions "perm"\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
xsi_shared_memory(open_only_t, const xsi_key & key);
.fi

.sp
Tries to open a XSI shared memory with identifier \'key\' If the shared memory does not previously exist, it throws an error\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
xsi_shared_memory(xsi_shared_memory && moved);
.fi

.sp
Moves the ownership of "moved"\'s shared memory object to *this\&. After the call, "moved" does not represent any shared memory object\&. Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
xsi_shared_memory & operator=(xsi_shared_memory && moved);
.fi

.sp
Moves the ownership of "moved"\'s shared memory to *this\&. After the call, "moved" does not represent any shared memory\&. Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}
.\" remove: Class xsi_shared_memory
.\" Class xsi_shared_memory: remove

.sp

.nf
~xsi_shared_memory();
.fi

.sp
Destroys *this\&. The shared memory won\'t be destroyed, just this connection to it\&. Use remove() to destroy the shared memory\&.
.RE

.SS "xsi_shared_memory public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" swap: Class xsi_shared_memory
.\" Class xsi_shared_memory: swap

.sp

.nf
void swap(xsi_shared_memory & other);
.fi

Swaps two xsi_shared_memorys\&. Does not throw\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
int get_shmid() const;
.fi

.sp
Returns the shared memory ID that identifies the shared memory
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
mapping_handle_t get_mapping_handle() const;
.fi

.sp
Returns the mapping handle\&. Never throws
.RE

.SS "xsi_shared_memory public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" remove: Class xsi_shared_memory
.\" Class xsi_shared_memory: remove

.sp

.nf
static bool remove(int shmid);
.fi

.sp
Erases the XSI shared memory object identified by shmid from the system\&. Returns false on error\&. Never throws
.RE


