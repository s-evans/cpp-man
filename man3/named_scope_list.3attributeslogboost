.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS NAMED_SCOPE" 3 "" "" ""
.SH "NAME"
boost::log::attributes::named_scope_list \- The class implements the list of scopes\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/named_scope\&.hpp>


class named_scope_list {
public:
  // types
  typedef std::allocator< named_scope_entry > allocator_type;          // Allocator type\&. 
  typedef allocator_type::value_type          value_type;            
  typedef allocator_type::reference           reference;             
  typedef allocator_type::const_reference     const_reference;       
  typedef allocator_type::pointer             pointer;               
  typedef allocator_type::const_pointer       const_pointer;         
  typedef allocator_type::size_type           size_type;             
  typedef allocator_type::difference_type     difference_type;       
  typedef implementation_defined              const_iterator;        
  typedef implementation_defined              iterator;              
  typedef implementation_defined              const_reverse_iterator;
  typedef implementation_defined              reverse_iterator;      

  // construct/copy/destruct
  named_scope_list();
  named_scope_list(named_scope_list const &);
  named_scope_list & operator=(named_scope_list const &);
  ~named_scope_list();

  // public member functions
  const_iterator begin() const;
  const_iterator end() const;
  const_reverse_iterator rbegin() const;
  const_reverse_iterator rend() const;
  size_type size() const;
  bool empty() const;
  void swap(named_scope_list &);
  const_reference back() const;
  const_reference front() const;
};
.fi
.SH "DESCRIPTION"
.PP
The scope list provides a read\-only access to a doubly\-linked list of scopes\&.
.SS "named_scope_list public types"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

typedef
implementation_defined
const_iterator;
.sp
A constant iterator to the sequence of scopes\&. Complies to bidirectional iterator requirements\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

typedef
implementation_defined
iterator;
.sp
An iterator to the sequence of scopes\&. Complies to bidirectional iterator requirements\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

typedef
implementation_defined
const_reverse_iterator;
.sp
A constant reverse iterator to the sequence of scopes\&. Complies to bidirectional iterator requirements\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

typedef
implementation_defined
reverse_iterator;
.sp
A reverse iterator to the sequence of scopes\&. Complies to bidirectional iterator requirements\&.
.RE

.SS "named_scope_list public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
named_scope_list();
.fi

.sp
Default constructor
.sp

.PP
Postconditions:
.RS 4
empty() == true
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
named_scope_list(named_scope_list const & that);
.fi

.sp
Copy constructor
.sp

.PP
Postconditions:
.RS 4
std::equal(begin(), end(), that\&.begin()) == true
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
named_scope_list & operator=(named_scope_list const & that);
.fi

.sp
Assignment operator
.sp

.PP
Postconditions:
.RS 4
std::equal(begin(), end(), that\&.begin()) == true
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
~named_scope_list();
.fi

.sp
Destructor\&. Destroys the stored entries\&.
.RE

.SS "named_scope_list public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
const_iterator begin() const;
.fi

.sp

.PP
Returns:
.RS 4
Constant iterator to the first element of the container\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
const_iterator end() const;
.fi

.sp

.PP
Returns:
.RS 4
Constant iterator to the after\-the\-last element of the container\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
const_reverse_iterator rbegin() const;
.fi

.sp

.PP
Returns:
.RS 4
Constant iterator to the last element of the container\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
const_reverse_iterator rend() const;
.fi

.sp

.PP
Returns:
.RS 4
Constant iterator to the before\-the\-first element of the container\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
size_type size() const;
.fi

.sp

.PP
Returns:
.RS 4
The number of elements in the container
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
bool empty() const;
.fi

.sp

.PP
Returns:
.RS 4
true if the container is empty and false otherwise
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void swap(named_scope_list & that);
.fi

.sp
Swaps two instances of the container
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
const_reference back() const;
.fi

.sp

.PP
Returns:
.RS 4
Last pushed scope entry
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
const_reference front() const;
.fi

.sp

.PP
Returns:
.RS 4
First pushed scope entry
.RE
.RE


