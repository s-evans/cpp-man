.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLA" 3 "" "" ""
.SH "NAME"
boost::interprocess::basic_managed_windows_shared_memory
.SH "SYNOPSIS"
.\" swap: Class template basic_managed_windows_shared_memory
.\" Class template basic_managed_windows_shared_memory: swap
.\" size_type: Class template basic_managed_windows_shared_memory
.\" Class template basic_managed_windows_shared_memory: size_type
.\" basic_managed_windows_shared_memory: Class template basic_managed_windows_shared_memory
.\" Class template basic_managed_windows_shared_memory: basic_managed_windows_shared_memory
.\" basic_managed_windows_shared_memory: Class template basic_managed_windows_shared_memory
.\" Class template basic_managed_windows_shared_memory: basic_managed_windows_shared_memory

.sp
.nf
// In header: <boost/interprocess/managed_windows_shared_memory\&.hpp>

template<typename CharType, typename AllocationAlgorithm, 
         template< class IndexConfig > class IndexType> 
class basic_managed_windows_shared_memory {
public:
  // types
  typedef base_t::size_type size_type;

  // construct/copy/destruct
  basic_managed_windows_shared_memory();
  basic_managed_windows_shared_memory(create_only_t, const char *, size_type, 
                                      const void * = 0, 
                                      const permissions & = permissions());
  basic_managed_windows_shared_memory(open_or_create_t, const char *, 
                                      size_type, const void * = 0, 
                                      const permissions & = permissions());
  basic_managed_windows_shared_memory(open_only_t, const char *, 
                                      const void * = 0);
  basic_managed_windows_shared_memory(open_copy_on_write_t, const char *, 
                                      const void * = 0);
  basic_managed_windows_shared_memory(open_read_only_t, const char *, 
                                      const void * = 0);
  basic_managed_windows_shared_memory(basic_managed_windows_shared_memory &&);
  basic_managed_windows_shared_memory & 
  operator=(basic_managed_windows_shared_memory &&);
  ~basic_managed_windows_shared_memory();

  // public member functions
  void swap(basic_managed_windows_shared_memory &);
};
.fi
.SH "DESCRIPTION"
.PP
A basic managed windows shared memory creation class\&. Initializes the shared memory segment\&. Inherits all basic functionality from basic_managed_memory_impl<CharType, AllocationAlgorithm, IndexType> Unlike
basic_managed_shared_memory, it has no kernel persistence and the shared memory is destroyed when all processes destroy all their
windows_shared_memory
objects and mapped regions for the same shared memory or the processes end/crash\&.
.PP
Warning:
basic_managed_windows_shared_memory
and
basic_managed_shared_memory
can\'t communicate between them\&.
.SS "basic_managed_windows_shared_memory public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_managed_windows_shared_memory();
.fi

.sp
Default constructor\&. Does nothing\&. Useful in combination with move semantics
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_managed_windows_shared_memory(create_only_t, const char * name, 
                                    size_type size, const void * addr = 0, 
                                    const permissions & perm = permissions());
.fi

.sp
Creates shared memory and creates and places the segment manager\&. This can throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
basic_managed_windows_shared_memory(open_or_create_t, const char * name, 
                                    size_type size, const void * addr = 0, 
                                    const permissions & perm = permissions());
.fi

.sp
Creates shared memory and creates and places the segment manager if segment was not created\&. If segment was created it connects to the segment\&. This can throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
basic_managed_windows_shared_memory(open_only_t, const char * name, 
                                    const void * addr = 0);
.fi

.sp
Connects to a created shared memory and its segment manager\&. This can throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
basic_managed_windows_shared_memory(open_copy_on_write_t, const char * name, 
                                    const void * addr = 0);
.fi

.sp
Connects to a created shared memory and its segment manager in copy_on_write mode\&. This can throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
basic_managed_windows_shared_memory(open_read_only_t, const char * name, 
                                    const void * addr = 0);
.fi

.sp
Connects to a created shared memory and its segment manager in read\-only mode\&. This can throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
basic_managed_windows_shared_memory(basic_managed_windows_shared_memory && moved);
.fi

.sp
Moves the ownership of "moved"\'s managed memory to *this\&. Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
basic_managed_windows_shared_memory & 
operator=(basic_managed_windows_shared_memory && moved);
.fi

.sp
Moves the ownership of "moved"\'s managed memory to *this\&. Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
~basic_managed_windows_shared_memory();
.fi

.sp
Destroys *this and indicates that the calling process is finished using the resource\&. All mapped regions are still valid after destruction\&. When all mapped regions and
basic_managed_windows_shared_memory
objects referring the shared memory are destroyed, the operating system will destroy the shared memory\&.
.RE

.SS "basic_managed_windows_shared_memory public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" swap: Class template basic_managed_windows_shared_memory
.\" Class template basic_managed_windows_shared_memory: swap

.sp

.nf
void swap(basic_managed_windows_shared_memory & other);
.fi

.sp
Swaps the ownership of the managed mapped memories managed by *this and other\&. Never throws\&.
.RE


