.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS VARIABLES_MAP" 3 "" "" ""
.SH "NAME"
boost::program_options::variables_map
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/variables_map\&.hpp>


class variables_map : public boost::program_options::abstract_variables_map,
                      public std::map< std::string, variable_value >
{
public:
  // construct/copy/destruct
  variables_map();
  variables_map(const abstract_variables_map *);

  // public member functions
  const variable_value & operator[](const std::string &) const;
  void clear();
  void notify();

  // private member functions
  virtual const variable_value & get(const std::string &) const;

  // friend functions
  friend BOOST_PROGRAM_OPTIONS_DECL void 
  store(const basic_parsed_options< char > &, variables_map &, bool);
};
.fi
.SH "DESCRIPTION"
.PP
Concrete variables map which store variables in real map\&.
.PP
This class is derived from std::map<std::string, variable_value>, so you can use all map operators to examine its content\&.
.SS "variables_map public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
variables_map();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
variables_map(const abstract_variables_map * next);
.fi

.RE

.SS "variables_map public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
const variable_value & operator[](const std::string & name) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void clear();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void notify();
.fi

.RE

.SS "variables_map private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual const variable_value & get(const std::string & name) const;
.fi

.sp
Implementation of abstract_variables_map::get which does \'find\' in *this\&.
.RE

.SS "variables_map friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
friend BOOST_PROGRAM_OPTIONS_DECL void 
store(const basic_parsed_options< char > & options, variables_map & xm, 
      bool utf8);
.fi

.sp
Stores in \'m\' all options that are defined in \'options\'\&. If \'m\' already has a non\-defaulted value of an option, that value is not changed, even if \'options\' specify some value\&.
.RE


