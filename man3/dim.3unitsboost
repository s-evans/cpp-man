.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE DIM" 3 "" "" ""
.SH "NAME"
boost::units::dim \- Dimension tag/exponent pair for a single fundamental dimension\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/units/dim\&.hpp>

template<typename T, typename V> 
struct dim {
  // types
  typedef dim         type;      
  typedef \fIunspecified\fR tag;       
  typedef T           tag_type;  
  typedef V           value_type;
};
.fi
.SH "DESCRIPTION"
.PP
The dim class represents a single dimension tag/dimension exponent pair\&. That is,
dim<tag_type,value_type>
is a pair where
tag_type
represents the fundamental dimension being represented and
value_type
represents the exponent of that fundamental dimension as a
static_rational\&.
tag_type
must be a derived from a specialization of
base_dimension\&. Specialization of the following Boost\&.MPL metafunctions are provided \- @c mpl::plus for two @c dims \- @c mpl::minus for two @c dims \- @c mpl::negate for a @c dim
.PP
These metafunctions all operate on the exponent, and require that the
dim
operands have the same base dimension tag\&. In addition, multiplication and division by
static_rational
is supported\&. \- @c mpl::times for a @c static_rational and a @c dim in either order \- @c mpl::divides for a @c static_rational and a @c dim in either order
.PP
These metafunctions likewise operate on the exponent only\&.

