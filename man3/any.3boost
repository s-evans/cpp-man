.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS ANY" 3 "" "" ""
.SH "NAME"
boost::any \- A class whose instances can hold instances of any type that satisfies ValueType requirements\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/any\&.hpp>


class any {
public:
  // construct/copy/destruct
  any();
  any(const any &);
  any(any &&);
  template<typename ValueType> any(const ValueType &);
  template<typename ValueType> any(ValueType &&);
  any & operator=(const any &);
  any & operator=(any &&);
  template<typename ValueType> any & operator=(const ValueType &);
  template<typename ValueType> any & operator=(ValueType &&);
  ~any();

  // modifiers
  any & swap(any &);

  // queries
  bool empty() const;
  const std::type_info & type() const;
};
.fi
.SH "DESCRIPTION"
.SS "any public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
any();
.fi

.PP
Postconditions:
.RS 4
this\->empty()
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
any(const any & other);
.fi

.PP
Effects:
.RS 4
Copy constructor that copies content of
other
into new instance, so that any content is equivalent in both type and value to the content of
other, or empty if
other
is empty\&.
.RE
.PP
Throws:
.RS 4
May fail with a
std::bad_alloc
exception or any exceptions arising from the copy constructor of the contained type\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
any(any && other);
.fi

.PP
Effects:
.RS 4
Move constructor that moves content of
other
into new instance and leaves
other
empty\&.
.RE
.PP
Postconditions:
.RS 4
other\->empty()
.RE
.PP
Throws:
.RS 4
Nothing\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename ValueType> any(const ValueType & value);
.fi

.PP
Effects:
.RS 4
Makes a copy of
value, so that the initial content of the new instance is equivalent in both type and value to
value\&.
.RE
.PP
Throws:
.RS 4
std::bad_alloc
or any exceptions arising from the copy constructor of the contained type\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename ValueType> any(ValueType && value);
.fi

.PP
Effects:
.RS 4
Forwards
value, so that the initial content of the new instance is equivalent in both type and value to
value
before the forward\&.
.RE
.PP
Throws:
.RS 4
std::bad_alloc
or any exceptions arising from the copy constructor of the contained type\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
any & operator=(const any & rhs);
.fi

.PP
Effects:
.RS 4
Copies content of
rhs
into current instance, discarding previous content, so that the new content is equivalent in both type and value to the content of
rhs, or empty if
rhs\&.empty()\&.
.RE
.PP
Throws:
.RS 4
std::bad_alloc
or any exceptions arising from the copy constructor of the contained type\&. Assignment satisfies the strong guarantee of exception safety\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
any & operator=(any && rhs);
.fi

.PP
Effects:
.RS 4
Moves content of
rhs
into current instance, discarding previous content, so that the new content is equivalent in both type and value to the content of
rhs
before move, or empty if
rhs\&.empty()\&.
.RE
.PP
Postconditions:
.RS 4
rhs\->empty()
.RE
.PP
Throws:
.RS 4
Nothing\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
template<typename ValueType> any & operator=(const ValueType & rhs);
.fi

.PP
Effects:
.RS 4
Makes a copy of
rhs, discarding previous content, so that the new content of is equivalent in both type and value to
rhs\&.
.RE
.PP
Throws:
.RS 4
std::bad_alloc
or any exceptions arising from the copy constructor of the contained type\&. Assignment satisfies the strong guarantee of exception safety\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
template<typename ValueType> any & operator=(ValueType && rhs);
.fi

.PP
Effects:
.RS 4
Forwards
rhs, discarding previous content, so that the new content of is equivalent in both type and value to
rhs
before forward\&.
.RE
.PP
Throws:
.RS 4
std::bad_alloc
or any exceptions arising from the move or copy constructor of the contained type\&. Assignment satisfies the strong guarantee of exception safety\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
~any();
.fi

.PP
Effects:
.RS 4
Releases any and all resources used in management of instance\&.
.RE
.PP
Throws:
.RS 4
Nothing\&.
.RE
.RE

.SS "any modifiers"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
any & swap(any & rhs);
.fi

.PP
Effects:
.RS 4
Exchange of the contents of
*this
and
rhs\&.
.RE
.PP
Returns:
.RS 4
*this
.RE
.PP
Throws:
.RS 4
Nothing\&.
.RE
.RE

.SS "any queries"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
bool empty() const;
.fi

.PP
Returns:
.RS 4
true
if instance is empty, otherwise
false\&.
.RE
.PP
Throws:
.RS 4
Nothing\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
const std::type_info & type() const;
.fi

.PP
Returns:
.RS 4
the
typeid
of the contained value if instance is non\-empty, otherwise
typeid(void)\&.
.RE
.PP
Notes:
.RS 4
Useful for querying against types known either at compile time or only at runtime\&.
.RE
.RE


