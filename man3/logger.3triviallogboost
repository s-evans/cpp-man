.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT LOGGER" 3 "" "" ""
.SH "NAME"
boost::log::trivial::logger \- Trivial logger tag\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/trivial\&.hpp>


struct logger {
  // types
  typedef trivial::logger_type logger_type;  // Logger type\&. 

  // public static functions
  static logger_type & get();
};
.fi
.SH "DESCRIPTION"
.PP
This tag can be used to acquire the logger that is used with lrivial logging macros\&. This may be useful when the logger is used with other macros which require a logger\&.
.SS "logger public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static logger_type & get();
.fi

.sp
Returns a reference to the trivial logger instance
.RE


