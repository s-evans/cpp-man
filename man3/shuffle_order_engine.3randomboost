.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::random::shuffle_order_engine
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/shuffle_order\&.hpp>

template<typename UniformRandomNumberGenerator, std::size_t k> 
class shuffle_order_engine {
public:
  // types
  typedef UniformRandomNumberGenerator base_type;  
  typedef base_type::result_type       result_type;

  // construct/copy/destruct
  shuffle_order_engine();
  explicit shuffle_order_engine(result_type);
  template<typename SeedSeq> explicit shuffle_order_engine(SeedSeq &);
  explicit shuffle_order_engine(const base_type &);
  explicit shuffle_order_engine(base_type &&);
  template<typename It> shuffle_order_engine(It &, It);

  // public member functions
  void seed();
  void seed(result_type);
  template<typename SeedSeq> void seed(SeedSeq &);
  template<typename It> void seed(It &, It);
  const base_type & base() const;
  result_type operator()();
  void discard(boost::uintmax_t);
  template<typename Iter> void generate(Iter, Iter);

  // public static functions
  static result_type min();
  static result_type max();

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const shuffle_order_engine &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, 
               const shuffle_order_engine &);
  friend bool operator==(const shuffle_order_engine &, 
                         const shuffle_order_engine &);
  friend bool operator!=(const shuffle_order_engine &, 
                         const shuffle_order_engine &);

  // public data members
  static const bool has_fixed_range;
  static const std::size_t buffer_size;
  static const std::size_t table_size;
};
.fi
.SH "DESCRIPTION"
.PP
Instatiations of class template
shuffle_order_engine
model a
pseudo\-random number generator
\&. It mixes the output of some (usually
linear_congruential_engine)
uniform random number generator
to get better statistical properties\&. The algorithm is described in
.PP

.PP "Improving a poor random number generator", Carter Bays and S\&.D\&. Durham, ACM Transactions on Mathematical Software, Vol 2, No\&. 1, March 1976, pp\&. 59\-64\&. \m[blue]\fBhttp://doi\&.acm\&.org/10\&.1145/355666\&.355670\fR\m[]
.PP
The output of the base generator is buffered in an array of length k\&. Every output X(n) has a second role: It gives an index into the array where X(n+1) will be retrieved\&. Used array elements are replaced with fresh output from the base generator\&.
.PP
Template parameters are the base generator and the array length k, which should be around 100\&.
.SS "shuffle_order_engine public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
shuffle_order_engine();
.fi

.sp
Constructs a
shuffle_order_engine
by invoking the default constructor of the base generator\&.
.sp
Complexity: Exactly k+1 invocations of the base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit shuffle_order_engine(result_type s);
.fi

.sp
Constructs a
shuffle_output_engine
by invoking the one\-argument constructor of the base generator with the parameter seed\&.
.sp
Complexity: Exactly k+1 invocations of the base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeedSeq> explicit shuffle_order_engine(SeedSeq & seq);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
explicit shuffle_order_engine(const base_type & rng);
.fi

.sp
Constructs a
shuffle_output_engine
by using a copy of the provided generator\&.
.sp
Precondition: The template argument UniformRandomNumberGenerator shall denote a CopyConstructible type\&.
.sp
Complexity: Exactly k+1 invocations of the base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
explicit shuffle_order_engine(base_type && rng);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
template<typename It> shuffle_order_engine(It & first, It last);
.fi

.RE

.SS "shuffle_order_engine public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void seed();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void seed(result_type seed);
.fi

.sp
Invokes the one\-argument seed method of the base generator with the parameter seed and re\-initializes the internal buffer array\&.
.sp
Complexity: Exactly k+1 invocations of the base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeedSeq> void seed(SeedSeq & seq);
.fi

.sp
Invokes the one\-argument seed method of the base generator with the parameter seq and re\-initializes the internal buffer array\&.
.sp
Complexity: Exactly k+1 invocations of the base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename It> void seed(It & first, It last);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
const base_type & base() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
result_type operator()();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void discard(boost::uintmax_t z);
.fi

.sp
Advances the generator by z steps\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
template<typename Iter> void generate(Iter first, Iter last);
.fi

.sp
Fills a range with pseudo\-random values\&.
.RE

.SS "shuffle_order_engine public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static result_type min();
.fi

.sp
Returns the smallest value that the generator can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static result_type max();
.fi

.sp
Returns the largest value that the generator can produce\&.
.RE

.SS "shuffle_order_engine friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const shuffle_order_engine & s);
.fi

.sp
Writes a
shuffle_order_engine
to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const shuffle_order_engine & s);
.fi

.sp
Reads a
shuffle_order_engine
from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const shuffle_order_engine & x, 
                       const shuffle_order_engine & y);
.fi

.sp
Returns true if the two generators will produce identical sequences\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const shuffle_order_engine & lhs, 
                       const shuffle_order_engine & rhs);
.fi

.sp
Returns true if the two generators will produce different sequences\&.
.RE


