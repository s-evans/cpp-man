.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE A" 3 "" "" ""
.SH "NAME"
boost::mpi::allocator \- Standard Library\-compliant allocator for the MPI\-2 memory allocation routines\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/mpi/allocator\&.hpp>

template<typename T> 
class allocator {
public:
  // types
  typedef std::size_t    size_type;        // Holds the size of objects\&. 
  typedef std::ptrdiff_t difference_type;  // Holds the number of elements between two pointers\&. 
  typedef T *            pointer;          // A pointer to an object of type T\&. 
  typedef const T *      const_pointer;    // A pointer to a constant object of type T\&. 
  typedef T &            reference;        // A reference to an object of type T\&. 
  typedef const T &      const_reference;  // A reference to a constant object of type T\&. 
  typedef T              value_type;       // The type of memory allocated by this allocator\&. 

  // member classes/structs/unions

  // Retrieve the type of an allocator similar to this allocator but for a
  // different value type\&.
  template<typename U> 
  struct rebind {
    // types
    typedef allocator< U > other;
  };

  // construct/copy/destruct
  allocator();
  allocator(const allocator &);
  template<typename U> allocator(const allocator< U > &);
  ~allocator();

  // public member functions
  pointer address(reference) const;
  const_pointer address(const_reference) const;
  pointer allocate(size_type, allocator< void >::const_pointer = 0);
  void deallocate(pointer, size_type);
  size_type max_size() const;
  void construct(pointer, const T &);
  void destroy(pointer);
};
.fi
.SH "DESCRIPTION"
.PP
This allocator provides a standard C++ interface to the
MPI_Alloc_mem
and
MPI_Free_mem
routines of MPI\-2\&. It is intended to be used with the containers in the Standard Library (vector, in particular) in cases where the contents of the container will be directly transmitted via MPI\&. This allocator is also used internally by the library for character buffers that will be used in the transmission of data\&.
.PP
The
allocator
class template only provides MPI memory allocation when the underlying MPI implementation is either MPI\-2 compliant or is known to provide
MPI_Alloc_mem
and
MPI_Free_mem
as extensions\&. When the MPI memory allocation routines are not available,
allocator
is brought in directly from namespace
std, so that standard allocators are used throughout\&. The macro
BOOST_MPI_HAS_MEMORY_ALLOCATION
will be defined when the MPI\-2 memory allocation facilities are available\&.
.SS "allocator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
allocator();
.fi

.sp
Default\-construct an allocator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
allocator(const allocator &);
.fi

.sp
Copy\-construct an allocator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename U> allocator(const allocator< U > &);
.fi

.sp
Copy\-construct an allocator from another allocator for a different value type\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
~allocator();
.fi

.sp
Destroy an allocator\&.
.RE

.SS "allocator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
pointer address(reference x) const;
.fi

.sp
Returns the address of object
x\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
const_pointer address(const_reference x) const;
.fi

.sp
Returns the address of object
x\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
pointer allocate(size_type n, allocator< void >::const_pointer = 0);
.fi

.sp
Allocate enough memory for
n
elements of type
T\&.
.sp

.PP
Parameters:
.RS 4
.PP
n
.RS 4
The number of elements for which memory should be allocated\&.
.RE
.RE
.PP
Returns:
.RS 4
a pointer to the newly\-allocated memory
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
void deallocate(pointer p, size_type);
.fi

.sp
Deallocate memory referred to by the pointer
p\&.
.sp

.PP
Parameters:
.RS 4
.PP
p
.RS 4
The pointer whose memory should be deallocated\&. This pointer shall have been returned from the
allocate()
function and not have already been freed\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
size_type max_size() const;
.fi

.sp
Returns the maximum number of elements that can be allocated with
allocate()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void construct(pointer p, const T & val);
.fi

.sp
Construct a copy of
val
at the location referenced by
p\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void destroy(pointer p);
.fi

.sp
Destroy the object referenced by
p\&.
.RE

.SS "Specializations"

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Class allocator<void>
.RE

