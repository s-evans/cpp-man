.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE CO" 3 "" "" ""
.SH "NAME"
boost::log::attributes::constant \- A class of an attribute that holds a single constant value\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/constant\&.hpp>

template<typename T> 
class constant : public attribute {
public:
  // types
  typedef T value_type;  // Attribute value type\&. 

  // member classes/structs/unions

  // Factory implementation\&.

  class impl : public attribute_value_impl< value_type > {
  public:
    // construct/copy/destruct
    explicit impl(value_type const &);
    explicit impl(value_type &&);
  };

  // construct/copy/destruct
  explicit constant(value_type const &);
  explicit constant(value_type &&);
  explicit constant(cast_source const &);

  // public member functions
  value_type const & get() const;
};
.fi
.SH "DESCRIPTION"
.PP
The constant is a simplest and one of the most frequently used types of attributes\&. It stores a constant value, which it eventually returns as its value each time requested\&.
.SS "constant public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit constant(value_type const & value);
.fi

.sp
Constructor with the stored value initialization
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit constant(value_type && value);
.fi

.sp
Constructor with the stored value initialization
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
explicit constant(cast_source const & source);
.fi

.sp
Constructor for casting support
.RE

.SS "constant public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
value_type const & get() const;
.fi

.sp

.PP
Returns:
.RS 4
Reference to the contained value\&.
.RE
.RE


