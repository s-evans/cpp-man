.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS FILE_MAPPING" 3 "" "" ""
.SH "NAME"
boost::interprocess::file_mapping
.SH "SYNOPSIS"
.\" swap: Class file_mapping
.\" Class file_mapping: swap
.\" remove: Class file_mapping
.\" Class file_mapping: remove
.\" file_mapping: Class file_mapping
.\" Class file_mapping: file_mapping
.\" file_mapping: Class file_mapping
.\" Class file_mapping: file_mapping

.sp
.nf
// In header: <boost/interprocess/file_mapping\&.hpp>


class file_mapping {
public:
  // construct/copy/destruct
  file_mapping();
  file_mapping(const char *, mode_t);
  file_mapping(file_mapping &&);
  file_mapping & operator=(file_mapping &&);
  ~file_mapping();

  // public member functions
  void swap(file_mapping &);
  mode_t get_mode() const;
  mapping_handle_t get_mapping_handle() const;
  const char * get_name() const;

  // public static functions
  static bool remove(const char *);
};
.fi
.SH "DESCRIPTION"
.PP
A class that wraps a file\-mapping that can be used to create mapped regions from the mapped files
.SS "file_mapping public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
file_mapping();
.fi

.sp
Constructs an empty file mapping\&. Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
file_mapping(const char * filename, mode_t mode);
.fi

.sp
Opens a file mapping of file "filename", starting in offset "file_offset", and the mapping\'s size will be "size"\&. The mapping can be opened for read\-only "read_only" or read\-write "read_write" modes\&. Throws
interprocess_exception
on error\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
file_mapping(file_mapping && moved);
.fi

.sp
Moves the ownership of "moved"\'s file mapping object to *this\&. After the call, "moved" does not represent any file mapping object\&. Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
file_mapping & operator=(file_mapping && moved);
.fi

.sp
Moves the ownership of "moved"\'s file mapping to *this\&. After the call, "moved" does not represent any file mapping\&. Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
~file_mapping();
.fi

.sp
Destroys the file mapping\&. All mapped regions created from this are still valid\&. Does not throw
.RE

.SS "file_mapping public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" swap: Class file_mapping
.\" Class file_mapping: swap

.sp

.nf
void swap(file_mapping & other);
.fi

.sp
Swaps to file_mappings\&. Does not throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
mode_t get_mode() const;
.fi

.sp
Returns access mode used in the constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
mapping_handle_t get_mapping_handle() const;
.fi

.sp
Obtains the mapping handle to be used with
mapped_region
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
const char * get_name() const;
.fi

.sp
Returns the name of the file used in the constructor\&.
.RE

.SS "file_mapping public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" remove: Class file_mapping
.\" Class file_mapping: remove

.sp

.nf
static bool remove(const char * filename);
.fi

.sp
Removes the file named "filename" even if it\'s been memory mapped\&. Returns true on success\&. The function might fail in some operating systems if the file is being used other processes and no deletion permission was shared\&.
.RE


