.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT _DATA" 3 "" "" ""
.SH "NAME"
boost::proto::_data \- A PrimitiveTransform that returns the current data unmodified\&. If the data (third) parameter is a transform environment, it returns the value associated with the proto::data_type key\&. Otherwise, it returns the data parameter unmodified\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/arg\&.hpp>


struct _data :  proto::transform< _data > {
  // member classes/structs/unions
  template<typename Expr, typename State, typename Data> 
  struct impl :  
    mpl::if_c<
      proto::is_env<Data>::value,
      proto::_env_var<proto::data_type>,
      proto::_env
    >::type::template impl<Expr, State, Data>
  {
  };
};
.fi
.SH "DESCRIPTION"
.PP
If the data (third) parameter is a transform environment, it returns the value associated with the
proto::data_type
key\&. Otherwise, it returns the data parameter unmodified\&.
.PP

\fBExample:\fR

.sp
.if n \{\
.RS 4
.\}
.nf
proto::terminal<int>::type i = {42};
std::string str("hello");
std::string & d1 = proto::_data()(i, \'a\', str);
assert( &str == &d1 );

std::string & d2 = proto::_data()(i, \'a\', (proto::data = boost::ref(str)));
assert( &str == &d2 );
.fi
.if n \{\
.RE
.\}
.sp


