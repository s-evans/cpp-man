.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS WINDOWS_S" 3 "" "" ""
.SH "NAME"
boost::interprocess::windows_shared_memory
.SH "SYNOPSIS"
.\" windows_shared_memory: Class windows_shared_memory
.\" Class windows_shared_memory: windows_shared_memory
.\" swap: Class windows_shared_memory
.\" Class windows_shared_memory: swap

.sp
.nf
// In header: <boost/interprocess/windows_shared_memory\&.hpp>


class windows_shared_memory {
public:
  // construct/copy/destruct
  windows_shared_memory();
  windows_shared_memory(create_only_t, const char *, mode_t, std::size_t, 
                        const permissions & = permissions());
  windows_shared_memory(open_or_create_t, const char *, mode_t, std::size_t, 
                        const permissions & = permissions());
  windows_shared_memory(open_only_t, const char *, mode_t);
  windows_shared_memory(windows_shared_memory &&);
  windows_shared_memory & operator=(windows_shared_memory &&);
  ~windows_shared_memory();

  // public member functions
  void swap(windows_shared_memory &);
  const char * get_name() const;
  mode_t get_mode() const;
  mapping_handle_t get_mapping_handle() const;
  offset_t get_size() const;
};
.fi
.SH "DESCRIPTION"
.PP
A class that wraps the native Windows shared memory that is implemented as a file mapping of the paging file\&. Unlike
shared_memory_object,
windows_shared_memory
has no kernel persistence and the shared memory is destroyed when all processes destroy all their
windows_shared_memory
objects and mapped regions for the same shared memory or the processes end/crash\&.
.PP
Warning: Windows native shared memory and interprocess portable shared memory (boost::interprocess::shared_memory_object) can\'t communicate between them\&.
.SS "windows_shared_memory public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
windows_shared_memory();
.fi

.sp
Default constructor\&. Represents an empty
windows_shared_memory\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
windows_shared_memory(create_only_t, const char * name, mode_t mode, 
                      std::size_t size, 
                      const permissions & perm = permissions());
.fi

.sp
Creates a new native shared memory with name "name" and at least size "size", with the access mode "mode"\&. If the file previously exists, throws an error\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
windows_shared_memory(open_or_create_t, const char * name, mode_t mode, 
                      std::size_t size, 
                      const permissions & perm = permissions());
.fi

.sp
Tries to create a shared memory object with name "name" and at least size "size", with the access mode "mode"\&. If the file previously exists, it tries to open it with mode "mode"\&. Otherwise throws an error\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
windows_shared_memory(open_only_t, const char * name, mode_t mode);
.fi

.sp
Tries to open a shared memory object with name "name", with the access mode "mode"\&. If the file does not previously exist, it throws an error\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
windows_shared_memory(windows_shared_memory && moved);
.fi

.sp
Moves the ownership of "moved"\'s shared memory object to *this\&. After the call, "moved" does not represent any shared memory object\&. Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
windows_shared_memory & operator=(windows_shared_memory && moved);
.fi

.sp
Moves the ownership of "moved"\'s shared memory to *this\&. After the call, "moved" does not represent any shared memory\&. Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
~windows_shared_memory();
.fi

.sp
Destroys *this\&. All mapped regions are still valid after destruction\&. When all mapped regions and
windows_shared_memory
objects referring the shared memory are destroyed, the operating system will destroy the shared memory\&.
.RE

.SS "windows_shared_memory public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" swap: Class windows_shared_memory
.\" Class windows_shared_memory: swap

.sp

.nf
void swap(windows_shared_memory & other);
.fi

Swaps to shared_memory_objects\&. Does not throw\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
const char * get_name() const;
.fi

Returns the name of the shared memory\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
mode_t get_mode() const;
.fi

Returns access mode\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
mapping_handle_t get_mapping_handle() const;
.fi

Returns the mapping handle\&. Never throws\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
offset_t get_size() const;
.fi

.sp
Returns the size of the windows shared memory\&. It will be a 4K rounded size of the "size" passed in the constructor\&.
.RE


