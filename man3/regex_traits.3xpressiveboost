.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::xpressive::regex_traits
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_traits\&.hpp>

template<typename Char, typename Impl> 
struct regex_traits : public Impl {
  // types
  typedef Impl::locale_type locale_type;

  // construct/copy/destruct
  regex_traits();
  explicit regex_traits(locale_type const &);
};
.fi
.SH "DESCRIPTION"
.PP
Thin wrapper around the default
regex_traits
implementation, either
cpp_regex_traits
or
c_regex_traits
.SS "regex_traits public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
regex_traits();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit regex_traits(locale_type const & loc);
.fi

.RE


