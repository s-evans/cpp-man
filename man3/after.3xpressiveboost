.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::xpressive::after \- Look\-behind assertion\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_primitives\&.hpp>


template<typename Expr> \fIunspecified\fR after(Expr const & expr);
.fi
.SH "DESCRIPTION"
.PP
after(expr) succeeds if the expr sub\-expression would match at the current position minus N in the sequence, where N is the width of expr\&. expr is not included in the match\&. For instance, after("foo") succeeds if we are after a "foo"\&. Look\-behind assertions can be negated with the bit\-complement operator\&.
.PP
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
after(expr) is equivalent to the perl (?<=\&.\&.\&.) extension\&. ~after(expr) is a negative look\-behind assertion, equivalent to the perl (?<!\&.\&.\&.) extension\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
expr
.RS 4
The sub\-expression to put in the look\-ahead assertion\&.
.RE
.RE
.PP
Requires:
.RS 4
expr cannot match a variable number of characters\&.
.RE

