.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::proto::domain::as_child \- A callable unary MonomorphicFunctionObject that specifies how objects are turned into Proto expressions in this domain, for use in scenarios where the resulting expression is intended to be made a child of another expression\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/domain\&.hpp>



// A callable unary MonomorphicFunctionObject that specifies how objects are
// turned into Proto expressions in this domain, for use in scenarios where
// the resulting expression is intended to be made a child of another
// expression\&.
template<typename T> 
struct as_child :  proto::callable {
  // types
  typedef \fIsee\fR\fI\-\fR\fIbelow\fR result_type;

  // public member functions
  result_type operator()(T &) const;
};
.fi
.SH "DESCRIPTION"
.PP
A unary MonomorphicFunctionObject that specifies how objects are turned into Proto expressions in this domain\&. The resulting expression object is suitable for storage as a child of another expression\&. In that scenario, it is usually preferable to store child expressions by reference; or, in the case of objects that are not yet Proto expressions, to wrap them by reference in a new Proto terminal expression\&. (Contrast this description with the description for
proto::domain::as_expr\&.)
.PP
The
as_child
function object turns objects into Proto expressions, if they are not already, by making them Proto terminals held by reference\&. Objects that are already Proto expressions are simply returned by reference\&. If
wants_basic_expr<Generator>::value
is true, then let
\fIE\fR
be
proto::basic_expr; otherwise, let
\fIE\fR
be
proto::expr\&. Given an lvalue
t
of type
T:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

                  If T is not a Proto expression type, the resulting
                  terminal is
                  Generator()(\fIE\fR<tag::terminal, 
                  term< T & > >::make(t))\&.
                .RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

                  Otherwise, the result is the lvalue t\&.
                .RE
.sp
.RE

.SS "as_child public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()(T & t) const;
.fi

.PP
Parameters:
.RS 4
.PP
t
.RS 4
The object to wrap\&.
.RE
.RE
.RE


