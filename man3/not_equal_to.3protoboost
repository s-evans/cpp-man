.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::proto::not_equal_to \- A metafunction for generating not\-equal\-to expression types, a grammar element for matching not\-equal\-to expressions, and a PrimitiveTransform that dispatches to the proto::pass_through<> transform\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/traits\&.hpp>

template<typename T, typename U> 
struct not_equal_to :  proto::transform< not_equal_to<T, U> > {
  // types
  typedef proto::expr< proto::tag::not_equal_to, proto::list2< T, U > >       type;         
  typedef proto::basic_expr< proto::tag::not_equal_to, proto::list2< T, U > > proto_grammar;

  // member classes/structs/unions
  template<typename Expr, typename State, typename Data> 
  struct impl :
     proto::pass_through<mot_equal_to>::template impl<Expr, State, Data>
  {
  };
};
.fi
.SH "DESCRIPTION"

