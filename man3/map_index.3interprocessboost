.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE M" 3 "" "" ""
.SH "NAME"
boost::interprocess::map_index
.SH "SYNOPSIS"
.\" shrink_to_fit: Class template map_index
.\" Class template map_index: shrink_to_fit
.\" reserve: Class template map_index
.\" Class template map_index: reserve

.sp
.nf
// In header: <boost/interprocess/indexes/map_index\&.hpp>

template<typename MapConfig> 
class map_index : public boost::container::map< MapConfig > {
public:
  // construct/copy/destruct
  map_index(segment_manager_base *);

  // public member functions
  void reserve(typename segment_manager_base::size_type);
  void shrink_to_fit();
};
.fi
.SH "DESCRIPTION"
.PP
Index type based in boost::interprocess::map\&. Just derives from boost::interprocess::map and defines the interface needed by managed memory segments
.SS "map_index public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
map_index(segment_manager_base * segment_mngr);
.fi

.sp
Constructor\&. Takes a pointer to the segment manager\&. Can throw
.RE

.SS "map_index public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" reserve: Class template map_index
.\" Class template map_index: reserve

.sp

.nf
void reserve(typename segment_manager_base::size_type);
.fi

.sp
This reserves memory to optimize the insertion of n elements in the index
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" shrink_to_fit: Class template map_index
.\" Class template map_index: shrink_to_fit

.sp

.nf
void shrink_to_fit();
.fi

.sp
This tries to free previously allocate unused memory\&.
.RE


