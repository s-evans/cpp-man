.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::log::expressions::wrapped_formatter_actor
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/expressions/formatters/wrap_formatter\&.hpp>

template<typename FunT, typename CharT, 
         template< typename > class ActorT = phoenix::actor> 
class wrapped_formatter_actor :
  public ActorT< wrapped_formatter_terminal< FunT, CharT > >
{
public:
  // types
  typedef CharT                                                  char_type;      // Character type\&. 
  typedef FunT                                                   function_type;  // Wrapped function type\&. 
  typedef wrapped_formatter_terminal< function_type, char_type > terminal_type;  // Base terminal type\&. 
  typedef ActorT< terminal_type >                                base_type;      // Base actor type\&. 

  // construct/copy/destruct
  explicit wrapped_formatter_actor(base_type const &);

  // public member functions
  function_type const & get_function() const;
};
.fi
.SH "DESCRIPTION"
.PP
Wrapped formatter function actor\&.
.SS "wrapped_formatter_actor public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit wrapped_formatter_actor(base_type const & act);
.fi

Initializing constructor\&. .RE

.SS "wrapped_formatter_actor public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
function_type const & get_function() const;
.fi

.sp

.PP
Returns:
.RS 4
The wrapped function
.RE
.RE


