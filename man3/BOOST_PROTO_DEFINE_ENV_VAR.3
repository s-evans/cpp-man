.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MACRO BOOST_" 3 "" "" ""
.SH "NAME"
BOOST_PROTO_DEFINE_ENV_VAR \- Define a type and a global variable of that type that can be used to initialize a slot in a Proto transform environment\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/env\&.hpp>

BOOST_PROTO_DEFINE_ENV_VAR(Type, Name)
.fi
.SH "DESCRIPTION"
.PP
Proto primitive transforms can optionally accept an environment in their third parameter which is a key/value store of environment variables\&. Use the
BOOST_PROTO_DEFINE_ENV_VAR()
macro to define the keys\&.
.PP
See the description for
proto::data_type
for an example of the class interface created by this macro\&.
.PP

\fBExample:\fR
.PP


.sp
.if n \{\
.RS 4
.\}
.nf
BOOST_PROTO_DEFINE_ENV_VAR(mykey_type, mykey);

struct FetchMyKey
  : proto::when< _, proto::_env_var<mykey_type> >
{};

int main()
{
    proto::terminal<int>::type i = {42};
    char const * sz = FetchMyKey()(i, 0, (mykey = "hello!"));
    assert(0 == std::strcmp(sz, "hello!");
}
.fi
.if n \{\
.RE
.\}
.sp


