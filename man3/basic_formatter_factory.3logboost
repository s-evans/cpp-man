.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::log::basic_formatter_factory
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/setup/formatter_parser\&.hpp>

template<typename CharT, typename AttributeValueT> 
class basic_formatter_factory : public boost::log::formatter_factory< CharT > {
public:
  // types
  typedef AttributeValueT           value_type;      // Attribute value type\&. 
  typedef base_type::formatter_type formatter_type;
  typedef base_type::args_map       args_map;      

  // public member functions
  virtual formatter_type 
  create_formatter(attribute_name const &, args_map const &);
};
.fi
.SH "DESCRIPTION"
.PP
Base class for formatter factories\&. This class provides default implementation of formatter expressions for types supporting stream output\&. The factory does not take into account any additional parameters that may be specified\&.
.SS "basic_formatter_factory public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual formatter_type 
create_formatter(attribute_name const & name, args_map const & args);
.fi

.sp
The function creates a formatter for the specified attribute\&.
.sp

.PP
Parameters:
.RS 4
.PP
args
.RS 4
Formatter arguments
.RE
.PP
name
.RS 4
Attribute name
.RE
.RE
.RE


