.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS SCOPED_CONN" 3 "" "" ""
.SH "NAME"
boost::signals2::scoped_connection \- Limits a signal\-slot connection lifetime to a particular scope\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/signals2/connection\&.hpp>


class scoped_connection : public connection {
public:
  // construct/copy/destruct
  scoped_connection();
  scoped_connection(const connection&);
  scoped_connection(scoped_connection&&);
  scoped_connection(connection&&);
  scoped_connection& operator=(const connection&);
  scoped_connection& operator=(scoped_connection&&);
  scoped_connection& operator=(connection&&);
  ~scoped_connection();

  // public methods
  connection release();
private:
  // construct/copy/destruct
  scoped_connection(const scoped_connection&);
  scoped_connection& operator=(const scoped_connection&);
};
.fi
.SH "DESCRIPTION"
.PP
A
connection
which automatically disconnects on destruction\&.
Thread Safety.PP
The methods of the
scoped_connection
class (including those inherited from its base
connection
class) are thread\-safe with the exception of
signals2::connection::swap,
release, and the assignment operator\&. A
scoped_connection
object should not be accessed concurrently when any of these operations is in progress\&. However, it is always safe to access a different
connection
object in another thread, even if it references the same underlying signal\-slot connection\&.
.SS "scoped_connection public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
scoped_connection();
.fi

.sp
Default constructs an empty scoped_connection\&.
.PP
Postconditions:
.RS 4
connected() == false
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
scoped_connection(const connection& other);
.fi

.PP
Effects:
.RS 4
this
references the connection referenced by
other\&.
.RE
.PP
Postconditions:
.RS 4
connected() == other\&.connected()
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
scoped_connection(scoped_connection&& other);
.fi

.sp
Move constructor\&.
.PP
Effects:
.RS 4
this
references the connection formerly referenced by
other\&. The moved\-from
other
no longer references any connection\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
scoped_connection(connection&& other);
.fi

.sp
Move constructor\&.
.PP
Effects:
.RS 4
this
references the connection formerly referenced by
other\&. The moved\-from
other
no longer references any connection\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
scoped_connection& operator=(const connection& rhs);
.fi

.sp
Copy assignment from unscoped connection\&.
.PP
Effects:
.RS 4
this
references the connection referenced by
rhs\&. If
this
already references another connection, the old connection will be disconnected first\&.
.RE
.PP
Postconditions:
.RS 4
connected() == other\&.connected()
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
scoped_connection& operator=(scoped_connection&& rhs);
.fi

.sp
Move assignment\&.
.PP
Effects:
.RS 4
this
references the connection formerly referenced by
rhs\&. The moved\-from
rhs
no longer references any connection\&. If
this
already references another connection, the old connection will be disconnected first\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
scoped_connection& operator=(connection&& rhs);
.fi

.sp
Move assignment\&.
.PP
Effects:
.RS 4
this
references the connection formerly referenced by
rhs\&. The moved\-from
rhs
no longer references any connection\&. If
this
already references another connection, the old connection will be disconnected first\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
~scoped_connection();
.fi

.PP
Effects:
.RS 4
If
this\->connected(), disconnects the signal\-slot connection\&.
.RE
.RE

.SS "scoped_connection public methods"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
connection release();
.fi

.PP
Effects:
.RS 4
Releases the connection so it will not be disconnected by the
scoped_connection
when it is destroyed or reassigned\&. The
scoped_connection
is reset to the NULL connection after this call completes\&.
.RE
.PP
Postconditions:
.RS 4
connected() == false
.RE
.PP
Returns:
.RS 4
A
connection
object referencing the connection which was released by the
scoped_connection\&.
.RE
.RE

.SS "scoped_connection private construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
scoped_connection(const scoped_connection& other);
.fi

.sp
The scoped_connection class is not copyable\&. It may only be copy constructed from an unscoped
connection
object\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
scoped_connection& operator=(const scoped_connection& rhs);
.fi

.sp
The scoped_connection class is not copyable\&. It may only be copy assigned from an unscoped
connection
object\&.
.RE


