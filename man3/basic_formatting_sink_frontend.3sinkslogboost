.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS " 3 "" "" ""
.SH "NAME"
boost::log::sinks::basic_formatting_sink_frontend \- A base class for a logging sink frontend with formatting support\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/basic_sink_frontend\&.hpp>

template<typename CharT> 
class basic_formatting_sink_frontend : public basic_sink_frontend {
public:
  // types
  typedef CharT                          char_type;       // Character type\&. 
  typedef std::basic_string< char_type > string_type;     // Formatted string type\&. 
  typedef basic_formatter< char_type >   formatter_type;  // Formatter function object type\&. 
  typedef formatter_type::stream_type    stream_type;     // Output stream type\&. 

  // member classes/structs/unions

  struct formatting_context {
    // construct/copy/destruct
    formatting_context();
    formatting_context(unsigned int, std::locale const &, 
                       formatter_type const &);

    // public data members
    const unsigned int m_Version;    // Object version\&. 
    string_type m_FormattedRecord;    // Formatted log record storage\&. 
    stream_type m_FormattingStream;    // Formatting stream\&. 
    formatter_type m_Formatter;    // Formatter functor\&. 
  };

  // construct/copy/destruct
  explicit basic_formatting_sink_frontend(bool);

  // public member functions
  template<typename FunT> void set_formatter(FunT const &);
  void reset_formatter();
  std::locale getloc() const;
  void imbue(std::locale const &);

  // protected member functions
  formatter_type & formatter();
  template<typename BackendMutexT, typename BackendT> 
    void feed_record(record_view const &, BackendMutexT &, BackendT &);
  template<typename BackendMutexT, typename BackendT> 
    bool try_feed_record(record_view const &, BackendMutexT &, BackendT &);
};
.fi
.SH "DESCRIPTION"
.SS "basic_formatting_sink_frontend public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit basic_formatting_sink_frontend(bool cross_thread);
.fi

.sp
Initializing constructor\&. 
.PP
Parameters:
.RS 4
.PP
cross_thread
.RS 4
The flag indicates whether the sink passes log records between different threads
.RE
.RE
.RE

.SS "basic_formatting_sink_frontend public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename FunT> void set_formatter(FunT const & formatter);
.fi

.sp
The method sets sink\-specific formatter function object
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void reset_formatter();
.fi

.sp
The method resets the formatter
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
std::locale getloc() const;
.fi

.sp
The method returns the current locale used for formatting
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
void imbue(std::locale const & loc);
.fi

.sp
The method sets the locale used for formatting
.RE

.SS "basic_formatting_sink_frontend protected member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
formatter_type & formatter();
.fi

Returns reference to the formatter\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename BackendMutexT, typename BackendT> 
  void feed_record(record_view const & rec, BackendMutexT & backend_mutex, 
                   BackendT & backend);
.fi

Feeds log record to the backend\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename BackendMutexT, typename BackendT> 
  bool try_feed_record(record_view const & rec, BackendMutexT & backend_mutex, 
                       BackendT & backend);
.fi

Attempts to feeds log record to the backend, does not block if \fIbackend_mutex\fR is locked\&. .RE


