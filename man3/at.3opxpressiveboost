.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT AT" 3 "" "" ""
.SH "NAME"
boost::xpressive::op::at \- at is a PolymorphicFunctionObject for indexing into a sequence
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_actions\&.hpp>


struct at {
  // member classes/structs/unions
  template<typename Sig> 
  struct result {
  };
  template<typename This, typename Cont, typename Idx> 
  struct result<This(Cont &, Idx)> {
    // types
    typedef Cont::reference type;
  };
  template<typename This, typename Cont, typename Idx> 
  struct result<This(Cont const &, Idx)> {
    // types
    typedef Cont::const_reference type;
  };
  template<typename This, typename Cont, typename Idx> 
  struct result<This(Cont, Idx)> {
    // types
    typedef Cont::const_reference type;
  };

  // public member functions
  template<typename Cont, typename Idx> 
    Cont::reference operator()(Cont &, Idx) const;
  template<typename Cont, typename Idx> 
    Cont::const_reference operator()(Cont const &, Idx) const;
};
.fi
.SH "DESCRIPTION"
.SS "at public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Cont, typename Idx> 
  Cont::reference operator()(Cont & c, Idx idx) const;
.fi

.sp

.PP
Parameters:
.RS 4
.PP
c
.RS 4
The RandomAccessSequence to index into
.RE
.PP
idx
.RS 4
The index
.RE
.RE
.PP
Requires:
.RS 4
Cont
is a model of RandomAccessSequence
.RE
.PP
Returns:
.RS 4
c[idx]
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename Cont, typename Idx> 
  Cont::const_reference operator()(Cont const & c, Idx idx) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


