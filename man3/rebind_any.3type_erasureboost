.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::type_erasure::rebind_any
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_erasure/rebind_any\&.hpp>

template<typename Any, typename T> 
struct rebind_any {
  // types
  typedef \fIunspecified\fR type;
};
.fi
.SH "DESCRIPTION"
.PP
A metafunction that changes the
placeholder
of an any\&. If
T
is not a placeholder, returns
T
unchanged\&. This class is intended to be used in
concept_interface
to deduce the argument types from the arguments of the concept\&.
.PP


.sp
.if n \{\
.RS 4
.\}
.nf
rebind_any<any<Concept>, _a>::type \-> any<Concept, _a>
rebind_any<any<Concept>, _b&>::type \-> any<Concept, _b&>
rebind_any<any<Concept>, int>::type \-> int

.fi
.if n \{\
.RE
.\}

.PP
.PP \fBSee Also:\fR.PP derived, as_param

