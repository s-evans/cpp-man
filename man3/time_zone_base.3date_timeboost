.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::date_time::time_zone_base \- Interface class for dynamic time zones\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/time_zone_base\&.hpp>

template<typename time_type, typename CharT> 
class time_zone_base {
public:
  // types
  typedef CharT                             char_type;         
  typedef std::basic_string< CharT >        string_type;       
  typedef std::basic_ostringstream< CharT > stringstream_type; 
  typedef time_type::date_type::year_type   year_type;         
  typedef time_type::time_duration_type     time_duration_type;

  // construct/copy/destruct
  time_zone_base();
  ~time_zone_base();

  // public member functions
  virtual string_type dst_zone_abbrev() const = 0;
  virtual string_type std_zone_abbrev() const = 0;
  virtual string_type dst_zone_name() const = 0;
  virtual string_type std_zone_name() const = 0;
  virtual bool has_dst() const = 0;
  virtual time_type dst_local_start_time(year_type) const = 0;
  virtual time_type dst_local_end_time(year_type) const = 0;
  virtual time_duration_type base_utc_offset() const = 0;
  virtual time_duration_type dst_offset() const = 0;
  virtual string_type to_posix_string() const = 0;
};
.fi
.SH "DESCRIPTION"
.PP
This class represents the base interface for all timezone representations\&. Subclasses may provide different systems for identifying a particular zone\&. For example some may provide a geographical based zone construction while others may specify the offset from GMT\&. Another possible implementation would be to convert from POSIX timezone strings\&. Regardless of the construction technique, this is the interface that these time zone types must provide\&.
.PP
Note that this class is intended to be used as a shared resource (hence the derivation from boost::counted_base\&.
.SS "time_zone_base public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
time_zone_base();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~time_zone_base();
.fi

.RE

.SS "time_zone_base public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual string_type dst_zone_abbrev() const = 0;
.fi

String for the timezone when in daylight savings (eg: EDT) .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
virtual string_type std_zone_abbrev() const = 0;
.fi

String for the zone when not in daylight savings (eg: EST) .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
virtual string_type dst_zone_name() const = 0;
.fi

String for the timezone when in daylight savings (eg: Eastern Daylight Time) .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
virtual string_type std_zone_name() const = 0;
.fi

String for the zone when not in daylight savings (eg: Eastern Standard Time) .RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
virtual bool has_dst() const = 0;
.fi

True if zone uses daylight savings adjustments otherwise false\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
virtual time_type dst_local_start_time(year_type y) const = 0;
.fi

Local time that DST starts <ndash></ndash> undefined if has_dst is false\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
virtual time_type dst_local_end_time(year_type y) const = 0;
.fi

Local time that DST ends <ndash></ndash> undefined if has_dst is false\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
virtual time_duration_type base_utc_offset() const = 0;
.fi

Base offset from UTC for zone (eg: \-07:30:00) .RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
virtual time_duration_type dst_offset() const = 0;
.fi

Adjustment forward or back made while DST is in effect\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
virtual string_type to_posix_string() const = 0;
.fi

Returns a POSIX time_zone string for this object\&. .RE


