.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLA" 3 "" "" ""
.SH "NAME"
boost::xpressive::regex_compiler \- Class template regex_compiler is a factory for building basic_regex objects from a string\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_compiler\&.hpp>

template<typename BidiIter, typename RegexTraits, typename CompilerTraits> 
struct regex_compiler {
  // types
  typedef BidiIter                            iterator_type;  
  typedef iterator_value< BidiIter >::type    char_type;      
  typedef regex_constants::syntax_option_type flag_type;      
  typedef RegexTraits                         traits_type;    
  typedef traits_type::string_type            string_type;    
  typedef traits_type::locale_type            locale_type;    
  typedef traits_type::char_class_type        char_class_type;

  // construct/copy/destruct
  explicit regex_compiler(RegexTraits const & = RegexTraits());

  // public member functions
  locale_type imbue(locale_type);
  locale_type getloc() const;
  template<typename InputIter> 
    basic_regex< BidiIter > 
    compile(InputIter, InputIter, flag_type = regex_constants::ECMAScript);
  template<typename InputRange> 
    disable_if< is_pointer< InputRange >, basic_regex< BidiIter > >::type 
    compile(InputRange const &, flag_type = regex_constants::ECMAScript);
  basic_regex< BidiIter > 
  compile(char_type const *, flag_type = regex_constants::ECMAScript);
  basic_regex< BidiIter > compile(char_type const *, std::size_t, flag_type);
  basic_regex< BidiIter > & operator[](string_type const &);
  basic_regex< BidiIter > const & operator[](string_type const &) const;

  // private member functions
  bool is_upper_(char_type) const;
};
.fi
.SH "DESCRIPTION"
.PP
Class template
regex_compiler
is used to construct a
basic_regex
object from a string\&. The string should contain a valid regular expression\&. You can imbue a
regex_compiler
object with a locale, after which all
basic_regex
objects created with that
regex_compiler
object will use that locale\&. After creating a
regex_compiler
object, and optionally imbueing it with a locale, you can call the compile() method to construct a
basic_regex
object, passing it the string representing the regular expression\&. You can call compile() multiple times on the same
regex_compiler
object\&. Two
basic_regex
objects compiled from the same string will have different regex_id\'s\&.
.SS "regex_compiler public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit regex_compiler(RegexTraits const & traits = RegexTraits());
.fi

.RE

.SS "regex_compiler public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
locale_type imbue(locale_type loc);
.fi

.sp
Specify the locale to be used by a
regex_compiler\&.
.sp

.PP
Parameters:
.RS 4
.PP
loc
.RS 4
The locale that this
regex_compiler
should use\&.
.RE
.RE
.PP
Returns:
.RS 4
The previous locale\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
locale_type getloc() const;
.fi

.sp
Get the locale used by a
regex_compiler\&.
.sp

.PP
Returns:
.RS 4
The locale used by this
regex_compiler\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename InputIter> 
  basic_regex< BidiIter > 
  compile(InputIter begin, InputIter end, 
          flag_type flags = regex_constants::ECMAScript);
.fi

.sp
Builds a
basic_regex
object from a range of characters\&.
.sp

.PP
Parameters:
.RS 4
.PP
begin
.RS 4
The beginning of a range of characters representing the regular expression to compile\&.
.RE
.PP
end
.RS 4
The end of a range of characters representing the regular expression to compile\&.
.RE
.PP
flags
.RS 4
Optional bitmask that determines how the pat string is interpreted\&. (See syntax_option_type\&.)
.RE
.RE
.PP
Requires:
.RS 4
InputIter is a model of the InputIterator concept\&.
.RE
.PP
Requires:
.RS 4
[begin,end) is a valid range\&.
.RE
.PP
Requires:
.RS 4
The range of characters specified by [begin,end) contains a valid string\-based representation of a regular expression\&.
.RE
.PP
Returns:
.RS 4
A
basic_regex
object corresponding to the regular expression represented by the character range\&.
.RE
.PP
Throws:
.RS 4
regex_error
when the range of characters has invalid regular expression syntax\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename InputRange> 
  disable_if< is_pointer< InputRange >, basic_regex< BidiIter > >::type 
  compile(InputRange const & pat, 
          flag_type flags = regex_constants::ECMAScript);
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
basic_regex< BidiIter > 
compile(char_type const * begin, 
        flag_type flags = regex_constants::ECMAScript);
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
basic_regex< BidiIter > 
compile(char_type const * begin, std::size_t size, flag_type flags);
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
basic_regex< BidiIter > & operator[](string_type const & name);
.fi

.sp
Return a reference to the named regular expression\&. If no such named regular expression exists, create a new regular expression and return a reference to it\&.
.sp

.PP
Parameters:
.RS 4
.PP
name
.RS 4
A std::string containing the name of the regular expression\&.
.RE
.RE
.PP
Requires:
.RS 4
The string is not empty\&.
.RE
.PP
Throws:
.RS 4
bad_alloc on allocation failure\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
basic_regex< BidiIter > const & operator[](string_type const & name) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE

.SS "regex_compiler private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
bool is_upper_(char_type ch) const;
.fi

.RE


