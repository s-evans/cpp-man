.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTI" 3 "" "" ""
.SH "NAME"
boost::log::register_formatter_factory \- The function registers a user\-defined formatter factory\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/setup/formatter_parser\&.hpp>


template<typename FactoryT> 
  enable_if< is_base_and_derived< formatter_factory< typename FactoryT::char_type >, FactoryT >>::type 
  register_formatter_factory(attribute_name const & attr_name, 
                             shared_ptr< FactoryT > const & factory);
.fi
.SH "DESCRIPTION"
.PP
The function registers a user\-defined formatter factory\&. The registered factory function will be called when the formatter parser detects the specified attribute name in the formatter string\&.
.PP

.PP
Parameters:
.RS 4
.PP
attr_name
.RS 4
Attribute name
.RE
.PP
factory
.RS 4
Pointer to the formatter factory
.RE
.RE
.PP
Requires:
.RS 4
!!attr_name && !!factory\&.
.RE

