.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE IM" 3 "" "" ""
.SH "NAME"
boost::proto::call::impl
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/call\&.hpp>


template<typename Expr, typename State, typename Data> 
struct impl :  proto::transform_impl<Expr, State, Data> {
  // types
  typedef \fIsee\fR\fI\-\fR\fIbelow\fR result_type;

  // public member functions
  result_type operator()(typename impl::expr_param, 
                         typename impl::state_param, 
                         typename impl::data_param) const;
};
.fi
.SH "DESCRIPTION"
.SS "impl public types"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

typedef
\fIsee\fR\fI\-\fR\fIbelow\fR
result_type;
.sp
In the description that follows, a type
T
is determined to model the
PrimitiveTransform
concept if
proto::is_transform<T>::value
is
true\&.
.sp

proto::call<T>::impl<Expr,State,Data>::result_type
is computed as follows:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
if of the form
PrimitiveTransform
or
PrimitiveTransform(), then
result_type
is:

.sp
.if n \{\
.RS 4
.\}
.nf
typename boost::result_of<PrimitiveTransform(Expr, State, Data)>::type
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is of the form
PrimitiveTransform(A0), then
result_type
is:

.sp
.if n \{\
.RS 4
.\}
.nf
typename boost::result_of<PrimitiveTransform(
  typename boost::result_of<when<_,A0>(Expr, State, Data)>::type,
  State, 
  Data
)>::type
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is of the form
PrimitiveTransform(A0, A1), then
result_type
is:

.sp
.if n \{\
.RS 4
.\}
.nf
typename boost::result_of<PrimitiveTransform(
  typename boost::result_of<when<_,A0>(Expr, State, Data)>::type,
  typename boost::result_of<when<_,A1>(Expr, State, Data)>::type,
  Data
)>::type
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is of the form
PrimitiveTransform(A0, A1, A2), then
result_type
is:

.sp
.if n \{\
.RS 4
.\}
.nf
typename boost::result_of<PrimitiveTransform(
  typename boost::result_of<when<_,A0>(Expr, State, Data)>::type,
  typename boost::result_of<when<_,A1>(Expr, State, Data)>::type,
  typename boost::result_of<when<_,A2>(Expr, State, Data)>::type
)>::type
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is of the form
PolymorphicFunctionObject(A0,&#8230;An), then
result_type
is:

.sp
.if n \{\
.RS 4
.\}
.nf
typename boost::result_of<PolymorphicFunctionObject(
  typename boost::result_of<when<_,A0>(Expr, State, Data)>::type,
  &#8230;
  typename boost::result_of<when<_,An>(Expr, State, Data)>::type
>::type
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is of the form
PolymorphicFunctionObject(A0,&#8230;An \&.\&.\&.), then let
T\'
be
PolymorphicFunctionObject(A0,&#8230;An\-1, \fIS\fR), where
\fIS\fR
is a type sequence computed from the unpacking expression
An
as described in the reference for
proto::pack\&. Then,
result_type
is:

.sp
.if n \{\
.RS 4
.\}
.nf
typename proto::call<T\'>::impl<Expr,State,Data>::result_type
.fi
.if n \{\
.RE
.\}
.sp

.RE
.RS 4

.RE

.SS "impl public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()(typename impl::expr_param expr, 
                       typename impl::state_param state, 
                       typename impl::data_param data) const;
.fi

.sp
In the description that follows, a type
T
is determined to model the
PrimitiveTransform
concept if
proto::is_transform<T>::value
is
true\&.
.sp

proto::call<T>::impl<Expr,State,Data>::operator()
behaves as follows:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
if of the form
PrimitiveTransform
or
PrimitiveTransform(), then return

.sp
.if n \{\
.RS 4
.\}
.nf
PrimitiveTransform()(expr, state, data)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is of the form
PrimitiveTransform(A0), then return

.sp
.if n \{\
.RS 4
.\}
.nf
PrimitiveTransform()(
  when<_,A0>()(expr, state, data),
  state, 
  sata
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is of the form
PrimitiveTransform(A0, A1), then return:

.sp
.if n \{\
.RS 4
.\}
.nf
PrimitiveTransform()(
  when<_,A0>()(expr, state, data),
  when<_,A1>()(expr, state, data),
  Data
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is of the form
PrimitiveTransform(A0, A1, A2), then return

.sp
.if n \{\
.RS 4
.\}
.nf
PrimitiveTransform()(
  when<_,A0>()(expr, state, data),
  when<_,A1>()(expr, state, data),
  when<_,A2>()(expr, state, data)
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is of the form
PolymorphicFunctionObject(A0,&#8230;An), then return:

.sp
.if n \{\
.RS 4
.\}
.nf
PolymorphicFunctionObject()(
  when<_,A0>()(expr, state, data),
  \&.\&.\&.
  when<_,An>()(expr, state, data)
)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is of the form
PolymorphicFunctionObject(A0,&#8230;An \&.\&.\&.), then let
T\'
be
PolymorphicFunctionObject(A0,&#8230;An\-1, \fIS\fR), where
\fIS\fR
is a type sequence computed from the unpacking expression
An
as described in the reference for
proto::pack\&. Then, return:

.sp
.if n \{\
.RS 4
.\}
.nf
proto::call<T\'>()(expr, state, data)
.fi
.if n \{\
.RE
.\}
.sp

.RE
.RS 4

.RE


