.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MACRO BOOST_SCO" 3 "" "" ""
.SH "NAME"
BOOST_SCOPE_EXIT_TPL \- This macro is a workaround for various versions of GCC to declare scope exits within templates\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/scope_exit\&.hpp>

BOOST_SCOPE_EXIT_TPL(capture_list)
.fi
.SH "DESCRIPTION"
.PP
Various versions of the GCC compiler do not compile
BOOST_SCOPE_EXIT
inside function templates\&. As a workaround,
BOOST_SCOPE_EXIT_TPL
should be used instead of
BOOST_SCOPE_EXIT
in these cases:
.PP

.sp
.if n \{\
.RS 4
.\}
.nf
{ // Some local scope\&.
    \&.\&.\&.
    BOOST_SCOPE_EXIT_TPL(capture_list) {
        \&.\&.\&. // Body code\&.
    } BOOST_SCOPE_EXIT_END
    \&.\&.\&.
}

.fi
.if n \{\
.RE
.\}

.PP
The syntax of
BOOST_SCOPE_EXIT_TPL
is the exact same as the one of
BOOST_SCOPE_EXIT
(see
BOOST_SCOPE_EXIT
for more information)\&.
.PP
On C++11 compilers,
BOOST_SCOPE_EXIT_TPL
is not needed because
BOOST_SCOPE_EXIT
always compiles on GCC versions that support C++11\&. However,
BOOST_SCOPE_EXIT_TPL
is still provided on C++11 so to write code that is portable between C++03 and C++11 compilers\&. It is recommended to always use
BOOST_SCOPE_EXIT_TPL
within templates so to maximize portability\&.
.PP
In general, the special macro
BOOST_SCOPE_EXIT_ID_TPL
must be used instead of
BOOST_SCOPE_EXIT_TPL
when it is necessary to expand multiple scope exit declarations on the same line within templates\&.
.PP
\fBNote:\fR
The issue in compiling scope exit declarations that some GCC versions have is illustrated by the following code (see also
\m[blue]\fBGCC bug 37920\fR\m[]\&\s-2\u[1]\d\s+2):

.sp
.if n \{\
.RS 4
.\}
.nf
template<class T>
void f(T const& x) {
    int i = 0;
    struct local {
        typedef __typeof__(i) typeof_i;
        typedef __typeof__(x) typeof_x;
    };
    typedef local::typeof_i i_type;
    typedef local::typeof_x x_type;
}

int main(void) { f(0); }

.fi
.if n \{\
.RE
.\}
.sp
This can be fixed by adding
typename
in front of
local::typeof_i
and
local::typeof_x
(which is the approach followed by the implementation of the
BOOST_SCOPE_EXIT_TPL
macro)\&.
.PP
\fBNote:\fR
Although
BOOST_SCOPE_EXIT_TPL
has the same suffix as
BOOST_TYPEOF_TPL, it does not follow the Boost\&.Typeof convention\&.
.PP
\fBSee:\fR
Tutorial
section,
BOOST_SCOPE_EXIT,
BOOST_SCOPE_EXIT_END,
BOOST_SCOPE_EXIT_ID_TPL\&.

