.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::visitor_ptr_t \- Adapts a function pointer for use as a static visitor\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/variant/visitor_ptr\&.hpp>

template<typename T, typename R> 
class visitor_ptr_t : public static_visitor<R> {
public:
  // construct/copy/destruct
  explicit visitor_ptr_t(R (*)(T));

  // static visitor interfaces
  R operator()(\fIunspecified\fR\fI\-\fR\fIforwarding\fR\fI\-\fR\fItype\fR);
  template<typename U> void operator()(const U&);
};
.fi
.SH "DESCRIPTION"
.sp
Adapts the function given at construction for use as a static visitor of type T with result type R\&.
.SS "visitor_ptr_t public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit visitor_ptr_t(R (*)(T));
.fi

.PP
Effects:
.RS 4
Constructs the visitor with the given function\&.
.RE
.RE

.SS "visitor_ptr_t static visitor interfaces"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
R operator()(\fIunspecified\fR\fI\-\fR\fIforwarding\fR\fI\-\fR\fItype\fR operand);
template<typename U> void operator()(const U&);
.fi

.PP
Effects:
.RS 4
If passed a value or reference of type
T, it invokes the function given at construction, appropriately forwarding
operand\&.
.RE
.PP
Returns:
.RS 4
Returns the result of the function invocation\&..RE
.PP
Throws:
.RS 4
The overload taking a value or reference of type
T
throws if the invoked function throws\&. The overload taking all other values
\fIalways\fR
throws
bad_visit\&.
.RE
.RE


