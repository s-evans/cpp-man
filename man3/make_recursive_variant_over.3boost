.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS T" 3 "" "" ""
.SH "NAME"
boost::make_recursive_variant_over \- Exposes a recursive variant whose bounded types are the elements of the given type sequence\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/variant/recursive_variant\&.hpp>

template<typename Sequence> 
class make_recursive_variant_over {
public:
  // types
  typedef variant< \fIunspecified\fR > type;
};
.fi
.SH "DESCRIPTION"
.sp
type has behavior equivalent in every respect to make_recursive_variant< Sequence[0], Sequence[1], \&.\&.\&. >::type (where Sequence[\fIi\fR] denotes the \fIi\fR\-th element of Sequence), except that no upper limit is imposed on the number of types\&.
.sp
\fBNotes\fR:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Sequence must meet the requirements of
            MPL\'s \fISequence\fR
            concept\&..RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Due to standard conformance problems in several compilers,
            make_recursive_variant_over may not be supported on
            your compiler\&. See
            BOOST_VARIANT_NO_TYPE_SEQUENCE_SUPPORT
            for more information\&..RE

