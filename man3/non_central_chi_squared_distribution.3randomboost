.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLA" 3 "" "" ""
.SH "NAME"
boost::random::non_central_chi_squared_distribution
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/non_central_chi_squared_distribution\&.hpp>

template<typename RealType = double> 
class non_central_chi_squared_distribution {
public:
  // types
  typedef RealType result_type;
  typedef RealType input_type; 

  // member classes/structs/unions

  class param_type {
  public:
    // types
    typedef non_central_chi_squared_distribution distribution_type;

    // construct/copy/destruct
    explicit param_type(RealType = 1, RealType = 1);

    // public member functions
    RealType k() const;
    RealType lambda() const;

    // friend functions
    template<typename CharT, typename Traits> 
      friend std::basic_ostream< CharT, Traits > & 
      operator<<(std::basic_ostream< CharT, Traits > &, const param_type &);
    template<typename CharT, typename Traits> 
      friend std::basic_istream< CharT, Traits > & 
      operator>>(std::basic_istream< CharT, Traits > &, const param_type &);
    friend bool operator==(const param_type &, const param_type &);
    friend bool operator!=(const param_type &, const param_type &);
  };

  // construct/copy/destruct
  explicit non_central_chi_squared_distribution(RealType = 1, RealType = 1);
  explicit non_central_chi_squared_distribution(const param_type &);

  // public member functions
  template<typename URNG> 
    RealType operator()(URNG &, const param_type &) const;
  template<typename URNG> RealType operator()(URNG &);
  RealType k() const;
  RealType lambda() const;
  param_type param() const;
  void param(const param_type &);
  void reset();
  RealType min() const;
  RealType max() const;

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const non_central_chi_squared_distribution &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, 
               const non_central_chi_squared_distribution &);
  friend bool operator==(const non_central_chi_squared_distribution &, 
                         const non_central_chi_squared_distribution &);
  friend bool operator!=(const non_central_chi_squared_distribution &, 
                         const non_central_chi_squared_distribution &);
};
.fi
.SH "DESCRIPTION"
.PP
The noncentral chi\-squared distribution is a real valued distribution with two parameter,
k
and
lambda\&. The distribution produces values > 0\&.
.PP
This is the distribution of the sum of squares of k Normal distributed variates each with variance one and
\&\s-2\u[1]\d\s+2[IMAGE]\&\s-2\u[2]\d\s+2 [$\lambda$]
the sum of squares of the normal means\&.
.PP
The distribution function is
\&\s-2\u[3]\d\s+2[IMAGE]\&\s-2\u[4]\d\s+2 [$\displaystyle P(x) = \frac{1}{2} e^{-(x+\lambda)/2} \left( \frac{x}{\lambda} \right)^{k/4-1/2} I_{k/2-1}( \sqrt{\lambda x} )$]\&. where
\&\s-2\u[5]\d\s+2[IMAGE]\&\s-2\u[6]\d\s+2 [$\displaystyle I_\nu(z)$]
is a modified Bessel function of the first kind\&.
.PP
The algorithm is taken from
.PP

.PP "Monte Carlo Methods in Financial Engineering", Paul Glasserman, 2003, XIII, 596 p, Stochastic Modelling and Applied Probability, Vol\&. 53, ISBN 978\-0\-387\-21617\-1, p 124, Fig\&. 3\&.5\&.
.SS "non_central_chi_squared_distribution public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit non_central_chi_squared_distribution(RealType k = 1, 
                                              RealType lambda = 1);
.fi

.sp
Construct a
non_central_chi_squared_distribution
object\&.
k
and
lambda
are the parameter of the distribution\&.
.sp
Requires: k > 0 && lambda > 0
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit non_central_chi_squared_distribution(const param_type & param);
.fi

.sp
Construct a
non_central_chi_squared_distribution
object from the parameter\&.
.RE

.SS "non_central_chi_squared_distribution public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename URNG> 
  RealType operator()(URNG & eng, const param_type & param) const;
.fi

.sp
Returns a random variate distributed according to the non central chi squared distribution specified by
param\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename URNG> RealType operator()(URNG & eng);
.fi

.sp
Returns a random variate distributed according to the non central chi squared distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
RealType k() const;
.fi

.sp
Returns the
k
parameter of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
RealType lambda() const;
.fi

.sp
Returns the
lambda
parameter of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
param_type param() const;
.fi

.sp
Returns the parameters of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void param(const param_type & param);
.fi

.sp
Sets parameters of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void reset();
.fi

.sp
Resets the distribution, so that subsequent uses does not depend on values already produced by it\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
RealType min() const;
.fi

.sp
Returns the smallest value that the distribution can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
RealType max() const;
.fi

.sp
Returns the largest value that the distribution can produce\&.
.RE

.SS "non_central_chi_squared_distribution friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const non_central_chi_squared_distribution & dist);
.fi

.sp
Writes the parameters of the distribution to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const non_central_chi_squared_distribution & dist);
.fi

.sp
reads the parameters of the distribution from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const non_central_chi_squared_distribution & lhs, 
                       const non_central_chi_squared_distribution & rhs);
.fi

.sp
Returns true if two distributions have the same parameters and produce the same sequence of random numbers given equal generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const non_central_chi_squared_distribution & lhs, 
                       const non_central_chi_squared_distribution & rhs);
.fi

.sp
Returns true if two distributions have different parameters and/or can produce different sequences of random numbers given equal generators\&.
.RE


