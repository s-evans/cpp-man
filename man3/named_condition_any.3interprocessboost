.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS NAMED_COND" 3 "" "" ""
.SH "NAME"
boost::interprocess::named_condition_any
.SH "SYNOPSIS"
.\" wait: Class named_condition_any
.\" Class named_condition_any: wait
.\" timed_wait: Class named_condition_any
.\" Class named_condition_any: timed_wait
.\" remove: Class named_condition_any
.\" Class named_condition_any: remove
.\" notify_one: Class named_condition_any
.\" Class named_condition_any: notify_one
.\" notify_all: Class named_condition_any
.\" Class named_condition_any: notify_all
.\" named_condition_any: Class named_condition_any
.\" Class named_condition_any: named_condition_any
.\" named_condition_any: Class named_condition_any
.\" Class named_condition_any: named_condition_any

.sp
.nf
// In header: <boost/interprocess/sync/named_condition_any\&.hpp>


class named_condition_any {
public:
  // construct/copy/destruct
  named_condition_any(create_only_t, const char *, 
                      const permissions & = permissions());
  named_condition_any(open_or_create_t, const char *, 
                      const permissions & = permissions());
  named_condition_any(open_only_t, const char *);
  ~named_condition_any();

  // public member functions
  *void notify_one();
  void notify_all();
  template<typename L> void wait(L &);
  template<typename L, typename Pr> void wait(L &, Pr);
  template<typename L> bool timed_wait(L &, const boost::posix_time::ptime &);
  template<typename L, typename Pr> 
    bool timed_wait(L &, const boost::posix_time::ptime &, Pr);

  // public static functions
  static bool remove(const char *);
};
.fi
.SH "DESCRIPTION"
.PP
A global condition variable that can be created by name\&. This condition variable is designed to work with
named_mutex
and can\'t be placed in shared memory or memory mapped files\&.
.SS "named_condition_any public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
named_condition_any(create_only_t, const char * name, 
                    const permissions & perm = permissions());
.fi

.sp
Creates a global condition with a name\&. If the condition can\'t be created throws
interprocess_exception
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" named_condition_any: Class named_condition_any
.\" Class named_condition_any: named_condition_any

.sp

.nf
named_condition_any(open_or_create_t, const char * name, 
                    const permissions & perm = permissions());
.fi

.sp
Opens or creates a global condition with a name\&. If the condition is created, this call is equivalent to
named_condition_any(create_only_t, \&.\&.\&. ) If the condition is already created, this call is equivalent
named_condition_any(open_only_t, \&.\&.\&. ) Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
named_condition_any(open_only_t, const char * name);
.fi

.sp
Opens a global condition with a name if that condition is previously created\&. If it is not previously created this function throws
interprocess_exception\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" remove: Class named_condition_any
.\" Class named_condition_any: remove

.sp

.nf
~named_condition_any();
.fi

.sp
Destroys *this and indicates that the calling process is finished using the resource\&. The destructor function will deallocate any system resources allocated by the system for use by this process for this resource\&. The resource can still be opened again calling the open constructor overload\&. To erase the resource from the system use remove()\&.
.RE

.SS "named_condition_any public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" notify_one: Class named_condition_any
.\" Class named_condition_any: notify_one

.sp

.nf
*void notify_one();
.fi

.sp
If there is a thread waiting on *this, change that thread\'s state to ready\&. Otherwise there is no effect\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" notify_all: Class named_condition_any
.\" Class named_condition_any: notify_all

.sp

.nf
void notify_all();
.fi

.sp
Change the state of all threads waiting on *this to ready\&. If there are no waiting threads, notify_all() has no effect\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
.\" wait: Class named_condition_any
.\" Class named_condition_any: wait

.sp

.nf
template<typename L> void wait(L & lock);
.fi

.sp
Releases the lock on the
named_mutex
object associated with lock, blocks the current thread of execution until readied by a call to this\->notify_one() or this\->notify_all(), and then reacquires the lock\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" wait: Class named_condition_any
.\" Class named_condition_any: wait

.sp

.nf
template<typename L, typename Pr> void wait(L & lock, Pr pred);
.fi

.sp
The same as: while (!pred()) wait(lock)
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
.\" timed_wait: Class named_condition_any
.\" Class named_condition_any: timed_wait

.sp

.nf
template<typename L> 
  bool timed_wait(L & lock, const boost::posix_time::ptime & abs_time);
.fi

.sp
Releases the lock on the
named_mutex
object associated with lock, blocks the current thread of execution until readied by a call to this\->notify_one() or this\->notify_all(), or until time abs_time is reached, and then reacquires the lock\&. Returns: false if time abs_time is reached, otherwise true\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
.\" pred: Class named_condition_any
.\" Class named_condition_any: pred
.\" timed_wait: Class named_condition_any
.\" Class named_condition_any: timed_wait

.sp

.nf
template<typename L, typename Pr> 
  bool timed_wait(L & lock, const boost::posix_time::ptime & abs_time, 
                  Pr pred);
.fi

.sp
The same as: while (!pred()) { if (!timed_wait(lock, abs_time)) return pred(); } return true;
.RE

.SS "named_condition_any public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" remove: Class named_condition_any
.\" Class named_condition_any: remove

.sp

.nf
static bool remove(const char * name);
.fi

.sp
Erases a named condition from the system\&. Returns false on error\&. Never throws\&.
.RE


