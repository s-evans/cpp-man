.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::log::sinks::basic_direct_mapping \- Straightforward mapping\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/attribute_mapping\&.hpp>

template<typename MappedT, typename AttributeValueT = int> 
class basic_direct_mapping :
  public boost::log::sinks::basic_mapping< MappedT >
{
public:
  // types
  typedef AttributeValueT        attribute_value_type;  // Attribute contained value type\&. 
  typedef base_type::mapped_type mapped_type;           // Mapped value type\&. 

  // construct/copy/destruct
  explicit basic_direct_mapping(attribute_name const &, mapped_type const &);

  // public member functions
  mapped_type operator()(record_view const &) const;
};
.fi
.SH "DESCRIPTION"
.PP
This type of mapping assumes that attribute with a particular name always provides values that map directly onto the native values\&. The mapping simply returns the extracted attribute value converted to the native value\&.
.SS "basic_direct_mapping public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit basic_direct_mapping(attribute_name const & name, 
                              mapped_type const & default_value);
.fi

.sp
Constructor
.sp

.PP
Parameters:
.RS 4
.PP
default_value
.RS 4
The default native value that is returned if the attribute value is not found
.RE
.PP
name
.RS 4
Attribute name
.RE
.RE
.RE

.SS "basic_direct_mapping public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
mapped_type operator()(record_view const & rec) const;
.fi

.sp
Extraction operator
.sp

.PP
Parameters:
.RS 4
.PP
rec
.RS 4
A log record to extract value from
.RE
.RE
.PP
Returns:
.RS 4
An extracted attribute value
.RE
.RE


