.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE U" 3 "" "" ""
.SH "NAME"
boost::random::uniform_01
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/uniform_01\&.hpp>

template<typename RealType = double> 
class uniform_01 {
public:
  // types
  typedef RealType input_type; 
  typedef RealType result_type;

  // public member functions
  result_type min() const;
  result_type max() const;
  void reset();
  template<typename Engine> result_type operator()(Engine &);
};
.fi
.SH "DESCRIPTION"
.PP
The distribution function
uniform_01
models a
random distribution
\&. On each invocation, it returns a random floating\-point value uniformly distributed in the range [0\&.\&.1)\&.
.PP
The template parameter RealType shall denote a float\-like value type with support for binary operators +, \-, and /\&.
.PP
Note: The current implementation is buggy, because it may not fill all of the mantissa with random bits\&. I\'m unsure how to fill a (to\-be\-invented)
boost::bigfloat
class with random bits efficiently\&. It\'s probably time for a traits class\&.
.SS "uniform_01 public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type min() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
result_type max() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void reset();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename Engine> result_type operator()(Engine & eng);
.fi

.RE


