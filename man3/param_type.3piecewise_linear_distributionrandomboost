.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS PARAM_TYPE" 3 "" "" ""
.SH "NAME"
boost::random::piecewise_linear_distribution::param_type
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/piecewise_linear_distribution\&.hpp>



class param_type {
public:
  // types
  typedef piecewise_linear_distribution distribution_type;

  // construct/copy/destruct
  param_type();
  template<typename IntervalIter, typename WeightIter> 
    param_type(IntervalIter, IntervalIter, WeightIter);
  template<typename T, typename F> 
    param_type(const std::initializer_list< T > &, F);
  template<typename IntervalRange, typename WeightRange> 
    param_type(const IntervalRange &, const WeightRange &);
  template<typename F> param_type(std::size_t, RealType, RealType, F);

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, const param_type &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, const param_type &);
  friend bool operator==(const param_type &, const param_type &);
  friend bool operator!=(const param_type &, const param_type &);

  // public member functions
  std::vector< RealType > intervals() const;
  std::vector< RealType > densities() const;
};
.fi
.SH "DESCRIPTION"
.SS "param_type public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
param_type();
.fi

.sp
Constructs a
param_type
object, representing a distribution that produces values uniformly distributed in the range [0, 1)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename IntervalIter, typename WeightIter> 
  param_type(IntervalIter intervals_first, IntervalIter intervals_last, 
             WeightIter weight_first);
.fi

.sp
Constructs a
param_type
object from two iterator ranges containing the interval boundaries and weights at the boundaries\&. If there are fewer than two boundaries, then this is equivalent to the default constructor and the distribution will produce values uniformly distributed in the range [0, 1)\&.
.sp
The values of the interval boundaries must be strictly increasing, and the number of weights must be the same as the number of interval boundaries\&. If there are extra weights, they are ignored\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename T, typename F> 
  param_type(const std::initializer_list< T > & il, F f);
.fi

.sp
Constructs a
param_type
object from an initializer_list containing the interval boundaries and a unary function specifying the weights at the boundaries\&. Each weight is determined by calling the function at the corresponding point\&.
.sp
If the initializer_list contains fewer than two elements, this is equivalent to the default constructor and the distribution will produce values uniformly distributed in the range [0, 1)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename IntervalRange, typename WeightRange> 
  param_type(const IntervalRange & intervals_arg, 
             const WeightRange & weights_arg);
.fi

.sp
Constructs a
param_type
object from Boost\&.Range ranges holding the interval boundaries and the weights at the boundaries\&. If there are fewer than two interval boundaries, this is equivalent to the default constructor and the distribution will produce values uniformly distributed in the range [0, 1)\&. The number of weights must be equal to the number of interval boundaries\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename F> 
  param_type(std::size_t nw, RealType xmin, RealType xmax, F f);
.fi

.sp
Constructs the parameters for a distribution that approximates a function\&. The range of the distribution is [xmin, xmax)\&. This range is divided into nw equally sized intervals and the weights are found by calling the unary function f on the boundaries of the intervals\&.
.RE

.SS "param_type friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const param_type & param);
.fi

.sp
Writes the parameters to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const param_type & param);
.fi

.sp
Reads the parameters from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const param_type & lhs, const param_type & rhs);
.fi

.sp
Returns true if the two sets of parameters are the same\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const param_type & lhs, const param_type & rhs);
.fi

.sp
Returns true if the two sets of parameters are different\&.
.RE

.SS "param_type public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
std::vector< RealType > intervals() const;
.fi

.sp
Returns a vector containing the interval boundaries\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
std::vector< RealType > densities() const;
.fi

.sp
Returns a vector containing the probability densities at all the interval boundaries\&.
.RE


