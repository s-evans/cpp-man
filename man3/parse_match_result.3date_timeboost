.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMP" 3 "" "" ""
.SH "NAME"
boost::date_time::parse_match_result
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/string_parse_tree\&.hpp>

template<typename charT> 
struct parse_match_result {
  // types
  typedef std::basic_string< charT > string_type;

  enum PARSE_STATE { PARSE_ERROR = = \-1 };

  // construct/copy/destruct
  parse_match_result();

  // public member functions
  string_type remaining() const;
  charT last_char() const;
  bool has_remaining() const;

  // public data members
  string_type cache;
  unsigned short match_depth;
  short current_match;
};
.fi
.SH "DESCRIPTION"
.SS "parse_match_result public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
parse_match_result();
.fi

.RE

.SS "parse_match_result public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
string_type remaining() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
charT last_char() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
bool has_remaining() const;
.fi

.sp
Returns true if more characters were parsed than was necessary\&. Should be used in conjunction with last_char() to get the remaining character\&.
.RE


