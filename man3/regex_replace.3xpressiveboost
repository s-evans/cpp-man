.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION REGEX_RE" 3 "" "" ""
.SH "NAME"
boost::xpressive::regex_replace \- Build an output sequence given an input sequence, a regex, and a format string or a formatter object, function, or expression\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_algorithms\&.hpp>


template<typename OutIter, typename BidiIter, typename Formatter> 
  OutIter regex_replace(OutIter out, BidiIter begin, BidiIter end, 
                        basic_regex< BidiIter > const & re, 
                        Formatter const & format, 
                        regex_constants::match_flag_type flags = regex_constants::match_default, 
                        \fIunspecified\fR = 0);
template<typename OutIter, typename BidiIter> 
  OutIter regex_replace(OutIter out, BidiIter begin, BidiIter end, 
                        basic_regex< BidiIter > const & re, 
                        typename iterator_value< BidiIter >::type const * format, 
                        regex_constants::match_flag_type flags = regex_constants::match_default);
template<typename BidiContainer, typename BidiIter, typename Formatter> 
  BidiContainer 
  regex_replace(BidiContainer & str, basic_regex< BidiIter > const & re, 
                Formatter const & format, 
                regex_constants::match_flag_type flags = regex_constants::match_default, 
                \fIunspecified\fR = 0);
template<typename BidiContainer, typename BidiIter, typename Formatter> 
  BidiContainer 
  regex_replace(BidiContainer const & str, basic_regex< BidiIter > const & re, 
                Formatter const & format, 
                regex_constants::match_flag_type flags = regex_constants::match_default, 
                \fIunspecified\fR = 0);
template<typename Char, typename Formatter> 
  std::basic_string< typename remove_const< Char >::type > 
  regex_replace(Char * str, basic_regex< Char * > const & re, 
                Formatter const & format, 
                regex_constants::match_flag_type flags = regex_constants::match_default, 
                \fIunspecified\fR = 0);
template<typename BidiContainer, typename BidiIter> 
  BidiContainer 
  regex_replace(BidiContainer & str, basic_regex< BidiIter > const & re, 
                typename iterator_value< BidiIter >::type const * format, 
                regex_constants::match_flag_type flags = regex_constants::match_default, 
                \fIunspecified\fR = 0);
template<typename BidiContainer, typename BidiIter> 
  BidiContainer 
  regex_replace(BidiContainer const & str, basic_regex< BidiIter > const & re, 
                typename iterator_value< BidiIter >::type const * format, 
                regex_constants::match_flag_type flags = regex_constants::match_default, 
                \fIunspecified\fR = 0);
template<typename Char> 
  std::basic_string< typename remove_const< Char >::type > 
  regex_replace(Char * str, basic_regex< Char * > const & re, 
                typename add_const< Char >::type * format, 
                regex_constants::match_flag_type flags = regex_constants::match_default);
.fi
.SH "DESCRIPTION"
.PP
Constructs a
regex_iterator
object:
regex_iterator< BidiIter > i(begin, end, re, flags), and uses
i
to enumerate through all of the matches m of type
match_results< BidiIter >
that occur within the sequence
[begin, end)\&. If no such matches are found and
!(flags & format_no_copy)
then calls
std::copy(begin, end, out)\&. Otherwise, for each match found, if
!(flags & format_no_copy)
calls
std::copy(m\&.prefix()\&.first, m\&.prefix()\&.second, out), and then calls
m\&.format(out, format, flags)\&. Finally if
!(flags & format_no_copy)
calls
std::copy(last_m\&.suffix()\&.first, last_m\&.suffix()\&.second, out)
where
last_m
is a copy of the last match found\&.
.PP
If
flags & format_first_only
is non\-zero then only the first match found is replaced\&.
.PP

.PP
Parameters:
.RS 4
.PP
begin
.RS 4
The beginning of the input sequence\&.
.RE
.PP
end
.RS 4
The end of the input sequence\&.
.RE
.PP
flags
.RS 4
Optional match flags, used to control how the expression is matched against the sequence\&. (See
match_flag_type\&.)
.RE
.PP
format
.RS 4
The format string used to format the replacement sequence, or a formatter function, function object, or expression\&.
.RE
.PP
out
.RS 4
An output iterator into which the output sequence is written\&.
.RE
.PP
re
.RS 4
The regular expression object to use\&.
.RE
.RE
.PP
Requires:
.RS 4
Type
BidiIter
meets the requirements of a Bidirectional Iterator (24\&.1\&.4)\&.
.RE
.PP
Requires:
.RS 4
Type
OutIter
meets the requirements of an Output Iterator (24\&.1\&.2)\&.
.RE
.PP
Requires:
.RS 4
Type
Formatter
models
ForwardRange,
Callable<match_results<BidiIter> >,
Callable<match_results<BidiIter>, OutIter>, or
Callable<match_results<BidiIter>, OutIter, regex_constants::match_flag_type>; or else it is a null\-terminated format string, or an expression template representing a formatter lambda expression\&.
.RE
.PP
Requires:
.RS 4
[begin,end)
denotes a valid iterator range\&.
.RE
.PP
Returns:
.RS 4
The value of the output iterator after the output sequence has been written to it\&.
.RE
.PP
Throws:
.RS 4
regex_error
on stack exhaustion or invalid format string\&.
.RE

