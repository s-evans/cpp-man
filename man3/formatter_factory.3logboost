.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPL" 3 "" "" ""
.SH "NAME"
boost::log::formatter_factory
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/setup/formatter_parser\&.hpp>

template<typename CharT> 
struct formatter_factory {
  // types
  typedef CharT                                char_type;       // Character type\&. 
  typedef std::basic_string< char_type >       string_type;     // String type\&. 
  typedef basic_formatter< char_type >         formatter_type;  // The formatter function object\&. 
  typedef std::map< string_type, string_type > args_map;      

  // construct/copy/destruct
  formatter_factory() = default;
  formatter_factory(formatter_factory const &) = delete;
  formatter_factory & operator=(formatter_factory const &) = delete;
  ~formatter_factory();

  // public member functions
  virtual formatter_type 
  create_formatter(attribute_name const &, args_map const &) = 0;
};
.fi
.SH "DESCRIPTION"
.PP
Formatter factory base interface\&.
.SS "formatter_factory public types"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

typedef
std::map<
string_type,
string_type
>
args_map;
.sp
Type of the map of formatter factory arguments [argument name \-> argument value]\&. This type of maps will be passed to formatter factories on attempt to create a formatter\&.
.RE

.SS "formatter_factory public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
formatter_factory() = default;
.fi

.sp
Default constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
formatter_factory(formatter_factory const &) = delete;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
formatter_factory & operator=(formatter_factory const &) = delete;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
~formatter_factory();
.fi

.sp
Virtual destructor
.RE

.SS "formatter_factory public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual formatter_type 
create_formatter(attribute_name const & name, args_map const & args) = 0;
.fi

.sp
The function creates a formatter for the specified attribute\&.
.sp

.PP
Parameters:
.RS 4
.PP
args
.RS 4
Formatter arguments
.RE
.PP
name
.RS 4
Attribute name
.RE
.RE
.RE


