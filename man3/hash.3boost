.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE HA" 3 "" "" ""
.SH "NAME"
boost::hash \- A \m[blue]\fBTR1\fR\m[] compliant hash function object\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/functional/hash\&.hpp>

template<typename T> 
struct hash : public std::unary_function<T, std::size_t> {
  std::size_t operator()(T const&) const;
};
.fi
.SH "DESCRIPTION"
.PP

.sp

.nf
std::size_t operator()(T const& val) const;
.fi

.PP
Returns:
.RS 4


.sp
.if n \{\
.RS 4
.\}
.nf
hash_value(val)
.fi
.if n \{\
.RE
.\}
.sp

.RE
.PP
Notes:
.RS 4
The call to
hash_value
is unqualified, so that custom overloads can be found via argument dependent lookup\&.
.sp
This is not defined when the macro
BOOST_HASH_NO_EXTENSIONS
is defined\&. The specializations are still defined, so only the specializations required by TR1 are defined\&.
.sp
Forward declared in
<boost/functional/hash_fwd\&.hpp>
.sp
This hash function is not intended for general use, and isn\'t guaranteed to be equal during separate runs of a program \- so please don\'t use it for any persistent storage or communication\&.
.RE
.PP
Throws:
.RS 4
Only throws if
hash_value(T)
throws\&.
.RE

