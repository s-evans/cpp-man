.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPL" 3 "" "" ""
.SH "NAME"
boost::date_time::counted_time_rep \- Time representation that uses a single integer count\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/time_system_counted\&.hpp>

template<typename config> 
struct counted_time_rep {
  // types
  typedef config::int_type           int_type;          
  typedef config::date_type          date_type;         
  typedef config::impl_type          impl_type;         
  typedef date_type::duration_type   date_duration_type;
  typedef date_type::calendar_type   calendar_type;     
  typedef date_type::ymd_type        ymd_type;          
  typedef config::time_duration_type time_duration_type;
  typedef config::resolution_traits  resolution_traits; 

  // construct/copy/destruct
  counted_time_rep(const date_type &, const time_duration_type &);
  explicit counted_time_rep(int_type);
  explicit counted_time_rep(impl_type);

  // public member functions
  date_type date() const;
  unsigned long day_count() const;
  int_type time_count() const;
  int_type tod() const;
  bool is_pos_infinity() const;
  bool is_neg_infinity() const;
  bool is_not_a_date_time() const;
  bool is_special() const;
  impl_type get_rep() const;

  // public static functions
  static int_type frac_sec_per_day();
};
.fi
.SH "DESCRIPTION"
.SS "counted_time_rep public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
counted_time_rep(const date_type & d, const time_duration_type & time_of_day);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit counted_time_rep(int_type count);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
explicit counted_time_rep(impl_type count);
.fi

.RE

.SS "counted_time_rep public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
date_type date() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
unsigned long day_count() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
int_type time_count() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
int_type tod() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
bool is_pos_infinity() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
bool is_neg_infinity() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
bool is_not_a_date_time() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
bool is_special() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
impl_type get_rep() const;
.fi

.RE

.SS "counted_time_rep public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static int_type frac_sec_per_day();
.fi

.RE


