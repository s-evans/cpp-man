.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT" 3 "" "" ""
.SH "NAME"
boost::enable_move_utility_emulation
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/move/utility_core\&.hpp>

template<typename T> 
struct enable_move_utility_emulation {

  // public data members
  static const bool value;
};
.fi
.SH "DESCRIPTION"
.PP
This trait\'s internal boolean
value
is false in compilers with rvalue references and true in compilers without rvalue references\&.
.PP
A user can specialize this trait for a type T to false to SFINAE out
move
and
forward
so that the user can define a different move emulation for that type in namespace boost (e\&.g\&. another Boost library for its types) and avoid any overload ambiguity\&.

