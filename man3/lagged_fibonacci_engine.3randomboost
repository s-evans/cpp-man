.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::random::lagged_fibonacci_engine
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/lagged_fibonacci\&.hpp>

template<typename UIntType, int w, unsigned int p, unsigned int q> 
class lagged_fibonacci_engine {
public:
  // types
  typedef UIntType result_type;

  // construct/copy/destruct
  lagged_fibonacci_engine();
  explicit lagged_fibonacci_engine(UIntType);
  template<typename SeedSeq> explicit lagged_fibonacci_engine(SeedSeq &);
  template<typename It> lagged_fibonacci_engine(It &, It);

  // public static functions
  static result_type min();
  static result_type max();

  // public member functions
  void seed();
  void seed(UIntType);
  template<typename SeedSeq> void seed(SeedSeq &);
  template<typename It> void seed(It &, It);
  result_type operator()();
  template<typename Iter> void generate(Iter, Iter);
  void discard(boost::uintmax_t);

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const lagged_fibonacci_engine &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, 
               const lagged_fibonacci_engine &);
  friend bool operator==(const lagged_fibonacci_engine &, 
                         const lagged_fibonacci_engine &);
  friend bool operator!=(const lagged_fibonacci_engine &, 
                         const lagged_fibonacci_engine &);

  // public data members
  static const bool has_fixed_range;
  static const int word_size;
  static const unsigned int long_lag;
  static const unsigned int short_lag;
  static const UIntType default_seed;
};
.fi
.SH "DESCRIPTION"
.PP
Instantiations of class template
lagged_fibonacci_engine
model a
pseudo\-random number generator
\&. It uses a lagged Fibonacci algorithm with two lags
p
and
q:
x(i) = x(i\-p) + x(i\-q) (mod 2w) with p > q\&.
.SS "lagged_fibonacci_engine public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
lagged_fibonacci_engine();
.fi

.sp
Creates a new
lagged_fibonacci_engine
and calls
seed()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit lagged_fibonacci_engine(UIntType value);
.fi

.sp
Creates a new
lagged_fibonacci_engine
and calls
seed(value)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeedSeq> explicit lagged_fibonacci_engine(SeedSeq & seq);
.fi

.sp
Creates a new
lagged_fibonacci_engine
and calls
seed(seq)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename It> lagged_fibonacci_engine(It & first, It last);
.fi

.sp
Creates a new
lagged_fibonacci_engine
and calls
seed(first, last)\&.
.RE

.SS "lagged_fibonacci_engine public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static result_type min();
.fi

.sp
Returns the smallest value that the generator can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static result_type max();
.fi

.sp
Returns the largest value that the generator can produce\&.
.RE

.SS "lagged_fibonacci_engine public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void seed();
.fi

.sp
Calls
seed(default_seed)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void seed(UIntType value);
.fi

.sp
Sets the state of the generator to values produced by a
minstd_rand0
generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeedSeq> void seed(SeedSeq & seq);
.fi

.sp
Sets the state of the generator using values produced by seq\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename It> void seed(It & first, It last);
.fi

.sp
Sets the state of the generator to values from the iterator range [first, last)\&. If there are not enough elements in the range [first, last) throws
std::invalid_argument\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
result_type operator()();
.fi

.sp
Returns the next value of the generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
template<typename Iter> void generate(Iter first, Iter last);
.fi

.sp
Fills a range with random values
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void discard(boost::uintmax_t z);
.fi

.sp
Advances the state of the generator by
z\&.
.RE

.SS "lagged_fibonacci_engine friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const lagged_fibonacci_engine & f);
.fi

.sp
Writes the textual representation of the generator to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const lagged_fibonacci_engine & f);
.fi

.sp
Reads the textual representation of the generator from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const lagged_fibonacci_engine & x_, 
                       const lagged_fibonacci_engine & y_);
.fi

.sp
Returns true if the two generators will produce identical sequences of outputs\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const lagged_fibonacci_engine & lhs, 
                       const lagged_fibonacci_engine & rhs);
.fi

.sp
Returns true if the two generators will produce different sequences of outputs\&.
.RE


