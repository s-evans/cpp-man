.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT C_TIME" 3 "" "" ""
.SH "NAME"
boost::date_time::c_time \- Provides a uniform interface to some \'ctime\' functions\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/c_time\&.hpp>


struct c_time {

  // public static functions
  static std::tm * localtime(const std::time_t *, std::tm *);
  static std::tm * gmtime(const std::time_t *, std::tm *);
  static std::tm * localtime(const std::time_t *, std::tm *);
  static std::tm * gmtime(const std::time_t *, std::tm *);
};
.fi
.SH "DESCRIPTION"
.PP
Provides a uniform interface to some ctime functions and their \'_r\' counterparts\&. The \'_r\' functions require a pointer to a user created std::tm struct whereas the regular functions use a staticly created struct and return a pointer to that\&. These wrapper functions require the user to create a std::tm struct and send in a pointer to it\&. This struct may be used to store the resulting time\&. The returned pointer may or may not point to this struct, however, it will point to the result of the corresponding function\&. All functions do proper checking of the C function results and throw exceptions on error\&. Therefore the functions will never return NULL\&.
.SS "c_time public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static std::tm * localtime(const std::time_t * t, std::tm * result);
.fi

requires a pointer to a user created std::tm struct .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static std::tm * gmtime(const std::time_t * t, std::tm * result);
.fi

requires a pointer to a user created std::tm struct .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
static std::tm * localtime(const std::time_t * t, std::tm * result);
.fi

requires a pointer to a user created std::tm struct .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
static std::tm * gmtime(const std::time_t * t, std::tm * result);
.fi

requires a pointer to a user created std::tm struct .RE


