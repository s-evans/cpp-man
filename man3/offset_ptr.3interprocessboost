.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE O" 3 "" "" ""
.SH "NAME"
boost::interprocess::offset_ptr
.SH "SYNOPSIS"
.\" value_type: Class template offset_ptr
.\" Class template offset_ptr: value_type
.\" reference: Class template offset_ptr
.\" Class template offset_ptr: reference
.\" rebind: Class template offset_ptr
.\" Class template offset_ptr: rebind
.\" pointer_to: Class template offset_ptr
.\" Class template offset_ptr: pointer_to
.\" pointer: Class template offset_ptr
.\" Class template offset_ptr: pointer
.\" other: Class template offset_ptr
.\" Class template offset_ptr: other
.\" offset_type: Class template offset_ptr
.\" Class template offset_ptr: offset_type
.\" offset_ptr: Class template offset_ptr
.\" Class template offset_ptr: offset_ptr
.\" offset_ptr: Class template offset_ptr
.\" Class template offset_ptr: offset_ptr
.\" iterator_category: Class template offset_ptr
.\" Class template offset_ptr: iterator_category
.\" get: Class template offset_ptr
.\" Class template offset_ptr: get
.\" element_type: Class template offset_ptr
.\" Class template offset_ptr: element_type
.\" difference_type: Class template offset_ptr
.\" Class template offset_ptr: difference_type

.sp
.nf
// In header: <boost/interprocess/offset_ptr\&.hpp>

template<typename PointedType, typename DifferenceType, typename OffsetType, 
         std::size_t OffsetAlignment> 
class offset_ptr {
public:
  // types
  typedef PointedType                     element_type;     
  typedef PointedType *                   pointer;          
  typedef \fIunspecified\fR                     reference;        
  typedef \fIunspecified\fR                     value_type;       
  typedef DifferenceType                  difference_type;  
  typedef std::random_access_iterator_tag iterator_category;
  typedef OffsetType                      offset_type;      

  // member classes/structs/unions
  template<typename U> 
  struct rebind {
    // types
    typedef offset_ptr< U, DifferenceType, OffsetType, OffsetAlignment > other;
  };

  // construct/copy/destruct
  offset_ptr();
  offset_ptr(pointer);
  template<typename T> offset_ptr(T *, \fIunspecified\fR = 0);
  offset_ptr(const offset_ptr &);
  template<typename T2> 
    offset_ptr(const offset_ptr< T2, DifferenceType, OffsetType, OffsetAlignment > &);
  template<typename T2, typename P2, typename O2, std::size_t A2> 
    offset_ptr(const offset_ptr< T2, P2, O2, A2 > &, \fIunspecified\fR);
  template<typename T2, typename P2, typename O2, std::size_t A2> 
    offset_ptr(const offset_ptr< T2, P2, O2, A2 > &, \fIunspecified\fR);
  template<typename T2, typename P2, typename O2, std::size_t A2> 
    offset_ptr(const offset_ptr< T2, P2, O2, A2 > &, \fIunspecified\fR);
  template<typename T2, typename P2, typename O2, std::size_t A2> 
    offset_ptr(const offset_ptr< T2, P2, O2, A2 > &, \fIunspecified\fR);
  offset_ptr & operator=(pointer);
  offset_ptr & operator=(const offset_ptr &);
  template<typename T2> 
    offset_ptr & 
    operator=(const offset_ptr< T2, DifferenceType, OffsetType, OffsetAlignment > &);

  // public member functions
  pointer get() const;
  offset_type get_offset() const;
  pointer operator\->() const;
  reference operator*() const;
  reference operator[](difference_type) const;
  offset_ptr & operator+=(difference_type);
  offset_ptr & operator\-=(difference_type);
  offset_ptr & operator++(void);
  offset_ptr operator++(int);
  offset_ptr & operator\-\-(void);
  offset_ptr operator\-\-(int);
  operator unspecified_bool_type() const;
  bool operator!() const;

  // public static functions
  static offset_ptr pointer_to(reference);

  // friend functions
  friend offset_ptr operator+(difference_type, offset_ptr);
  friend offset_ptr operator+(offset_ptr, difference_type);
  friend offset_ptr operator\-(offset_ptr, difference_type);
  friend offset_ptr operator\-(difference_type, offset_ptr);
  friend difference_type operator\-(const offset_ptr &, const offset_ptr &);
};
.fi
.SH "DESCRIPTION"
.PP
A smart pointer that stores the offset between between the pointer and the the object it points\&. This allows offset allows special properties, since the pointer is independent from the address address of the pointee, if the pointer and the pointee are still separated by the same offset\&. This feature converts
offset_ptr
in a smart pointer that can be placed in shared memory and memory mapped files mapped in different addresses in every process\&.
.PP

.SS "Template Parameters"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
typename PointedType
.fi

.sp
The type of the pointee\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
typename DifferenceType
.fi

.sp
A signed integer type that can represent the arithmetic operations on the pointer
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
typename OffsetType
.fi

.sp
An unsigned integer type that can represent the distance between two pointers reinterpret_cast\-ed as unsigned integers\&. In general this type should be at least of the same size of std::uintptr_t\&. In some systems it\'s possible to communicate between 32 and 64 bit processes using 64 bit offsets\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
std::size_t OffsetAlignment
.fi

.sp
Alignment of the OffsetType stored inside\&. In some systems might be necessary to align it to 64 bits in order to communicate 32 and 64 bit processes using 64 bit offsets\&.
.RE

.SS "offset_ptr public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
offset_ptr();
.fi

.sp
Default constructor (null pointer)\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
offset_ptr(pointer ptr);
.fi

.sp
Constructor from raw pointer (allows "0" pointer conversion)\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
.\" offset_ptr: Class template offset_ptr
.\" Class template offset_ptr: offset_ptr

.sp

.nf
template<typename T> offset_ptr(T * ptr, \fIunspecified\fR = 0);
.fi

.sp
Constructor from other pointer\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
offset_ptr(const offset_ptr & ptr);
.fi

.sp
Constructor from other
offset_ptr
Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
.\" offset_ptr: Class template offset_ptr
.\" Class template offset_ptr: offset_ptr

.sp

.nf
template<typename T2> 
  offset_ptr(const offset_ptr< T2, DifferenceType, OffsetType, OffsetAlignment > & ptr);
.fi

.sp
Constructor from other
offset_ptr\&. If pointers of pointee types are convertible, offset_ptrs will be convertibles\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
.\" offset_ptr: Class template offset_ptr
.\" Class template offset_ptr: offset_ptr

.sp

.nf
template<typename T2, typename P2, typename O2, std::size_t A2> 
  offset_ptr(const offset_ptr< T2, P2, O2, A2 > & r, \fIunspecified\fR);
.fi

.sp
Emulates static_cast operator\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
.\" offset_ptr: Class template offset_ptr
.\" Class template offset_ptr: offset_ptr

.sp

.nf
template<typename T2, typename P2, typename O2, std::size_t A2> 
  offset_ptr(const offset_ptr< T2, P2, O2, A2 > & r, \fIunspecified\fR);
.fi

.sp
Emulates const_cast operator\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}
.\" offset_ptr: Class template offset_ptr
.\" Class template offset_ptr: offset_ptr

.sp

.nf
template<typename T2, typename P2, typename O2, std::size_t A2> 
  offset_ptr(const offset_ptr< T2, P2, O2, A2 > & r, \fIunspecified\fR);
.fi

.sp
Emulates dynamic_cast operator\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}
.\" offset_ptr: Class template offset_ptr
.\" Class template offset_ptr: offset_ptr

.sp

.nf
template<typename T2, typename P2, typename O2, std::size_t A2> 
  offset_ptr(const offset_ptr< T2, P2, O2, A2 > & r, \fIunspecified\fR);
.fi

.sp
Emulates reinterpret_cast operator\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
offset_ptr & operator=(pointer from);
.fi

.sp
Assignment from pointer (saves extra conversion)\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
offset_ptr & operator=(const offset_ptr & ptr);
.fi

.sp
Assignment from other
offset_ptr\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
template<typename T2> 
  offset_ptr & 
  operator=(const offset_ptr< T2, DifferenceType, OffsetType, OffsetAlignment > & ptr);
.fi

.sp
Assignment from related
offset_ptr\&. If pointers of pointee types are assignable, offset_ptrs will be assignable\&. Never throws\&.
.RE

.SS "offset_ptr public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" get: Class template offset_ptr
.\" Class template offset_ptr: get

.sp

.nf
pointer get() const;
.fi

.sp
Obtains raw pointer from offset\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
offset_type get_offset() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
pointer operator\->() const;
.fi

.sp
Pointer\-like \-> operator\&. It can return 0 pointer\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
reference operator*() const;
.fi

.sp
Dereferencing operator, if it is a null
offset_ptr
behavior is undefined\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
reference operator[](difference_type idx) const;
.fi

.sp
Indexing operator\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
offset_ptr & operator+=(difference_type offset);
.fi

.sp
offset_ptr
+= difference_type\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
offset_ptr & operator\-=(difference_type offset);
.fi

.sp
offset_ptr
\-= difference_type\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
offset_ptr & operator++(void);
.fi

.sp
++offset_ptr\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
offset_ptr operator++(int);
.fi

.sp
offset_ptr++\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
offset_ptr & operator\-\-(void);
.fi

.sp
<ndash></ndash>offset_ptr\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
offset_ptr operator\-\-(int);
.fi

.sp
offset_ptr<ndash></ndash>\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
operator unspecified_bool_type() const;
.fi

.sp
safe bool conversion operator\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "13." 4.2
.\}

.sp

.nf
bool operator!() const;
.fi

.sp
Not operator\&. Not needed in theory, but improves portability\&. Never throws
.RE

.SS "offset_ptr public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" pointer_to: Class template offset_ptr
.\" Class template offset_ptr: pointer_to

.sp

.nf
static offset_ptr pointer_to(reference r);
.fi

.sp
Compatibility with pointer_traits
.RE

.SS "offset_ptr friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
friend offset_ptr operator+(difference_type diff, offset_ptr right);
.fi

.sp
difference_type +
offset_ptr
operation
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
friend offset_ptr operator+(offset_ptr left, difference_type diff);
.fi

.sp
offset_ptr
+ difference_type operation
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend offset_ptr operator\-(offset_ptr left, difference_type diff);
.fi

.sp
offset_ptr
\- diff operation
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend offset_ptr operator\-(difference_type diff, offset_ptr right);
.fi

.sp
offset_ptr
\- diff operation
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
friend difference_type 
operator\-(const offset_ptr & pt, const offset_ptr & pt2);
.fi

.sp
offset_ptr
\-
offset_ptr
operation
.RE


