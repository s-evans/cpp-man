.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::intrusive::any_member_hook
.SH "SYNOPSIS"
.\" make_any_member_hook: Class template any_member_hook
.\" Class template any_member_hook: make_any_member_hook

.sp
.nf
// In header: <boost/intrusive/any_hook\&.hpp>

template<class\&.\&.\&. Options> 
class any_member_hook : public make_any_member_hook::type< O1, O2, O3 > {
public:
  // construct/copy/destruct
  any_member_hook();
  any_member_hook(const any_member_hook &);
  any_member_hook & operator=(const any_member_hook &);
  ~any_member_hook();

  // public member functions
  bool is_linked() const;
};
.fi
.SH "DESCRIPTION"
.PP
Store this hook in a class to be inserted in an intrusive container\&.
.PP
The hook admits the following options:
void_pointer<>
and
link_mode<>\&.
.PP
link_mode<>
will specify the linking mode of the hook (normal_link
or
safe_link)\&.
.PP
void_pointer<>
is the pointer type that will be used internally in the hook and the container configured to use this hook\&.
.SS "any_member_hook public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
any_member_hook();
.fi

.sp
\fBEffects\fR: If
link_mode
is or
safe_link
initializes the node to an unlinked state\&.
.sp
\fBThrows\fR: Nothing\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
any_member_hook(const any_member_hook &);
.fi

.sp
\fBEffects\fR: If
link_mode
is or
safe_link
initializes the node to an unlinked state\&. The argument is ignored\&.
.sp
\fBThrows\fR: Nothing\&.
.sp
\fBRationale\fR: Providing a copy\-constructor makes classes using the hook STL\-compliant without forcing the user to do some additional work\&.
swap
can be used to emulate move\-semantics\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
any_member_hook & operator=(const any_member_hook &);
.fi

.sp
\fBEffects\fR: Empty function\&. The argument is ignored\&.
.sp
\fBThrows\fR: Nothing\&.
.sp
\fBRationale\fR: Providing an assignment operator makes classes using the hook STL\-compliant without forcing the user to do some additional work\&.
swap
can be used to emulate move\-semantics\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
~any_member_hook();
.fi

.sp
\fBEffects\fR: If
link_mode
is
normal_link, the destructor does nothing (ie\&. no code is generated)\&. If
link_mode
is
safe_link
and the object is stored in a container an assertion is raised\&.
.sp
\fBThrows\fR: Nothing\&.
.RE

.SS "any_member_hook public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
bool is_linked() const;
.fi

.sp
\fBPrecondition\fR:
link_mode
must be
safe_link\&.
.sp
\fBReturns\fR: true, if the node belongs to a container, false otherwise\&. This function can be used to test whether
container::iterator_to
will return a valid iterator\&.
.sp
\fBComplexity\fR: Constant
.RE


