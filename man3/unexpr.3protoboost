.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE U" 3 "" "" ""
.SH "NAME"
boost::proto::unexpr \- Lets you inherit the interface of an expression while hiding from Proto the fact that the type is a Proto expression\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/expr\&.hpp>

template<typename Expr> 
struct unexpr :  Expr {
  // construct/copy/destruct
  unexpr(Expr const &);
};
.fi
.SH "DESCRIPTION"
.PP
For an expression type
E,
proto::is_expr<E>::value
is
true, but
proto::is_expr<proto::unexpr<E> >::value
is
false\&.
.SS "unexpr public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
unexpr(Expr const & expr);
.fi

.RE


