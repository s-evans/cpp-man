.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS ABSTRACT" 3 "" "" ""
.SH "NAME"
boost::program_options::abstract_variables_map
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/variables_map\&.hpp>


class abstract_variables_map {
public:
  // construct/copy/destruct
  abstract_variables_map();
  abstract_variables_map(const abstract_variables_map *);
  ~abstract_variables_map();

  // public member functions
  const variable_value & operator[](const std::string &) const;
  void next(abstract_variables_map *);

  // private member functions
  virtual const variable_value & get(const std::string &) const = 0;
};
.fi
.SH "DESCRIPTION"
.PP
Implements string\->string mapping with convenient value casting facilities\&.
.SS "abstract_variables_map public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
abstract_variables_map();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
abstract_variables_map(const abstract_variables_map * next);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
~abstract_variables_map();
.fi

.RE

.SS "abstract_variables_map public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
const variable_value & operator[](const std::string & name) const;
.fi

.sp
Obtains the value of variable \'name\', from *this and possibly from the chain of variable maps\&.
.sp

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
if there\'s no value in *this\&.
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
if there\'s next variable map, returns value from it
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
otherwise, returns empty value
.RE
.RS 4

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
if there\'s defaulted value
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
if there\'s next variable map, which has a non\-defaulted value, return that
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
otherwise, return value from *this
.RE
.RS 4

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
if there\'s a non\-defaulted value, returns it\&.
.RE
.RS 4

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void next(abstract_variables_map * next);
.fi

.sp
Sets next variable map, which will be used to find variables not found in *this\&.
.RE

.SS "abstract_variables_map private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual const variable_value & get(const std::string & name) const = 0;
.fi

.sp
Returns value of variable \'name\' stored in *this, or empty value otherwise\&.
.RE


