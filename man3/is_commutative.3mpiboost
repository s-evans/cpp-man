.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLA" 3 "" "" ""
.SH "NAME"
boost::mpi::is_commutative \- Determine if a function object type is commutative\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/mpi/operations\&.hpp>

template<typename Op, typename T> 
struct is_commutative : public false_ {
};
.fi
.SH "DESCRIPTION"
.PP
This trait determines if an operation
Op
is commutative when applied to values of type
T\&. Parallel operations such as
reduce
and
prefix_sum
can be implemented more efficiently with commutative operations\&. To mark an operation as commutative, users should specialize
is_commutative
and derive from the class
mpl::true_\&.

