.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE D" 3 "" "" ""
.SH "NAME"
boost::date_time::day_clock \- A clock providing day level services based on C time_t capabilities\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/date_clock_device\&.hpp>

template<typename date_type> 
class day_clock {
public:
  // types
  typedef date_type::ymd_type ymd_type;

  // public static functions
  static date_type local_day();
  static date_type::ymd_type local_day_ymd();
  static date_type::ymd_type universal_day_ymd();
  static date_type universal_day();

  // private static functions
  static ::std::tm * get_local_time(std::tm &);
  static ::std::tm * get_universal_time(std::tm &);
};
.fi
.SH "DESCRIPTION"
.PP
This clock uses Posix interfaces as its implementation and hence uses the timezone settings of the operating system\&. Incorrect user settings will result in incorrect results for the calls to local_day\&.
.SS "day_clock public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static date_type local_day();
.fi

Get the local day as a date type\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static date_type::ymd_type local_day_ymd();
.fi

Get the local day as a ymd_type\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
static date_type::ymd_type universal_day_ymd();
.fi

Get the current day in universal date as a ymd_type\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
static date_type universal_day();
.fi

Get the UTC day as a date type\&. .RE

.SS "day_clock private static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static ::std::tm * get_local_time(std::tm & result);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static ::std::tm * get_universal_time(std::tm & result);
.fi

.RE


