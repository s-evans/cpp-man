.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::log::sources::basic_channel_logger \- Channel feature implementation\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sources/channel_feature\&.hpp>

template<typename BaseT, typename ChannelT> 
class basic_channel_logger : public BaseT {
public:
  // types
  typedef base_type::char_type                         char_type;          // Character type\&. 
  typedef base_type::final_type                        final_type;         // Final type\&. 
  typedef base_type::threading_model                   threading_model;    // Threading model being used\&. 
  typedef ChannelT                                     channel_type;       // Channel type\&. 
  typedef attributes::mutable_constant< channel_type > channel_attribute;  // Channel attribute type\&. 
  typedef \fIunspecified\fR                                  open_record_lock;   // Lock requirement for the open_record_unlocked method\&. 
  typedef \fIunspecified\fR                                  swap_lock;          // Lock requirement for the swap_unlocked method\&. 

  // member classes/structs/unions

  // Default channel name generator\&.

  struct make_default_channel_name {
    // types
    typedef channel_type result_type;

    // public member functions
    result_type operator()() const;
  };

  // construct/copy/destruct
  basic_channel_logger();
  basic_channel_logger(basic_channel_logger const &);
  basic_channel_logger(basic_channel_logger &&);
  template<typename ArgsT> explicit basic_channel_logger(ArgsT const &);

  // public member functions
  channel_type channel() const;
  void channel(channel_type const &);

  // protected member functions
  channel_attribute const & get_channel_attribute() const;
  template<typename ArgsT> record open_record_unlocked(ArgsT const &);
  void swap_unlocked(basic_channel_logger &);

  // private member functions
  template<typename ArgsT, typename T> 
    record open_record_with_channel_unlocked(ArgsT const &, T const &);
  template<typename ArgsT> 
    record open_record_with_channel_unlocked(ArgsT const &, parameter::void_);
};
.fi
.SH "DESCRIPTION"
.SS "basic_channel_logger public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_channel_logger();
.fi

.sp
Default constructor\&. The constructed logger has the default\-constructed channel name\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_channel_logger(basic_channel_logger const & that);
.fi

.sp
Copy constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
basic_channel_logger(basic_channel_logger && that);
.fi

.sp
Move constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename ArgsT> explicit basic_channel_logger(ArgsT const & args);
.fi

.sp
Constructor with arguments\&. Allows to register a channel name attribute on construction\&.
.sp

.PP
Parameters:
.RS 4
.PP
args
.RS 4
A set of named arguments\&. The following arguments are supported:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
channel
\- a string that represents the channel name
.RE
.RS 4

.RE
.RE
.RE

.SS "basic_channel_logger public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
channel_type channel() const;
.fi

.sp
The observer of the channel name
.sp

.PP
Returns:
.RS 4
The channel name that was set by the logger
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void channel(channel_type const & ch);
.fi

.sp
The setter of the channel name
.sp

.PP
Parameters:
.RS 4
.PP
ch
.RS 4
The channel name to be set for the logger
.RE
.RE
.RE

.SS "basic_channel_logger protected member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
channel_attribute const & get_channel_attribute() const;
.fi

.sp
Channel attribute accessor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename ArgsT> record open_record_unlocked(ArgsT const & args);
.fi

.sp
Unlocked
open_record
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void swap_unlocked(basic_channel_logger & that);
.fi

.sp
Unlocked swap
.RE

.SS "basic_channel_logger private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename ArgsT, typename T> 
  record open_record_with_channel_unlocked(ArgsT const & args, T const & ch);
.fi

The open_record implementation for the case when the channel is specified in log statement\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename ArgsT> 
  record open_record_with_channel_unlocked(ArgsT const & args, 
                                           parameter::void_);
.fi

The open_record implementation for the case when the channel is not specified in log statement\&. .RE


