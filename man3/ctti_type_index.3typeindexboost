.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS CTTI_TYPE_IN" 3 "" "" ""
.SH "NAME"
boost::typeindex::ctti_type_index
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_index/ctti_type_index\&.hpp>


class ctti_type_index {
public:
  // types
  typedef \fIunspecified\fR type_info_t;

  // construct/copy/destruct
  ctti_type_index() noexcept;
  ctti_type_index(const type_info_t &) noexcept;

  // private member functions
  std::size_t get_raw_name_length() const noexcept;

  // public member functions
  const type_info_t & type_info() const noexcept;
  const char * raw_name() const noexcept;
  std::string pretty_name() const;
  std::size_t hash_code() const noexcept;

  // public static functions
  template<typename T> static ctti_type_index type_id() noexcept;
  template<typename T> static ctti_type_index type_id_with_cvr() noexcept;
  template<typename T> 
    static ctti_type_index type_id_runtime(const T &) noexcept;
};
.fi
.SH "DESCRIPTION"
.PP
This class is a wrapper that pretends to work exactly like
stl_type_index, but does not require RTTI support\&.
\fBFor\fR
\fBdescription\fR
\fBof\fR
\fBfunctions\fR
\fBsee\fR
type_index_facade\&.
.PP
This class produces slightly longer type names, so consider using
stl_type_index
in situations when typeid() is working\&.
.SS "ctti_type_index public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
ctti_type_index() noexcept;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
ctti_type_index(const type_info_t & data) noexcept;
.fi

.RE

.SS "ctti_type_index private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
std::size_t get_raw_name_length() const noexcept;
.fi

.RE

.SS "ctti_type_index public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
const type_info_t & type_info() const noexcept;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
const char * raw_name() const noexcept;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
std::string pretty_name() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
std::size_t hash_code() const noexcept;
.fi

.RE

.SS "ctti_type_index public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T> static ctti_type_index type_id() noexcept;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename T> static ctti_type_index type_id_with_cvr() noexcept;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename T> 
  static ctti_type_index type_id_runtime(const T & variable) noexcept;
.fi

.RE


