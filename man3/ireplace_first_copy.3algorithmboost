.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION IREPL" 3 "" "" ""
.SH "NAME"
boost::algorithm::ireplace_first_copy \- Replace first algorithm ( case insensitive )
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/algorithm/string/replace\&.hpp>


template<typename OutputIteratorT, typename Range1T, typename Range2T, 
         typename Range3T> 
  OutputIteratorT 
  ireplace_first_copy(OutputIteratorT Output, const Range1T & Input, 
                      const Range2T & Search, const Range3T & Format, 
                      const std::locale & Loc = std::locale());
template<typename SequenceT, typename Range2T, typename Range1T> 
  SequenceT ireplace_first_copy(const SequenceT & Input, 
                                const Range2T & Search, 
                                const Range1T & Format, 
                                const std::locale & Loc = std::locale());
.fi
.SH "DESCRIPTION"
.PP
Replace the first match of the search substring in the input with the format string\&. The result is a modified copy of the input\&. It is returned as a sequence or copied to the output iterator\&. Searching is case insensitive\&.
.PP

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
The second variant of this function provides the strong exception\-safety guarantee
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
Format
.RS 4
A substitute string
.RE
.PP
Input
.RS 4
An input string
.RE
.PP
Loc
.RS 4
A locale used for case insensitive comparison
.RE
.PP
Output
.RS 4
An output iterator to which the result will be copied
.RE
.PP
Search
.RS 4
A substring to be searched for
.RE
.RE
.PP
Returns:
.RS 4
An output iterator pointing just after the last inserted character or a modified copy of the input
.RE

