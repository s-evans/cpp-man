.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::xpressive::as_xpr \- Makes a literal into a regular expression\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_primitives\&.hpp>


template<typename Literal> \fIunspecified\fR as_xpr(Literal const & literal);
.fi
.SH "DESCRIPTION"
.PP
Use as_xpr() to turn a literal into a regular expression\&. For instance, "foo" >> "bar" will not compile because both operands to the right\-shift operator are const char*, and no such operator exists\&. Use as_xpr("foo") >> "bar" instead\&.
.PP
You can use as_xpr() with character literals in addition to string literals\&. For instance, as_xpr(\'a\') will match an \'a\'\&. You can also complement a character literal, as with ~as_xpr(\'a\')\&. This will match any one character that is not an \'a\'\&.

