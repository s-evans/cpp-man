.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLA" 3 "" "" ""
.SH "NAME"
boost::random::xor_combine_engine
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/xor_combine\&.hpp>

template<typename URNG1, int s1, typename URNG2, int s2> 
class xor_combine_engine {
public:
  // types
  typedef URNG1                   base1_type; 
  typedef URNG2                   base2_type; 
  typedef base1_type::result_type result_type;

  // construct/copy/destruct
  xor_combine_engine();
  xor_combine_engine(const base1_type &, const base2_type &);
  explicit xor_combine_engine(result_type);
  template<typename SeedSeq> explicit xor_combine_engine(SeedSeq &);
  template<typename It> xor_combine_engine(It &, It);

  // public member functions
  void seed();
  void seed(result_type);
  template<typename SeedSeq> void seed(SeedSeq &);
  template<typename It> void seed(It &, It);
  const base1_type & base1() const;
  const base2_type & base2() const;
  result_type operator()();
  template<typename Iter> void generate(Iter, Iter);
  void discard(boost::uintmax_t);

  // public static functions
  static result_type min();
  static result_type max();

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const xor_combine_engine &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, 
               const xor_combine_engine &);
  friend bool operator==(const xor_combine_engine &, 
                         const xor_combine_engine &);
  friend bool operator!=(const xor_combine_engine &, 
                         const xor_combine_engine &);

  // public data members
  static const bool has_fixed_range;
  static const int shift1;
  static const int shift2;
};
.fi
.SH "DESCRIPTION"
.PP
Instantiations of
xor_combine_engine
model a
pseudo\-random number generator
\&. To produce its output it invokes each of the base generators, shifts their results and xors them together\&.
.SS "xor_combine_engine public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
xor_combine_engine();
.fi

.sp
Constructors a
xor_combine_engine
by default constructing both base generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
xor_combine_engine(const base1_type & rng1, const base2_type & rng2);
.fi

.sp
Constructs a
xor_combine
by copying two base generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
explicit xor_combine_engine(result_type v);
.fi

.sp
Constructs a
xor_combine_engine, seeding both base generators with
v\&.
.sp

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
The exact algorithm used by this function may change in the future\&.
.sp .5v
.RE

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename SeedSeq> explicit xor_combine_engine(SeedSeq & seq);
.fi

.sp
Constructs a
xor_combine_engine, seeding both base generators with values produced by
seq\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename It> xor_combine_engine(It & first, It last);
.fi

.sp
Constructs a
xor_combine_engine, seeding both base generators with values from the iterator range [first, last) and changes first to point to the element after the last one used\&. If there are not enough elements in the range to seed both generators, throws
std::invalid_argument\&.
.RE

.SS "xor_combine_engine public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void seed();
.fi

.sp
Calls
seed()
for both base generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void seed(result_type v);
.fi

.sp
seeds
both base generators with
v\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeedSeq> void seed(SeedSeq & seq);
.fi

.sp
seeds
both base generators with values produced by
seq\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename It> void seed(It & first, It last);
.fi

.sp
seeds both base generators with values from the iterator range [first, last) and changes first to point to the element after the last one used\&. If there are not enough elements in the range to seed both generators, throws
std::invalid_argument\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
const base1_type & base1() const;
.fi

.sp
Returns the first base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
const base2_type & base2() const;
.fi

.sp
Returns the second base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
result_type operator()();
.fi

.sp
Returns the next value of the generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
template<typename Iter> void generate(Iter first, Iter last);
.fi

.sp
Fills a range with random values
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
void discard(boost::uintmax_t z);
.fi

.sp
Advances the state of the generator by
z\&.
.RE

.SS "xor_combine_engine public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static result_type min();
.fi

.sp
Returns the smallest value that the generator can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static result_type max();
.fi

.sp
Returns the largest value that the generator can produce\&.
.RE

.SS "xor_combine_engine friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const xor_combine_engine & s);
.fi

.sp
Writes the textual representation of the generator to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const xor_combine_engine & s);
.fi

.sp
Reads the textual representation of the generator from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const xor_combine_engine & x, 
                       const xor_combine_engine & y);
.fi

.sp
Returns true if the two generators will produce identical sequences\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const xor_combine_engine & lhs, 
                       const xor_combine_engine & rhs);
.fi

.sp
Returns true if the two generators will produce different sequences\&.
.RE


