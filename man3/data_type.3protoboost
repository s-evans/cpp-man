.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT DATA_TYPE" 3 "" "" ""
.SH "NAME"
boost::proto::data_type \- The type of proto::data, a key for use when creating a transform environment that associates a piece of data with this type\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/env\&.hpp>


struct data_type {

  // public member functions
  template<typename Value> env<data_type, \fIsee\fR\fI\-\fR\fIbelow\fR> operator=(Value &) const;
  template<typename Value> 
    env<data_type, \fIsee\fR\fI\-\fR\fIbelow\fR> operator=(Value const &) const;
};
.fi
.SH "DESCRIPTION"
.PP
The
proto::data_type
type, along with the
proto::data
global, are declared using the
BOOST_PROTO_DEFINE_ENV_VAR()
macro\&.
.SS "data_type public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Value> 
  env<data_type, \fIsee\fR\fI\-\fR\fIbelow\fR> operator=(Value & value) const;
template<typename Value> 
  env<data_type, \fIsee\fR\fI\-\fR\fIbelow\fR> operator=(Value const & value) const;
.fi

.sp
If
Value
is a specialization
boost::reference_wrapper<T>, this function returns
env<data_type, T &>(value\&.get())\&.
.sp
Else, if the type
Value
is non\-copyable (i\&.e\&., a function, an array, abstract, or an ostream), this function returns
env<data_type, Value \fIcv\fR &>(value), where
\fIcv\fR
is
const
for the second overload, and empty for the first\&.
.sp
Otherwise, this function returns
env<data_type, Value>(value)\&.
.RE


