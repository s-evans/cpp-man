.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS CONTENT" 3 "" "" ""
.SH "NAME"
boost::mpi::content \- A proxy object that transfers the content of an object without its structure\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/mpi/skeleton_and_content\&.hpp>


class content {
public:
  // construct/copy/destruct
  content();
  content(MPI_Datatype, bool = true);
  const content & operator=(MPI_Datatype);

  // public member functions
  MPI_Datatype get_mpi_datatype() const;
  void commit();
};
.fi
.SH "DESCRIPTION"
.PP
The
content
class indicates that Boost\&.MPI should transmit or receive the content of an object, but without any information about the structure of the object\&. It is only meaningful to transmit the content of an object after the receiver has already received the skeleton for the same object\&.
.PP
Most users will not use
content
objects directly\&. Rather, they will invoke
send,
recv, or
broadcast
operations using
get_content()\&.
.SS "content public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
content();
.fi

.sp
Constructs an empty
content
object\&. This object will not be useful for any Boost\&.MPI operations until it is reassigned\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
content(MPI_Datatype d, bool committed = true);
.fi

.sp
This routine initializes the
content
object with an MPI data type that refers to the content of an object without its structure\&.
.sp

.PP
Parameters:
.RS 4
.PP
committed
.RS 4
true
indicates that
MPI_Type_commit
has already been excuted for the data type
d\&.
.RE
.PP
d
.RS 4
the MPI data type referring to the content of the object\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
const content & operator=(MPI_Datatype d);
.fi

.sp
Replace the MPI data type referencing the content of an object\&.
.sp

.PP
Parameters:
.RS 4
.PP
d
.RS 4
the new MPI data type referring to the content of the object\&.
.RE
.RE
.PP
Returns:
.RS 4
*this
.RE
.RE

.SS "content public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
MPI_Datatype get_mpi_datatype() const;
.fi

.sp
Retrieve the MPI data type that refers to the content of the object\&.
.sp

.PP
Returns:
.RS 4
the MPI data type, which should only be transmitted or received using
MPI_BOTTOM
as the address\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void commit();
.fi

.sp
Commit the MPI data type referring to the content of the object\&.
.RE


