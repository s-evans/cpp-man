.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT BACK" 3 "" "" ""
.SH "NAME"
boost::xpressive::op::back \- back is a PolymorphicFunctionObject for fetching the back element of a container\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_actions\&.hpp>


struct back {
  // member classes/structs/unions
  template<typename Sig> 
  struct result {
  };
  template<typename This, typename Sequence> 
  struct result<This(Sequence)> {
    // types
    typedef remove_reference< Sequence >::type                                                                                              sequence_type;
    typedef mpl::if_c< is_const< sequence_type >::value, typename sequence_type::const_reference, typename sequence_type::reference >::type type;         
  };

  // public member functions
  template<typename Sequence> 
    result< back(Sequence &)>::type operator()(Sequence &) const;
};
.fi
.SH "DESCRIPTION"
.SS "back public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Sequence> 
  result< back(Sequence &)>::type operator()(Sequence & seq) const;
.fi

.sp

.PP
Parameters:
.RS 4
.PP
seq
.RS 4
The sequence from which to fetch the back\&.
.RE
.RE
.PP
Returns:
.RS 4
seq\&.back()
.RE
.RE


