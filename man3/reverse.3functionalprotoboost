.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT REVERSE" 3 "" "" ""
.SH "NAME"
boost::proto::functional::reverse \- A PolymorphicFunctionObject type that invokes the fusion::reverse() algorithm on its argument\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/functional/fusion/reverse\&.hpp>


struct reverse :  proto::callable {
  // member classes/structs/unions
  template<typename This, typename Seq> 
  struct result<This(Seq)> :  result< This(Seq const &) > {
  };
  template<typename This, typename Seq> 
  struct result<This(Seq &)> :  fusion::result_of::reverse< Seq > {
  };

  // public member functions
  template<typename Seq> 
    typename fusion::result_of::reverse< Seq >::type operator()(Seq &) const;
  template<typename Seq> 
    typename fusion::result_of::reverse< Seq const >::type 
    operator()(Seq const &) const;
};
.fi
.SH "DESCRIPTION"
.PP
A
PolymorphicFunctionObject
type that invokes the
fusion::reverse()
algorithm on its argument\&. This is useful for defining a
CallableTransform
like
reverse(_), which reverses the order of the children of a Proto expression node\&.
.SS "reverse public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Seq> 
  typename fusion::result_of::reverse< Seq >::type operator()(Seq & seq) const;
.fi

.PP
Returns:
.RS 4
fusion::reverse(seq)
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename Seq> 
  typename fusion::result_of::reverse< Seq const >::type 
  operator()(Seq const & seq) const;
.fi

.PP
Returns:
.RS 4
fusion::reverse(seq)
.RE
.RE


