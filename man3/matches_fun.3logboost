.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT MATCHES_FUN" 3 "" "" ""
.SH "NAME"
boost::log::matches_fun \- The regex matching functor\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/functional/matches\&.hpp>


struct matches_fun {
  // types
  typedef bool result_type;

  // public member functions
  template<typename StringT, typename ExpressionT> 
    bool operator()(StringT const &, ExpressionT const &) const;
  template<typename StringT, typename ExpressionT, typename ArgT> 
    bool operator()(StringT const &, ExpressionT const &, ArgT const &) const;
};
.fi
.SH "DESCRIPTION"
.SS "matches_fun public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename StringT, typename ExpressionT> 
  bool operator()(StringT const & str, ExpressionT const & expr) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename StringT, typename ExpressionT, typename ArgT> 
  bool operator()(StringT const & str, ExpressionT const & expr, 
                  ArgT const & arg) const;
.fi

.RE


