.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE I" 3 "" "" ""
.SH "NAME"
boost::interprocess::iset_index
.SH "SYNOPSIS"
.\" value_type: Class template iset_index
.\" Class template iset_index: value_type
.\" shrink_to_fit: Class template iset_index
.\" Class template iset_index: shrink_to_fit
.\" reserve: Class template iset_index
.\" Class template iset_index: reserve
.\" iterator: Class template iset_index
.\" Class template iset_index: iterator
.\" iset_index_aux: Class template iset_index
.\" Class template iset_index: iset_index_aux
.\" insert_commit_data: Class template iset_index
.\" Class template iset_index: insert_commit_data
.\" find: Class template iset_index
.\" Class template iset_index: find
.\" const_iterator: Class template iset_index
.\" Class template iset_index: const_iterator

.sp
.nf
// In header: <boost/interprocess/indexes/iset_index\&.hpp>

template<typename MapConfig> 
class iset_index : public iset_index_aux::index_t< MapConfig > {
public:
  // types
  typedef index_type::iterator           iterator;          
  typedef index_type::const_iterator     const_iterator;    
  typedef index_type::insert_commit_data insert_commit_data;
  typedef index_type::value_type         value_type;        

  // construct/copy/destruct
  iset_index(typename MapConfig::segment_manager_base *);

  // public member functions
  void reserve(typename MapConfig::segment_manager_base::size_type);
  void shrink_to_fit();
  iterator find(const intrusive_compare_key_type &);
  const_iterator find(const intrusive_compare_key_type &) const;
  std::pair< iterator, bool > 
  insert_check(const intrusive_compare_key_type &, insert_commit_data &);
};
.fi
.SH "DESCRIPTION"
.PP
Index type based in boost::intrusive::set\&. Just derives from boost::intrusive::set and defines the interface needed by managed memory segments
.SS "iset_index public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
iset_index(typename MapConfig::segment_manager_base *);
.fi

.sp
Constructor\&. Takes a pointer to the segment manager\&. Can throw
.RE

.SS "iset_index public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" reserve: Class template iset_index
.\" Class template iset_index: reserve

.sp

.nf
void reserve(typename MapConfig::segment_manager_base::size_type);
.fi

.sp
This reserves memory to optimize the insertion of n elements in the index
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" shrink_to_fit: Class template iset_index
.\" Class template iset_index: shrink_to_fit

.sp

.nf
void shrink_to_fit();
.fi

This frees all unnecessary memory\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
.\" find: Class template iset_index
.\" Class template iset_index: find

.sp

.nf
iterator find(const intrusive_compare_key_type & key);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" find: Class template iset_index
.\" Class template iset_index: find

.sp

.nf
const_iterator find(const intrusive_compare_key_type & key) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
std::pair< iterator, bool > 
insert_check(const intrusive_compare_key_type & key, 
             insert_commit_data & commit_data);
.fi

.RE


