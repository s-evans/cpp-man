.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::type_erasure::is_subconcept
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_erasure/is_subconcept\&.hpp>

template<typename Sub, typename Super, typename PlaceholderMap = void> 
struct is_subconcept {
};
.fi
.SH "DESCRIPTION"
.PP
is_subconcept
is a boolean metafunction that determines whether one concept is a sub\-concept of another\&.
.PP

.sp
.if n \{\
.RS 4
.\}
.nf
is_subconcept<incrementable<>, incrementable<> >             \-> true
is_subconcept<incrementable<>, addable<> >                   \-> false
is_subconcept<incrementable<_a>, forward_iterator<_iter>,
  mpl::map<mpl::pair<_a, _iter> > >                          \-> true

.fi
.if n \{\
.RE
.\}

.PP

.SS "Template Parameters"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
typename Sub
.fi

.sp
The sub concept
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
typename Super
.fi

.sp
The super concept
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
typename PlaceholderMap = void
.fi

.sp
(optional) An MPL map with keys for every non\-deduced placeholder in Sub\&. The associated value of each key is the corresponding placeholder in Super\&. If PlaceholderMap is omitted, Super and Sub are presumed to use the same set of placeholders\&.
.RE


