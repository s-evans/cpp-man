.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::xpressive::basic_regex \- Class template basic_regex<> is a class for holding a compiled regular expression\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/basic_regex\&.hpp>

template<typename BidiIter> 
struct basic_regex {
  // types
  typedef BidiIter                            iterator_type;
  typedef iterator_value< BidiIter >::type    char_type;    
  typedef iterator_value< BidiIter >::type    value_type;   
  typedef \fIunspecified\fR                         string_type;  
  typedef regex_constants::syntax_option_type flag_type;    

  // construct/copy/destruct
  basic_regex();
  basic_regex(basic_regex< BidiIter > const &);
  template<typename Expr> basic_regex(Expr const &);
  basic_regex< BidiIter > & operator=(basic_regex< BidiIter > const &);
  template<typename Expr> basic_regex< BidiIter > & operator=(Expr const &);

  // public member functions
  std::size_t mark_count() const;
  regex_id_type regex_id() const;
  void swap(basic_regex< BidiIter > &);

  // public static functions
  template<typename InputIter> 
    static basic_regex< BidiIter > 
    compile(InputIter, InputIter, flag_type = regex_constants::ECMAScript);
  template<typename InputRange> 
    static basic_regex< BidiIter > 
    compile(InputRange const &, flag_type = regex_constants::ECMAScript);
  static basic_regex< BidiIter > 
  compile(char_type const *, flag_type = regex_constants::ECMAScript);
  static basic_regex< BidiIter > 
  compile(char_type const *, std::size_t, flag_type);

  // public data members
  static regex_constants::syntax_option_type const ECMAScript;
  static regex_constants::syntax_option_type const icase;
  static regex_constants::syntax_option_type const nosubs;
  static regex_constants::syntax_option_type const optimize;
  static regex_constants::syntax_option_type const collate;
  static regex_constants::syntax_option_type const single_line;
  static regex_constants::syntax_option_type const not_dot_null;
  static regex_constants::syntax_option_type const not_dot_newline;
  static regex_constants::syntax_option_type const ignore_white_space;
};
.fi
.SH "DESCRIPTION"
.SS "basic_regex public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_regex();
.fi

.sp

.PP
Postconditions:
.RS 4
regex_id() == 0
.RE
.PP
Postconditions:
.RS 4
mark_count() == 0
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_regex(basic_regex< BidiIter > const & that);
.fi

.sp

.PP
Parameters:
.RS 4
.PP
that
.RS 4
The
basic_regex
object to copy\&.
.RE
.RE
.PP
Postconditions:
.RS 4
regex_id() == that\&.regex_id()
.RE
.PP
Postconditions:
.RS 4
mark_count() == that\&.mark_count()
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename Expr> basic_regex(Expr const & expr);
.fi

.sp
Construct from a static regular expression\&.
.sp

.PP
Parameters:
.RS 4
.PP
expr
.RS 4
The static regular expression
.RE
.RE
.PP
Requires:
.RS 4
Expr is the type of a static regular expression\&.
.RE
.PP
Postconditions:
.RS 4
regex_id() != 0
.RE
.PP
Postconditions:
.RS 4
mark_count() >= 0
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
basic_regex< BidiIter > & operator=(basic_regex< BidiIter > const & that);
.fi

.sp

.PP
Parameters:
.RS 4
.PP
that
.RS 4
The
basic_regex
object to copy\&.
.RE
.RE
.PP
Postconditions:
.RS 4
regex_id() == that\&.regex_id()
.RE
.PP
Postconditions:
.RS 4
mark_count() == that\&.mark_count()
.RE
.PP
Returns:
.RS 4
*this
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename Expr> basic_regex< BidiIter > & operator=(Expr const & expr);
.fi

.sp
Construct from a static regular expression\&.
.sp

.PP
Parameters:
.RS 4
.PP
expr
.RS 4
The static regular expression\&.
.RE
.RE
.PP
Requires:
.RS 4
Expr is the type of a static regular expression\&.
.RE
.PP
Postconditions:
.RS 4
regex_id() != 0
.RE
.PP
Postconditions:
.RS 4
mark_count() >= 0
.RE
.PP
Returns:
.RS 4
*this
.RE
.PP
Throws:
.RS 4
std::bad_alloc on out of memory
.RE
.RE

.SS "basic_regex public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
std::size_t mark_count() const;
.fi

.sp
Returns the count of capturing sub\-expressions in this regular expression
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
regex_id_type regex_id() const;
.fi

.sp
Returns a token which uniquely identifies this regular expression\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void swap(basic_regex< BidiIter > & that);
.fi

.sp
Swaps the contents of this
basic_regex
object with another\&.
.sp

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
This is a shallow swap that does not do reference tracking\&. If you embed a
basic_regex
object by reference in another regular expression and then swap its contents with another
basic_regex
object, the change will not be visible to the enclosing regular expression\&. It is done this way to ensure that swap() cannot throw\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
that
.RS 4
The other
basic_regex
object\&.
.RE
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE

.SS "basic_regex public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename InputIter> 
  static basic_regex< BidiIter > 
  compile(InputIter begin, InputIter end, 
          flag_type flags = regex_constants::ECMAScript);
.fi

.sp
Factory method for building a regex object from a range of characters\&. Equivalent to
regex_compiler< BidiIter >()\&.compile(begin, end, flags);
.sp

.PP
Parameters:
.RS 4
.PP
begin
.RS 4
The beginning of a range of characters representing the regular expression to compile\&.
.RE
.PP
end
.RS 4
The end of a range of characters representing the regular expression to compile\&.
.RE
.PP
flags
.RS 4
Optional bitmask that determines how the pat string is interpreted\&. (See syntax_option_type\&.)
.RE
.RE
.PP
Requires:
.RS 4
[begin,end) is a valid range\&.
.RE
.PP
Requires:
.RS 4
The range of characters specified by [begin,end) contains a valid string\-based representation of a regular expression\&.
.RE
.PP
Returns:
.RS 4
A
basic_regex
object corresponding to the regular expression represented by the character range\&.
.RE
.PP
Throws:
.RS 4
regex_error
when the range of characters has invalid regular expression syntax\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename InputRange> 
  static basic_regex< BidiIter > 
  compile(InputRange const & pat, 
          flag_type flags = regex_constants::ECMAScript);
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
static basic_regex< BidiIter > 
compile(char_type const * begin, 
        flag_type flags = regex_constants::ECMAScript);
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
static basic_regex< BidiIter > 
compile(char_type const * begin, std::size_t len, flag_type flags);
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


