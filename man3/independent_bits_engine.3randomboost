.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::random::independent_bits_engine
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/independent_bits\&.hpp>

template<typename Engine, std::size_t w, typename UIntType> 
class independent_bits_engine {
public:
  // types
  typedef Engine   base_type;  
  typedef UIntType result_type;

  // construct/copy/destruct
  independent_bits_engine();
  explicit independent_bits_engine(result_type);
  template<typename SeedSeq> explicit independent_bits_engine(SeedSeq &);
  independent_bits_engine(const base_type &);
  template<typename It> independent_bits_engine(It &, It);

  // public static functions
  static result_type min();
  static result_type max();

  // public member functions
  void seed();
  void seed(result_type);
  template<typename SeedSeq> void seed(SeedSeq &);
  template<typename It> void seed(It &, It);
  result_type operator()();
  template<typename Iter> void generate(Iter, Iter);
  void discard(boost::uintmax_t);
  const base_type & base() const;

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const independent_bits_engine &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, 
               const independent_bits_engine &);
  friend bool operator==(const independent_bits_engine &, 
                         const independent_bits_engine &);
  friend bool operator!=(const independent_bits_engine &, 
                         const independent_bits_engine &);

  // public data members
  static const bool has_fixed_range;
};
.fi
.SH "DESCRIPTION"
.PP
An instantiation of class template
independent_bits_engine
model a
pseudo\-random number generator
\&. It generates random numbers distributed between [0, 2^w) by combining one or more invocations of the base engine\&.
.PP
Requires: 0 < w <= std::numeric_limits<UIntType>::digits
.SS "independent_bits_engine public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
independent_bits_engine();
.fi

.sp
Constructs an
independent_bits_engine
using the default constructor of the base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit independent_bits_engine(result_type seed);
.fi

.sp
Constructs an
independent_bits_engine, using seed as the constructor argument for both base generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeedSeq> explicit independent_bits_engine(SeedSeq & seq);
.fi

.sp
Constructs an
independent_bits_engine, using seq as the constructor argument for the base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
independent_bits_engine(const base_type & base_arg);
.fi

.sp
Constructs an
independent_bits_engine
by copying
base\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename It> independent_bits_engine(It & first, It last);
.fi

.sp
Contructs an
independent_bits_engine
with values from the range defined by the input iterators first and last\&. first will be modified to point to the element after the last one used\&.
.sp
Throws:
std::invalid_argument
if the input range is too small\&.
.sp
Exception Safety: Basic
.RE

.SS "independent_bits_engine public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static result_type min();
.fi

.sp
Returns the smallest value that the generator can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static result_type max();
.fi

.sp
Returns the largest value that the generator can produce\&.
.RE

.SS "independent_bits_engine public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void seed();
.fi

.sp
Seeds an
independent_bits_engine
using the default seed of the base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void seed(result_type seed);
.fi

.sp
Seeds an
independent_bits_engine, using
seed
as the seed for the base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeedSeq> void seed(SeedSeq & seq);
.fi

.sp
Seeds an
independent_bits_engine, using
seq
to seed the base generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename It> void seed(It & first, It last);
.fi

.sp
Seeds an
independent_bits_engine
with values from the range defined by the input iterators first and last\&. first will be modified to point to the element after the last one used\&.
.sp
Throws:
std::invalid_argument
if the input range is too small\&.
.sp
Exception Safety: Basic
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
result_type operator()();
.fi

.sp
Returns the next value of the generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
template<typename Iter> void generate(Iter first, Iter last);
.fi

.sp
Fills a range with random values
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void discard(boost::uintmax_t z);
.fi

.sp
Advances the state of the generator by
z\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
const base_type & base() const;
.fi

.RE

.SS "independent_bits_engine friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const independent_bits_engine & r);
.fi

.sp
Writes the textual representation if the generator to a
std::ostream\&. The textual representation of the engine is the textual representation of the base engine\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const independent_bits_engine & r);
.fi

.sp
Reads the state of an
independent_bits_engine
from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const independent_bits_engine & x, 
                       const independent_bits_engine & y);
.fi

.sp
Returns: true iff the two
independent_bits_engines
will produce the same sequence of values\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const independent_bits_engine & lhs, 
                       const independent_bits_engine & rhs);
.fi

.sp
Returns: true iff the two
independent_bits_engines
will produce different sequences of values\&.
.RE


