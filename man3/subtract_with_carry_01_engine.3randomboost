.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS " 3 "" "" ""
.SH "NAME"
boost::random::subtract_with_carry_01_engine
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/subtract_with_carry\&.hpp>

template<typename RealType, std::size_t w, std::size_t s, std::size_t r> 
class subtract_with_carry_01_engine {
public:
  // types
  typedef RealType result_type;

  // construct/copy/destruct
  subtract_with_carry_01_engine();
  explicit subtract_with_carry_01_engine(boost::uint32_t);
  template<typename SeedSeq> explicit subtract_with_carry_01_engine(SeedSeq &);
  template<typename It> subtract_with_carry_01_engine(It &, It);

  // public member functions
  void seed();
  void seed(boost::uint32_t);
  template<typename SeedSeq> void seed(SeedSeq &);
  template<typename It> void seed(It &, It);
  result_type operator()();
  void discard(boost::uintmax_t);
  template<typename Iter> void generate(Iter, Iter);

  // public static functions
  static result_type min();
  static result_type max();

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const subtract_with_carry_01_engine &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, 
               const subtract_with_carry_01_engine &);
  friend bool operator==(const subtract_with_carry_01_engine &, 
                         const subtract_with_carry_01_engine &);
  friend bool operator!=(const subtract_with_carry_01_engine &, 
                         const subtract_with_carry_01_engine &);

  // public data members
  static const bool has_fixed_range;
  static const std::size_t word_size;
  static const std::size_t long_lag;
  static const std::size_t short_lag;
  static const boost::uint32_t default_seed;
};
.fi
.SH "DESCRIPTION"
.PP
Instantiations of
subtract_with_carry_01_engine
model a
pseudo\-random number generator
\&. The algorithm is described in
.PP

.PP "A New Class of Random Number Generators", George Marsaglia and Arif Zaman, Annals of Applied Probability, Volume 1, Number 3 (1991), 462\-480\&.
.SS "subtract_with_carry_01_engine public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
subtract_with_carry_01_engine();
.fi

.sp
Creates a new
subtract_with_carry_01_engine
using the default seed\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit subtract_with_carry_01_engine(boost::uint32_t value);
.fi

.sp
Creates a new
subtract_with_carry_01_engine
and seeds it with value\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeedSeq> 
  explicit subtract_with_carry_01_engine(SeedSeq & seq);
.fi

.sp
Creates a new
subtract_with_carry_01_engine
and seeds with values produced by seq\&.generate()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename It> subtract_with_carry_01_engine(It & first, It last);
.fi

.sp
Creates a new
subtract_with_carry_01_engine
and seeds it with values from a range\&. Advances first to point one past the last consumed value\&. If the range does not contain enough elements to fill the entire state, throws
std::invalid_argument\&.
.RE

.SS "subtract_with_carry_01_engine public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void seed();
.fi

.sp
Seeds the generator with the default seed\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void seed(boost::uint32_t value);
.fi

.sp
Seeds the generator with
value\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeedSeq> void seed(SeedSeq & seq);
.fi

.sp
Seeds the generator with values produced by
seq\&.generate()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename It> void seed(It & first, It last);
.fi

.sp
Seeds the generator with values from a range\&. Updates first to point one past the last consumed element\&. If there are not enough elements in the range to fill the entire state, throws
std::invalid_argument\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
result_type operator()();
.fi

.sp
Returns the next value of the generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void discard(boost::uintmax_t z);
.fi

.sp
Advances the state of the generator by
z\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename Iter> void generate(Iter first, Iter last);
.fi

.sp
Fills a range with random values\&.
.RE

.SS "subtract_with_carry_01_engine public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static result_type min();
.fi

.sp
Returns the smallest value that the generator can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static result_type max();
.fi

.sp
Returns the largest value that the generator can produce\&.
.RE

.SS "subtract_with_carry_01_engine friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const subtract_with_carry_01_engine & f);
.fi

.sp
Writes a
subtract_with_carry_01_engine
to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const subtract_with_carry_01_engine & f);
.fi

.sp
Reads a
subtract_with_carry_01_engine
from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const subtract_with_carry_01_engine & x, 
                       const subtract_with_carry_01_engine & y);
.fi

.sp
Returns true if the two generators will produce identical sequences\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const subtract_with_carry_01_engine & lhs, 
                       const subtract_with_carry_01_engine & rhs);
.fi

.sp
Returns true if the two generators will produce different sequences\&.
.RE


