.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMP" 3 "" "" ""
.SH "NAME"
boost::units::power_typeof_helper
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/units/operators\&.hpp>

template<typename BaseType, typename Exponent> 
struct power_typeof_helper {
  // types
  typedef \fIunspecified\fR type;  // specifies the result type 

  // public static functions
  static type value(const BaseType &);
};
.fi
.SH "DESCRIPTION"
.PP
A helper used by
pow
to raise a runtime object to a compile time known exponent\&. This template is intended to be specialized\&. All specializations must conform to the interface shown here\&.
Exponent
will be either the exponent passed to
pow
or
static_rational<N>
for and integer argument, N\&.
.SS "power_typeof_helper public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static type value(const BaseType & base);
.fi

Carries out the runtime calculation\&. .RE


