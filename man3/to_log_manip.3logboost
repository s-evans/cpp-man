.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::log::to_log_manip \- Generic manipulator for customizing output to log\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/manipulators/to_log\&.hpp>

template<typename T, typename TagT = void> 
class to_log_manip {
public:
  // types
  typedef T    value_type;  // Output value type\&. 
  typedef TagT tag_type;    // Value tag type\&. 

  // construct/copy/destruct
  explicit to_log_manip(value_type const &) noexcept;
  to_log_manip(to_log_manip const &) noexcept;

  // public member functions
  value_type const & get() const noexcept;
};
.fi
.SH "DESCRIPTION"
.SS "to_log_manip public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit to_log_manip(value_type const & value) noexcept;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
to_log_manip(to_log_manip const & that) noexcept;
.fi

.RE

.SS "to_log_manip public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
value_type const & get() const noexcept;
.fi

.RE


