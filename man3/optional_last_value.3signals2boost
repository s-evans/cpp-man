.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::signals2::optional_last_value \- Evaluate an InputIterator sequence and return a boost::optional which contains the last value in the sequence, or an empty boost::optional if the sequence was empty\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/signals2/optional_last_value\&.hpp>

template<typename T> 
class optional_last_value {
public:
  // types
  typedef boost::optional<T> result_type;

  // invocation
  template<typename InputIterator> 
    result_type operator()(InputIterator, InputIterator) const;
};
.fi
.SH "DESCRIPTION"
.PP

optional_last_value
is the default Combiner template type for signals in the Boost\&.Signals2 library\&. The advantage of
optional_last_value
over
signals2::last_value
is that
optional_last_value
can return an empty boost::optional\&. rather than throwing an exception, when its
InputIterator
sequence is empty\&.
.SS "optional_last_value invocation"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename InputIterator> 
  result_type operator()(InputIterator first, InputIterator last) const;
.fi

.PP
Effects:
.RS 4
Attempts to dereference every iterator in the sequence
[first, last)\&.
.RE
.PP
Returns:
.RS 4
The result of the last successful iterator dereference, wrapped in a boost::optional\&. The returned
optional
will be empty if no iterators were dereferenced\&.
.RE
.PP
Throws:
.RS 4
Does not throw\&.
.RE
.RE

.SS "Specializations"

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Class optional_last_value<void>
.RE

