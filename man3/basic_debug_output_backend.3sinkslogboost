.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TE" 3 "" "" ""
.SH "NAME"
boost::log::sinks::basic_debug_output_backend \- An implementation of a logging sink backend that outputs to the debugger\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/debug_output_backend\&.hpp>

template<typename CharT> 
class basic_debug_output_backend :
  public basic_formatted_sink_backend< CharT, concurrent_feeding >
{
public:
  // types
  typedef base_type::char_type   char_type;    // Character type\&. 
  typedef base_type::string_type string_type;  // String type to be used as a message text holder\&. 

  // construct/copy/destruct
  basic_debug_output_backend();
  ~basic_debug_output_backend();

  // public member functions
  void consume(record_view const &, string_type const &);
};
.fi
.SH "DESCRIPTION"
.PP
The sink uses Windows API in order to write log records as debug messages, if the application process is run under debugger\&. The sink backend also provides a specific filter that allows to check whether the debugger is available and thus elide unnecessary formatting\&.
.SS "basic_debug_output_backend public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_debug_output_backend();
.fi

.sp
Constructor\&. Initializes the sink backend\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~basic_debug_output_backend();
.fi

.sp
Destructor
.RE

.SS "basic_debug_output_backend public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void consume(record_view const & rec, string_type const & formatted_message);
.fi

.sp
The method passes the formatted message to debugger
.RE


