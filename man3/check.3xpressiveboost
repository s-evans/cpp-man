.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::xpressive::check \- For adding user\-defined assertions to your regular expressions\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_actions\&.hpp>


template<typename T> \fIunspecified\fR check(T const & t);
.fi
.SH "DESCRIPTION"
.PP
A
user\-defined assertion
is a kind of semantic action that evaluates a Boolean lambda and, if it evaluates to false, causes the match to fail at that location in the string\&. This will cause backtracking, so the match may ultimately succeed\&.
.PP
To use
check()
to specify a user\-defined assertion in a regex, use the following syntax:
.sp
.if n \{\
.RS 4
.\}
.nf
sregex s = (_d >> _d)[check( XXX )]; // XXX is a custom assertion

.fi
.if n \{\
.RE
.\}
.sp
The assertion is evaluated with a
sub_match<>
object that delineates what part of the string matched the sub\-expression to which the assertion was attached\&.
.PP
check()
can be used with an ordinary predicate that takes a
sub_match<>
object as follows:
.sp
.if n \{\
.RS 4
.\}
.nf
// A predicate that is true IFF a sub\-match is
// either 3 or 6 characters long\&.
struct three_or_six
{
    bool operator()(ssub_match const &sub) const
    {
        return sub\&.length() == 3 || sub\&.length() == 6;
    }
};

// match words of 3 characters or 6 characters\&.
sregex rx = (bow >> +_w >> eow)[ check(three_or_six()) ] ;

.fi
.if n \{\
.RE
.\}
.sp
Alternately,
check()
can be used to define inline custom assertions with the same syntax as is used to define semantic actions\&. The following code is equivalent to above:
.sp
.if n \{\
.RS 4
.\}
.nf
// match words of 3 characters or 6 characters\&.
sregex rx = (bow >> +_w >> eow)[ check(length(_)==3 || length(_)==6) ] ;

.fi
.if n \{\
.RE
.\}
.sp
Within a custom assertion,
_
is a placeholder for the
sub_match<>
That delineates the part of the string matched by the sub\-expression to which the custom assertion was attached\&.
.PP
Parameters:
.RS 4
.PP
t
.RS 4
The UnaryPredicate object or Boolean semantic action\&.
.RE
.RE

