.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS NAMED_SEMAPH" 3 "" "" ""
.SH "NAME"
boost::interprocess::named_semaphore
.SH "SYNOPSIS"
.\" wait: Class named_semaphore
.\" Class named_semaphore: wait
.\" try_wait: Class named_semaphore
.\" Class named_semaphore: try_wait
.\" timed_wait: Class named_semaphore
.\" Class named_semaphore: timed_wait
.\" remove: Class named_semaphore
.\" Class named_semaphore: remove
.\" post: Class named_semaphore
.\" Class named_semaphore: post
.\" named_semaphore: Class named_semaphore
.\" Class named_semaphore: named_semaphore
.\" named_semaphore: Class named_semaphore
.\" Class named_semaphore: named_semaphore

.sp
.nf
// In header: <boost/interprocess/sync/named_semaphore\&.hpp>


class named_semaphore {
public:
  // construct/copy/destruct
  named_semaphore(create_only_t, const char *, unsigned int, 
                  const permissions & = permissions());
  named_semaphore(open_or_create_t, const char *, unsigned int, 
                  const permissions & = permissions());
  named_semaphore(open_only_t, const char *);
  ~named_semaphore();

  // public member functions
  void post();
  void wait();
  bool try_wait();
  bool timed_wait(const boost::posix_time::ptime &);

  // public static functions
  static bool remove(const char *);
};
.fi
.SH "DESCRIPTION"
.PP
A semaphore with a global name, so it can be found from different processes\&. Allows several resource sharing patterns and efficient acknowledgment mechanisms\&.
.SS "named_semaphore public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
named_semaphore(create_only_t, const char * name, unsigned int initialCount, 
                const permissions & perm = permissions());
.fi

.sp
Creates a global semaphore with a name, and an initial count\&. If the semaphore can\'t be created throws
interprocess_exception
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" named_semaphore: Class named_semaphore
.\" Class named_semaphore: named_semaphore

.sp

.nf
named_semaphore(open_or_create_t, const char * name, 
                unsigned int initialCount, 
                const permissions & perm = permissions());
.fi

.sp
Opens or creates a global semaphore with a name, and an initial count\&. If the semaphore is created, this call is equivalent to
named_semaphore(create_only_t, \&.\&.\&.) If the semaphore is already created, this call is equivalent to
named_semaphore(open_only_t, \&.\&.\&. ) and initialCount is ignored\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
named_semaphore(open_only_t, const char * name);
.fi

.sp
Opens a global semaphore with a name if that semaphore is previously\&. created\&. If it is not previously created this function throws
interprocess_exception\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" remove: Class named_semaphore
.\" Class named_semaphore: remove

.sp

.nf
~named_semaphore();
.fi

.sp
Destroys *this and indicates that the calling process is finished using the resource\&. The destructor function will deallocate any system resources allocated by the system for use by this process for this resource\&. The resource can still be opened again calling the open constructor overload\&. To erase the resource from the system use remove()\&.
.RE

.SS "named_semaphore public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" post: Class named_semaphore
.\" Class named_semaphore: post

.sp

.nf
void post();
.fi

.sp
Increments the semaphore count\&. If there are processes/threads blocked waiting for the semaphore, then one of these processes will return successfully from its wait function\&. If there is an error an
interprocess_exception
exception is thrown\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" wait: Class named_semaphore
.\" Class named_semaphore: wait

.sp

.nf
void wait();
.fi

.sp
Decrements the semaphore\&. If the semaphore value is not greater than zero, then the calling process/thread blocks until it can decrement the counter\&. If there is an error an
interprocess_exception
exception is thrown\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
.\" try_wait: Class named_semaphore
.\" Class named_semaphore: try_wait

.sp

.nf
bool try_wait();
.fi

.sp
Decrements the semaphore if the semaphore\'s value is greater than zero and returns true\&. If the value is not greater than zero returns false\&. If there is an error an
interprocess_exception
exception is thrown\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" timed_wait: Class named_semaphore
.\" Class named_semaphore: timed_wait

.sp

.nf
bool timed_wait(const boost::posix_time::ptime & abs_time);
.fi

.sp
Decrements the semaphore if the semaphore\'s value is greater than zero and returns true\&. Otherwise, waits for the semaphore to the posted or the timeout expires\&. If the timeout expires, the function returns false\&. If the semaphore is posted the function returns true\&. If there is an error throws sem_exception
.RE

.SS "named_semaphore public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" remove: Class named_semaphore
.\" Class named_semaphore: remove

.sp

.nf
static bool remove(const char * name);
.fi

.sp
Erases a named semaphore from the system\&. Returns false on error\&. Never throws\&.
.RE


