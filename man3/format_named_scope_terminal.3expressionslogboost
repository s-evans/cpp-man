.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS T" 3 "" "" ""
.SH "NAME"
boost::log::expressions::format_named_scope_terminal
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/expressions/formatters/named_scope\&.hpp>

template<typename FallbackPolicyT, typename CharT> 
class format_named_scope_terminal {
public:
  // types
  typedef void                                  _is_boost_log_terminal;   // Internal typedef for type categorization\&. 
  typedef attributes::named_scope::value_type   value_type;               // Attribute value type\&. 
  typedef FallbackPolicyT                       fallback_policy;          // Fallback policy\&. 
  typedef CharT                                 char_type;                // Character type\&. 
  typedef std::basic_string< char_type >        string_type;              // String type\&. 
  typedef basic_formatting_ostream< char_type > stream_type;              // Formatting stream type\&. 
  typedef \fIunspecified\fR                           formatter_function_type;  // Formatter function\&. 
  typedef string_type                           result_type;              // Function result type\&. 

  // construct/copy/destruct
  template<typename FormatT> 
    format_named_scope_terminal(attribute_name const &, 
                                fallback_policy const &, FormatT const &, 
                                string_type const &, string_type const &, 
                                string_type const &, value_type::size_type, 
                                scope_iteration_direction);
  format_named_scope_terminal(format_named_scope_terminal const &);
  format_named_scope_terminal() = delete;

  // public member functions
  attribute_name get_name() const;
  fallback_policy const & get_fallback_policy() const;
  formatter_function_type const & get_formatter_function() const;
  template<typename ContextT> result_type operator()(ContextT const &);
  template<typename ContextT> result_type operator()(ContextT const &) const;
};
.fi
.SH "DESCRIPTION"
.PP
Named scope formatter terminal\&.
.SS "format_named_scope_terminal public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename FormatT> 
  format_named_scope_terminal(attribute_name const & name, 
                              fallback_policy const & fallback, 
                              FormatT const & element_format, 
                              string_type const & delimiter, 
                              string_type const & incomplete_marker, 
                              string_type const & empty_marker, 
                              value_type::size_type depth, 
                              scope_iteration_direction direction);
.fi

Initializing constructor\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
format_named_scope_terminal(format_named_scope_terminal const & that);
.fi

Copy constructor\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
format_named_scope_terminal() = delete;
.fi

.RE

.SS "format_named_scope_terminal public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
attribute_name get_name() const;
.fi

Returns attribute name\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
fallback_policy const & get_fallback_policy() const;
.fi

Returns fallback policy\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
formatter_function_type const & get_formatter_function() const;
.fi

Retruns formatter function\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename ContextT> result_type operator()(ContextT const & ctx);
.fi

Invokation operator\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename ContextT> result_type operator()(ContextT const & ctx) const;
.fi

Invokation operator\&. .RE


