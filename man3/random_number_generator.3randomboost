.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::random::random_number_generator
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/random_number_generator\&.hpp>

template<typename URNG, typename IntType = long> 
class random_number_generator {
public:
  // types
  typedef URNG    base_type;    
  typedef IntType argument_type;
  typedef IntType result_type;  

  // construct/copy/destruct
  random_number_generator(base_type &);

  // public member functions
  result_type operator()(argument_type);
};
.fi
.SH "DESCRIPTION"
.PP
Instantiations of class template
random_number_generator
model a RandomNumberGenerator (std:25\&.2\&.11 [lib\&.alg\&.random\&.shuffle])\&. On each invocation, it returns a uniformly distributed integer in the range [0\&.\&.n)\&.
.PP
The template parameter IntType shall denote some integer\-like value type\&.
.SS "random_number_generator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
random_number_generator(base_type & rng);
.fi

.sp
Constructs a
random_number_generator
functor with the given
uniform random number generator
as the underlying source of random numbers\&.
.RE

.SS "random_number_generator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()(argument_type n);
.fi

.sp
Returns a value in the range [0, n)
.RE


