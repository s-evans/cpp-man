.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLA" 3 "" "" ""
.SH "NAME"
boost::random::uniform_on_sphere
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/uniform_on_sphere\&.hpp>

template<typename RealType = double, typename Cont = std::vector<RealType> > 
class uniform_on_sphere {
public:
  // types
  typedef RealType input_type; 
  typedef Cont     result_type;

  // member classes/structs/unions

  class param_type {
  public:
    // types
    typedef uniform_on_sphere distribution_type;

    // construct/copy/destruct
    explicit param_type(int = 2);

    // public member functions
    int dim() const;

    // friend functions
    template<typename CharT, typename Traits> 
      friend std::basic_ostream< CharT, Traits > & 
      operator<<(std::basic_ostream< CharT, Traits > &, const param_type &);
    template<typename CharT, typename Traits> 
      friend std::basic_istream< CharT, Traits > & 
      operator>>(std::basic_istream< CharT, Traits > &, const param_type &);
    friend bool operator==(const param_type &, const param_type &);
    friend bool operator!=(const param_type &, const param_type &);
  };

  // construct/copy/destruct
  explicit uniform_on_sphere(int = 2);
  explicit uniform_on_sphere(const param_type &);

  // public member functions
  int dim() const;
  param_type param() const;
  void param(const param_type &);
  result_type min() const;
  result_type max() const;
  void reset();
  template<typename Engine> const result_type & operator()(Engine &);
  template<typename Engine> 
    result_type operator()(Engine &, const param_type &) const;

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const uniform_on_sphere &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, 
               const uniform_on_sphere &);
  friend bool operator==(const uniform_on_sphere &, const uniform_on_sphere &);
  friend bool operator!=(const uniform_on_sphere &, const uniform_on_sphere &);
};
.fi
.SH "DESCRIPTION"
.PP
Instantiations of class template
uniform_on_sphere
model a
random distribution
\&. Such a distribution produces random numbers uniformly distributed on the unit sphere of arbitrary dimension
dim\&. The
Cont
template parameter must be a STL\-like container type with begin and end operations returning non\-const ForwardIterators of type
Cont::iterator\&.
.SS "uniform_on_sphere public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit uniform_on_sphere(int dim = 2);
.fi

.sp
Constructs a
uniform_on_sphere
distribution\&.
dim
is the dimension of the sphere\&.
.sp
Requires: dim >= 0
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit uniform_on_sphere(const param_type & param);
.fi

.sp
Constructs a
uniform_on_sphere
distribution from its parameters\&.
.RE

.SS "uniform_on_sphere public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
int dim() const;
.fi

.sp
Returns the dimension of the sphere\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
param_type param() const;
.fi

.sp
Returns the parameters of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void param(const param_type & param);
.fi

.sp
Sets the parameters of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
result_type min() const;
.fi

.sp
Returns the smallest value that the distribution can produce\&. Note that this is required to approximate the standard library\'s requirements\&. The behavior is defined according to lexicographical comparison so that for a container type of std::vector, dist\&.min() <= x <= dist\&.max() where x is any value produced by the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
result_type max() const;
.fi

.sp
Returns the largest value that the distribution can produce\&. Note that this is required to approximate the standard library\'s requirements\&. The behavior is defined according to lexicographical comparison so that for a container type of std::vector, dist\&.min() <= x <= dist\&.max() where x is any value produced by the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void reset();
.fi

.sp
Effects: Subsequent uses of the distribution do not depend on values produced by any engine prior to invoking reset\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename Engine> const result_type & operator()(Engine & eng);
.fi

.sp
Returns a point uniformly distributed over the surface of a sphere of dimension dim()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
template<typename Engine> 
  result_type operator()(Engine & eng, const param_type & param) const;
.fi

.sp
Returns a point uniformly distributed over the surface of a sphere of dimension param\&.dim()\&.
.RE

.SS "uniform_on_sphere friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const uniform_on_sphere & sd);
.fi

.sp
Writes the distribution to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const uniform_on_sphere & sd);
.fi

.sp
Reads the distribution from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const uniform_on_sphere & lhs, 
                       const uniform_on_sphere & rhs);
.fi

.sp
Returns true if the two distributions will produce identical sequences of values, given equal generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const uniform_on_sphere & lhs, 
                       const uniform_on_sphere & rhs);
.fi

.sp
Returns true if the two distributions may produce different sequences of values, given equal generators\&.
.RE


