.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::log::sources::severity_logger \- Narrow\-char logger\&. Functionally equivalent to basic_severity_logger\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sources/severity_logger\&.hpp>

template<typename LevelT = int> 
class severity_logger : public basic_composite_logger< char, severity_logger< LevelT >, single_thread_model, features< severity< LevelT > > >
{
public:
  // construct/copy/destruct
  severity_logger();
  severity_logger(severity_logger const &);
  template<typename\&.\&.\&. ArgsT> explicit severity_logger(ArgsT\&.\&.\&.const &);
  explicit severity_logger(LevelT);
  severity_logger & operator=(severity_logger const &);
};
.fi
.SH "DESCRIPTION"
.PP
See
severity
class template for a more detailed description
.SS "severity_logger public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
severity_logger();
.fi

.sp
Default constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
severity_logger(severity_logger const & that);
.fi

.sp
Copy constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename\&.\&.\&. ArgsT> explicit severity_logger(ArgsT\&.\&.\&.const & args);
.fi

.sp
Constructor with named arguments
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
explicit severity_logger(LevelT level);
.fi

.sp
The constructor creates the logger with the specified default severity level
.sp

.PP
Parameters:
.RS 4
.PP
level
.RS 4
The default severity level
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
severity_logger & operator=(severity_logger const & that);
.fi

.sp
Assignment operator
.sp
Swaps two loggers
.RE


