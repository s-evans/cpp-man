.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLA" 3 "" "" ""
.SH "NAME"
boost::variate_generator
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/variate_generator\&.hpp>

template<typename Engine, typename Distribution> 
class variate_generator {
public:
  // types
  typedef helper_type::value_type   engine_value_type;
  typedef Engine                    engine_type;      
  typedef Distribution              distribution_type;
  typedef Distribution::result_type result_type;      

  // construct/copy/destruct
  variate_generator(Engine, Distribution);

  // public member functions
  result_type operator()();
  template<typename T> result_type operator()(const T &);
  engine_value_type & engine();
  const engine_value_type & engine() const;
  distribution_type & distribution();
  const distribution_type & distribution() const;
  result_type min() const;
  result_type max() const;
};
.fi
.SH "DESCRIPTION"
.PP
A random variate generator is used to join a random number generator together with a random number distribution\&. Boost\&.Random provides a vast choice of
generators
as well as
distributions
\&.
.PP
The argument for the template parameter Engine shall be of the form U, U&, or U*, where U models a
uniform random number generator
\&. Then, the member engine_value_type names U (not the pointer or reference to U)\&.
.PP
Specializations of
variate_generator
satisfy the requirements of CopyConstructible\&. They also satisfy the requirements of Assignable unless the template parameter Engine is of the form U&\&.
.PP
The complexity of all functions specified in this section is constant\&. No function described in this section except the constructor throws an exception\&.
.SS "variate_generator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
variate_generator(Engine e, Distribution d);
.fi

.sp
Constructs a
variate_generator
object with the associated
uniform random number generator
eng and the associated
random distribution
d\&.
.sp
Throws: If and what the copy constructor of Engine or Distribution throws\&.
.RE

.SS "variate_generator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()();
.fi

.sp
Returns: distribution()(engine())
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename T> result_type operator()(const T & value);
.fi

.sp
Returns: distribution()(engine(), value)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
engine_value_type & engine();
.fi

.sp
Returns: A reference to the associated uniform random number generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
const engine_value_type & engine() const;
.fi

.sp
Returns: A reference to the associated uniform random number generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
distribution_type & distribution();
.fi

.sp
Returns: A reference to the associated
random distribution
\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
const distribution_type & distribution() const;
.fi

.sp
Returns: A reference to the associated random distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
result_type min() const;
.fi

.sp
Precondition: distribution()\&.min() is well\-formed
.sp
Returns: distribution()\&.min()
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
result_type max() const;
.fi

.sp
Precondition: distribution()\&.max() is well\-formed
.sp
Returns: distribution()\&.max()
.RE


