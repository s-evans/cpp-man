.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::interprocess::iunordered_set_index
.SH "SYNOPSIS"
.\" value_type: Class template iunordered_set_index
.\" Class template iunordered_set_index: value_type
.\" size_type: Class template iunordered_set_index
.\" Class template iunordered_set_index: size_type
.\" shrink_to_fit: Class template iunordered_set_index
.\" Class template iunordered_set_index: shrink_to_fit
.\" reserve: Class template iunordered_set_index
.\" Class template iunordered_set_index: reserve
.\" iunordered_set_index_aux: Class template iunordered_set_index
.\" Class template iunordered_set_index: iunordered_set_index_aux
.\" iterator: Class template iunordered_set_index
.\" Class template iunordered_set_index: iterator
.\" insert_commit_data: Class template iunordered_set_index
.\" Class template iunordered_set_index: insert_commit_data
.\" insert_commit: Class template iunordered_set_index
.\" Class template iunordered_set_index: insert_commit
.\" find: Class template iunordered_set_index
.\" Class template iunordered_set_index: find
.\" const_iterator: Class template iunordered_set_index
.\" Class template iunordered_set_index: const_iterator
.\" bucket_type: Class template iunordered_set_index
.\" Class template iunordered_set_index: bucket_type
.\" bucket_traits: Class template iunordered_set_index
.\" Class template iunordered_set_index: bucket_traits
.\" bucket_ptr: Class template iunordered_set_index
.\" Class template iunordered_set_index: bucket_ptr
.\" allocator_holder: Class template iunordered_set_index
.\" Class template iunordered_set_index: allocator_holder

.sp
.nf
// In header: <boost/interprocess/indexes/iunordered_set_index\&.hpp>

template<typename MapConfig> 
class iunordered_set_index : private iunordered_set_index_aux::allocator_holder< MapConfig >,
                             public iunordered_set_index_aux::index_t< MapConfig >
{
public:
  // types
  typedef index_type::iterator           iterator;          
  typedef index_type::const_iterator     const_iterator;    
  typedef index_type::insert_commit_data insert_commit_data;
  typedef index_type::value_type         value_type;        
  typedef index_type::bucket_ptr         bucket_ptr;        
  typedef index_type::bucket_type        bucket_type;       
  typedef index_type::bucket_traits      bucket_traits;     
  typedef index_type::size_type          size_type;         

  // construct/copy/destruct
  iunordered_set_index(segment_manager_base *);
  ~iunordered_set_index();

  // public member functions
  void reserve(size_type);
  void shrink_to_fit();
  iterator find(const intrusive_compare_key_type &);
  const_iterator find(const intrusive_compare_key_type &) const;
  std::pair< iterator, bool > 
  insert_check(const intrusive_compare_key_type &, insert_commit_data &);
  iterator insert_commit(value_type &, insert_commit_data &);
};
.fi
.SH "DESCRIPTION"
.PP
Index type based in boost::intrusive::set\&. Just derives from boost::intrusive::set and defines the interface needed by managed memory segments
.SS "iunordered_set_index public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
iunordered_set_index(segment_manager_base * mngr);
.fi

.sp
Constructor\&. Takes a pointer to the segment manager\&. Can throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~iunordered_set_index();
.fi

.RE

.SS "iunordered_set_index public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" reserve: Class template iunordered_set_index
.\" Class template iunordered_set_index: reserve

.sp

.nf
void reserve(size_type new_n);
.fi

.sp
This reserves memory to optimize the insertion of n elements in the index
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" shrink_to_fit: Class template iunordered_set_index
.\" Class template iunordered_set_index: shrink_to_fit

.sp

.nf
void shrink_to_fit();
.fi

.sp
This tries to free unused memory previously allocated\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
.\" find: Class template iunordered_set_index
.\" Class template iunordered_set_index: find

.sp

.nf
iterator find(const intrusive_compare_key_type & key);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" find: Class template iunordered_set_index
.\" Class template iunordered_set_index: find

.sp

.nf
const_iterator find(const intrusive_compare_key_type & key) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
std::pair< iterator, bool > 
insert_check(const intrusive_compare_key_type & key, 
             insert_commit_data & commit_data);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
.\" insert_commit: Class template iunordered_set_index
.\" Class template iunordered_set_index: insert_commit

.sp

.nf
iterator insert_commit(value_type & val, insert_commit_data & commit_data);
.fi

.RE


