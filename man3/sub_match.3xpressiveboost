.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::xpressive::sub_match \- Class template sub_match denotes the sequence of characters matched by a particular marked sub\-expression\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/xpressive_fwd\&.hpp>

template<typename BidiIter> 
struct sub_match : public std::pair< BidiIter, BidiIter > {
  // construct/copy/destruct
  sub_match();
  sub_match(BidiIter, BidiIter, bool = false);

  // public member functions
  string_type str() const;
  operator string_type() const;
  difference_type length() const;
  operator bool_type() const;
  bool operator!() const;
  int compare(string_type const &) const;
  int compare(sub_match const &) const;
  int compare(value_type const *) const;
};
.fi
.SH "DESCRIPTION"
.PP
When the marked sub\-expression denoted by an object of type
sub_match<>
participated in a regular expression match then member
matched
evaluates to
true, and members
first
and
second
denote the range of characters
[first,second)
which formed that match\&. Otherwise
matched
is
false, and members
first
and
second
contained undefined values\&.
.PP
If an object of type
sub_match<>
represents sub\-expression 0 \- that is to say the whole match \- then member
matched
is always
true, unless a partial match was obtained as a result of the flag
match_partial
being passed to a regular expression algorithm, in which case member
matched
is
false, and members
first
and
second
represent the character range that formed the partial match\&.
.SS "sub_match public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
sub_match();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
sub_match(BidiIter first, BidiIter second, bool matched_ = false);
.fi

.RE

.SS "sub_match public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
string_type str() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
operator string_type() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
difference_type length() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
operator bool_type() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
bool operator!() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
int compare(string_type const & str) const;
.fi

.sp
Performs a lexicographic string comparison\&. 
.PP
Parameters:
.RS 4
.PP
str
.RS 4
the string against which to compare
.RE
.RE
.PP
Returns:
.RS 4
the results of
(*this)\&.str()\&.compare(str)
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
int compare(sub_match const & sub) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
int compare(value_type const * ptr) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


