.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLA" 3 "" "" ""
.SH "NAME"
boost::algorithm::iter_find \- Iter find algorithm\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/algorithm/string/iter_find\&.hpp>


template<typename SequenceSequenceT, typename RangeT, typename FinderT> 
  SequenceSequenceT & 
  iter_find(SequenceSequenceT & Result, RangeT & Input, FinderT Finder);
.fi
.SH "DESCRIPTION"
.PP
This algorithm executes a given finder in iteration on the input, until the end of input is reached, or no match is found\&. Iteration is done using built\-in
find_iterator, so the real searching is performed only when needed\&. In each iteration new match is found and added to the result\&.
.PP

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Prior content of the result will be overwritten\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
Finder
.RS 4
A Finder object used for searching
.RE
.PP
Input
.RS 4
A container which will be searched\&.
.RE
.PP
Result
.RS 4
A \'container container\' to contain the result of search\&. Both outer and inner container must have constructor taking a pair of iterators as an argument\&. Typical type of the result is
std::vector<boost::iterator_range<iterator>>
(each element of such a vector will container a range delimiting a match)\&.
.RE
.RE
.PP
Returns:
.RS 4
A reference to the result
.RE

