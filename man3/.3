.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "" 3 "" "" ""
.SH "NAME"
boost::apply_visitor_/*three_or_more_variant_parameters*/
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/variant/multivisitors\&.hpp>


template<typename MultiVisitor, typename Variant1, typename Variant2, 
         typename Variant3> 
  typename MultiVisitor::result_type OR decltype(auto) 
  apply_visitor /*three or more variant parameters*/(MultiVisitor & visitor, 
                                                     Variant1 & operand1, 
                                                     Variant2 & operand2, 
                                                     Variant3 & operand3, 
                                                     \&.\&.\&. other_operands);
template<typename MultiVisitor, typename Variant1, typename Variant2, 
         typename Variant3> 
  typename MultiVisitor::result_type OR decltype(auto) 
  apply_visitor /*three or more variant parameters*/(const MultiVisitor & visitor, 
                                                     Variant1 & operand1, 
                                                     Variant2 & operand2, 
                                                     Variant3 & operand3, 
                                                     \&.\&.\&. other_operands);
.fi
.SH "DESCRIPTION"
.sp
Allows compile\-time checked type\-safe application of the given visitor to the content of the given variant, ensuring that all types are handled by the visitor\&. See apply_visitor for more information\&.

