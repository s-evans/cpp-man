.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE AB" 3 "" "" ""
.SH "NAME"
boost::units::absolute
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/units/absolute\&.hpp>

template<typename Y> 
class absolute {
public:
  // types
  typedef absolute< Y > this_type; 
  typedef Y             value_type;

  // construct/copy/destruct
  absolute();
  absolute(const value_type &);
  absolute(const this_type &);
  this_type & operator=(const this_type &);

  // public member functions
  const value_type & value() const;
  const this_type & operator+=(const value_type &);
  const this_type & operator\-=(const value_type &);
};
.fi
.SH "DESCRIPTION"
.PP
A wrapper to represent absolute units (points rather than vectors)\&. Intended originally for temperatures, this class implements operators for absolute units so that addition of a relative unit to an absolute unit results in another absolute unit : absolute<T> +/\- T \-> absolute<T> and subtraction of one absolute unit from another results in a relative unit : absolute<T> \- absolute<T> \-> T\&.
.SS "absolute public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
absolute();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
absolute(const value_type & val);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
absolute(const this_type & source);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
this_type & operator=(const this_type & source);
.fi

.RE

.SS "absolute public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
const value_type & value() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
const this_type & operator+=(const value_type & val);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
const this_type & operator\-=(const value_type & val);
.fi

.RE


