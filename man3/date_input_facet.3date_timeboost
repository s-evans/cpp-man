.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::date_time::date_input_facet \- Input facet\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/date_facet\&.hpp>

template<typename date_type, typename CharT, 
         typename InItrT = std::istreambuf_iterator<CharT, std::char_traits<CharT> > > 
class date_input_facet : public facet {
public:
  // types
  typedef date_type::duration_type                                    duration_type;             
  typedef date_type::day_of_week_type                                 day_of_week_type;          
  typedef date_type::day_type                                         day_type;                  
  typedef date_type::month_type                                       month_type;                
  typedef date_type::year_type                                        year_type;                 
  typedef boost::date_time::period< date_type, duration_type >        period_type;               
  typedef std::basic_string< CharT >                                  string_type;               
  typedef CharT                                                       char_type;                 
  typedef boost::date_time::period_parser< date_type, CharT >         period_parser_type;        
  typedef boost::date_time::special_values_parser< date_type, CharT > special_values_parser_type;
  typedef std::vector< std::basic_string< CharT > >                   input_collection_type;     
  typedef format_date_parser< date_type, CharT >                      format_date_parser_type;   
  typedef date_generator_parser< date_type, CharT >                   date_gen_parser_type;      
  typedef partial_date< date_type >                                   partial_date_type;         
  typedef nth_kday_of_month< date_type >                              nth_kday_type;             
  typedef first_kday_of_month< date_type >                            first_kday_type;           
  typedef last_kday_of_month< date_type >                             last_kday_type;            
  typedef first_kday_after< date_type >                               kday_after_type;           
  typedef first_kday_before< date_type >                              kday_before_type;          

  // construct/copy/destruct
  explicit date_input_facet(::size_t = 0);
  explicit date_input_facet(const string_type &, ::size_t = 0);
  explicit date_input_facet(const string_type &, 
                            const format_date_parser_type &, 
                            const special_values_parser_type &, 
                            const period_parser_type &, 
                            const date_gen_parser_type &, ::size_t = 0);

  // public member functions
  void format(const char_type *const);
  virtual void set_iso_format();
  virtual void set_iso_extended_format();
  void month_format(const char_type *const);
  void weekday_format(const char_type *const);
  void year_format(const char_type *const);
  void period_parser(period_parser_type);
  void short_weekday_names(const input_collection_type &);
  void long_weekday_names(const input_collection_type &);
  void short_month_names(const input_collection_type &);
  void long_month_names(const input_collection_type &);
  void date_gen_element_strings(const input_collection_type &);
  void date_gen_element_strings(const string_type &, const string_type &, 
                                const string_type &, const string_type &, 
                                const string_type &, const string_type &, 
                                const string_type &, const string_type &, 
                                const string_type &);
  void special_values_parser(special_values_parser_type);
  InItrT get(InItrT &, InItrT &, std::ios_base &, date_type &) const;
  InItrT get(InItrT &, InItrT &, std::ios_base &, month_type &) const;
  InItrT get(InItrT &, InItrT &, std::ios_base &, day_of_week_type &) const;
  InItrT get(InItrT &, InItrT &, std::ios_base &, day_type &) const;
  InItrT get(InItrT &, InItrT &, std::ios_base &, year_type &) const;
  InItrT get(InItrT &, InItrT &, std::ios_base &, duration_type &) const;
  InItrT get(InItrT &, InItrT &, std::ios_base &, period_type &) const;
  InItrT get(InItrT &, InItrT &, std::ios_base &, nth_kday_type &) const;
  InItrT get(InItrT &, InItrT &, std::ios_base &, partial_date_type &) const;
  InItrT get(InItrT &, InItrT &, std::ios_base &, first_kday_type &) const;
  InItrT get(InItrT &, InItrT &, std::ios_base &, last_kday_type &) const;
  InItrT get(InItrT &, InItrT &, std::ios_base &, kday_before_type &) const;
  InItrT get(InItrT &, InItrT &, std::ios_base &, kday_after_type &) const;

  // public data members
  static const char_type long_weekday_format;
  static const char_type short_weekday_format;
  static const char_type long_month_format;
  static const char_type short_month_format;
  static const char_type four_digit_year_format;
  static const char_type two_digit_year_format;
  static const char_type default_period_separator;
  static const char_type standard_format_specifier;
  static const char_type iso_format_specifier;
  static const char_type iso_format_extended_specifier;
  static const char_type default_date_format;
  static std::locale::id id;
};
.fi
.SH "DESCRIPTION"
.SS "date_input_facet public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit date_input_facet(::size_t a_ref = 0);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit date_input_facet(const string_type & format_str, ::size_t a_ref = 0);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
explicit date_input_facet(const string_type & format_str, 
                          const format_date_parser_type & date_parser, 
                          const special_values_parser_type & sv_parser, 
                          const period_parser_type & per_parser, 
                          const date_gen_parser_type & date_gen_parser, 
                          ::size_t ref_count = 0);
.fi

.RE

.SS "date_input_facet public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void format(const char_type *const format_str);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
virtual void set_iso_format();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
virtual void set_iso_extended_format();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
void month_format(const char_type *const format_str);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
void weekday_format(const char_type *const format_str);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void year_format(const char_type *const format_str);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void period_parser(period_parser_type per_parser);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
void short_weekday_names(const input_collection_type & weekday_names);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
void long_weekday_names(const input_collection_type & weekday_names);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
void short_month_names(const input_collection_type & month_names);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
void long_month_names(const input_collection_type & month_names);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
void date_gen_element_strings(const input_collection_type & col);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "13." 4.2
.\}

.sp

.nf
void date_gen_element_strings(const string_type & first, 
                              const string_type & second, 
                              const string_type & third, 
                              const string_type & fourth, 
                              const string_type & fifth, 
                              const string_type & last, 
                              const string_type & before, 
                              const string_type & after, 
                              const string_type & of);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'14.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "14." 4.2
.\}

.sp

.nf
void special_values_parser(special_values_parser_type sv_parser);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'15.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "15." 4.2
.\}

.sp

.nf
InItrT get(InItrT & from, InItrT & to, std::ios_base &, date_type & d) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'16.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "16." 4.2
.\}

.sp

.nf
InItrT get(InItrT & from, InItrT & to, std::ios_base &, month_type & m) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'17.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "17." 4.2
.\}

.sp

.nf
InItrT get(InItrT & from, InItrT & to, std::ios_base &, day_of_week_type & wd) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'18.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "18." 4.2
.\}

.sp

.nf
InItrT get(InItrT & from, InItrT & to, std::ios_base &, day_type & d) const;
.fi

Expects 1 or 2 digit day range: 1\-31\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04'19.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "19." 4.2
.\}

.sp

.nf
InItrT get(InItrT & from, InItrT & to, std::ios_base &, year_type & y) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'20.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "20." 4.2
.\}

.sp

.nf
InItrT get(InItrT & from, InItrT & to, std::ios_base & a_ios, 
           duration_type & dd) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'21.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "21." 4.2
.\}

.sp

.nf
InItrT get(InItrT & from, InItrT & to, std::ios_base & a_ios, period_type & p) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'22.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "22." 4.2
.\}

.sp

.nf
InItrT get(InItrT & from, InItrT & to, std::ios_base & a_ios, 
           nth_kday_type & nkd) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'23.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "23." 4.2
.\}

.sp

.nf
InItrT get(InItrT & from, InItrT & to, std::ios_base & a_ios, 
           partial_date_type & pd) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'24.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "24." 4.2
.\}

.sp

.nf
InItrT get(InItrT & from, InItrT & to, std::ios_base & a_ios, 
           first_kday_type & fkd) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'25.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "25." 4.2
.\}

.sp

.nf
InItrT get(InItrT & from, InItrT & to, std::ios_base & a_ios, 
           last_kday_type & lkd) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'26.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "26." 4.2
.\}

.sp

.nf
InItrT get(InItrT & from, InItrT & to, std::ios_base & a_ios, 
           kday_before_type & fkb) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'27.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "27." 4.2
.\}

.sp

.nf
InItrT get(InItrT & from, InItrT & to, std::ios_base & a_ios, 
           kday_after_type & fka) const;
.fi

.RE


