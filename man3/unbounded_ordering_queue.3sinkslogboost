.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::log::sinks::unbounded_ordering_queue \- Unbounded ordering log record queueing strategy\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/unbounded_ordering_queue\&.hpp>

template<typename OrderT> 
class unbounded_ordering_queue {
public:
  // construct/copy/destruct
  template<typename ArgsT> explicit unbounded_ordering_queue(ArgsT const &);

  // public member functions
  posix_time::time_duration get_ordering_window() const;

  // public static functions
  static posix_time::time_duration get_default_ordering_window();

  // protected member functions
  void enqueue(record_view const &);
  bool try_enqueue(record_view const &);
  bool try_dequeue_ready(record_view &);
  bool try_dequeue(record_view &);
  bool dequeue_ready(record_view &);
  void interrupt_dequeue();

  // private member functions
  void enqueue_unlocked(record_view const &);
};
.fi
.SH "DESCRIPTION"
.PP
The
unbounded_ordering_queue
class is intended to be used with the
asynchronous_sink
frontend as a log record queueing strategy\&.
.PP
This strategy provides the following properties to the record queueing mechanism:
.PP

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The queue has no size limits\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The queue has a fixed latency window\&. This means that each log record put into the queue will normally not be dequeued for a certain period of time\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The queue performs stable record ordering within the latency window\&. The ordering predicate can be specified in the
OrderT
template parameter\&.
.RE
.sp
.RE
Since this queue has no size limits, it may grow uncontrollably if sink backends dequeue log records not fast enough\&. When this is an issue, it is recommended to use one of the bounded strategies\&.
.SS "unbounded_ordering_queue public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename ArgsT> explicit unbounded_ordering_queue(ArgsT const & args);
.fi

Initializing constructor\&. .RE

.SS "unbounded_ordering_queue public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
posix_time::time_duration get_ordering_window() const;
.fi

.sp
Returns ordering window size specified during initialization
.RE

.SS "unbounded_ordering_queue public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static posix_time::time_duration get_default_ordering_window();
.fi

.sp
Returns default ordering window size\&. The default window size is specific to the operating system thread scheduling mechanism\&.
.RE

.SS "unbounded_ordering_queue protected member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void enqueue(record_view const & rec);
.fi

Enqueues log record to the queue\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
bool try_enqueue(record_view const & rec);
.fi

Attempts to enqueue log record to the queue\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
bool try_dequeue_ready(record_view & rec);
.fi

Attempts to dequeue a log record ready for processing from the queue, does not block if no log records are ready to be processed\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
bool try_dequeue(record_view & rec);
.fi

Attempts to dequeue log record from the queue, does not block\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
bool dequeue_ready(record_view & rec);
.fi

Dequeues log record from the queue, blocks if no log records are ready to be processed\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void interrupt_dequeue();
.fi

Wakes a thread possibly blocked in the dequeue method\&. .RE

.SS "unbounded_ordering_queue private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void enqueue_unlocked(record_view const & rec);
.fi

Enqueues a log record\&. .RE


