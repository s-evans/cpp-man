.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::interprocess::cached_node_allocator
.SH "SYNOPSIS"
.\" void_pointer: Class template cached_node_allocator
.\" Class template cached_node_allocator: void_pointer
.\" value_type: Class template cached_node_allocator
.\" Class template cached_node_allocator: value_type
.\" swap: Class template cached_node_allocator
.\" Class template cached_node_allocator: swap
.\" size_type: Class template cached_node_allocator
.\" Class template cached_node_allocator: size_type
.\" set_max_cached_nodes: Class template cached_node_allocator
.\" Class template cached_node_allocator: set_max_cached_nodes
.\" segment_manager: Class template cached_node_allocator
.\" Class template cached_node_allocator: segment_manager
.\" reference: Class template cached_node_allocator
.\" Class template cached_node_allocator: reference
.\" rebind: Class template cached_node_allocator
.\" Class template cached_node_allocator: rebind
.\" pointer: Class template cached_node_allocator
.\" Class template cached_node_allocator: pointer
.\" other: Class template cached_node_allocator
.\" Class template cached_node_allocator: other
.\" difference_type: Class template cached_node_allocator
.\" Class template cached_node_allocator: difference_type
.\" destroy: Class template cached_node_allocator
.\" Class template cached_node_allocator: destroy
.\" deallocate_one: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate_one
.\" deallocate_many: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate_many
.\" deallocate_individual: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate_individual
.\" deallocate_free_blocks: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate_free_blocks
.\" deallocate: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate
.\" construct: Class template cached_node_allocator
.\" Class template cached_node_allocator: construct
.\" const_reference: Class template cached_node_allocator
.\" Class template cached_node_allocator: const_reference
.\" const_pointer: Class template cached_node_allocator
.\" Class template cached_node_allocator: const_pointer
.\" cached_node_allocator: Class template cached_node_allocator
.\" Class template cached_node_allocator: cached_node_allocator
.\" allocation_command: Class template cached_node_allocator
.\" Class template cached_node_allocator: allocation_command
.\" allocate_one: Class template cached_node_allocator
.\" Class template cached_node_allocator: allocate_one
.\" allocate_many: Class template cached_node_allocator
.\" Class template cached_node_allocator: allocate_many
.\" allocate_individual: Class template cached_node_allocator
.\" Class template cached_node_allocator: allocate_individual
.\" allocate: Class template cached_node_allocator
.\" Class template cached_node_allocator: allocate

.sp
.nf
// In header: <boost/interprocess/allocators/cached_node_allocator\&.hpp>

template<typename T, typename SegmentManager, std::size_t NodesPerBlock> 
class cached_node_allocator {
public:
  // types
  typedef implementation_defined::segment_manager segment_manager;
  typedef segment_manager::void_pointer           void_pointer;   
  typedef implementation_defined::pointer         pointer;        
  typedef implementation_defined::const_pointer   const_pointer;  
  typedef T                                       value_type;     
  typedef \fIunspecified\fR                             reference;      
  typedef \fIunspecified\fR                             const_reference;
  typedef SegmentManager::size_type               size_type;      
  typedef SegmentManager::difference_type         difference_type;

  // member classes/structs/unions
  template<typename T2> 
  struct rebind {
    // types
    typedef cached_node_allocator< T2, SegmentManager > other;
  };

  // construct/copy/destruct
  cached_node_allocator(segment_manager *);
  cached_node_allocator(const cached_node_allocator &);
  template<typename T2> 
    cached_node_allocator(const cached_node_allocator< T2, SegmentManager, NodesPerBlock > &);
  template<typename T2, typename SegmentManager2, std::size_t N2> 
    cached_node_allocator & 
    operator=(const cached_node_allocator< T2, SegmentManager2, N2 > &);
  cached_node_allocator & operator=(const cached_node_allocator &);
  ~cached_node_allocator();

  // public member functions
  node_pool_t * get_node_pool() const;
  segment_manager * get_segment_manager() const;
  size_type max_size() const;
  pointer allocate(size_type, cvoid_pointer = 0);
  void deallocate(const pointer &, size_type);
  void deallocate_free_blocks();
  pointer address(reference) const;
  const_pointer address(const_reference) const;
  void construct(const pointer &, const_reference);
  void destroy(const pointer &);
  size_type size(const pointer &) const;
  pointer allocation_command(boost::interprocess::allocation_type, size_type, 
                             size_type &, pointer &);
  void allocate_many(size_type, size_type, multiallocation_chain &);
  void allocate_many(const size_type *, size_type, multiallocation_chain &);
  void deallocate_many(multiallocation_chain &);
  pointer allocate_one();
  multiallocation_chain allocate_individual(size_type);
  void deallocate_one(const pointer &);
  void deallocate_individual(multiallocation_chain);
  void set_max_cached_nodes(size_type);
  size_type get_max_cached_nodes() const;

  // friend functions
  friend void swap(self_t &, self_t &);
};
.fi
.SH "DESCRIPTION"
.SS "cached_node_allocator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
cached_node_allocator(segment_manager * segment_mngr);
.fi

.sp
Constructor from a segment manager\&. If not present, constructs a node pool\&. Increments the reference count of the associated node pool\&. Can throw
boost::interprocess::bad_alloc
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
cached_node_allocator(const cached_node_allocator & other);
.fi

.sp
Copy constructor from other
cached_node_allocator\&. Increments the reference count of the associated node pool\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
.\" cached_node_allocator: Class template cached_node_allocator
.\" Class template cached_node_allocator: cached_node_allocator

.sp

.nf
template<typename T2> 
  cached_node_allocator(const cached_node_allocator< T2, SegmentManager, NodesPerBlock > & other);
.fi

.sp
Copy constructor from related
cached_node_allocator\&. If not present, constructs a node pool\&. Increments the reference count of the associated node pool\&. Can throw
boost::interprocess::bad_alloc
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename T2, typename SegmentManager2, std::size_t N2> 
  cached_node_allocator & 
  operator=(const cached_node_allocator< T2, SegmentManager2, N2 > &);
.fi

.sp
Not assignable from related
cached_node_allocator
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
cached_node_allocator & operator=(const cached_node_allocator &);
.fi

.sp
Not assignable from other
cached_node_allocator
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
~cached_node_allocator();
.fi

.sp
Destructor, removes node_pool_t from memory if its reference count reaches to zero\&. Never throws
.RE

.SS "cached_node_allocator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
node_pool_t * get_node_pool() const;
.fi

.sp
Returns a pointer to the node pool\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
segment_manager * get_segment_manager() const;
.fi

.sp
Returns the segment manager\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
size_type max_size() const;
.fi

.sp
Returns the number of elements that could be allocated\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" allocate: Class template cached_node_allocator
.\" Class template cached_node_allocator: allocate

.sp

.nf
pointer allocate(size_type count, cvoid_pointer hint = 0);
.fi

.sp
Allocate memory for an array of count elements\&. Throws
boost::interprocess::bad_alloc
if there is no enough memory
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
.\" deallocate: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate

.sp

.nf
void deallocate(const pointer & ptr, size_type count);
.fi

.sp
Deallocate allocated memory\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
.\" deallocate_free_blocks: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate_free_blocks

.sp

.nf
void deallocate_free_blocks();
.fi

.sp
Deallocates all free blocks of the pool
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
pointer address(reference value) const;
.fi

.sp
Returns address of mutable object\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
const_pointer address(const_reference value) const;
.fi

.sp
Returns address of non mutable object\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}
.\" construct: Class template cached_node_allocator
.\" Class template cached_node_allocator: construct

.sp

.nf
void construct(const pointer & ptr, const_reference v);
.fi

.sp
Default construct an object\&. Throws if T\'s default constructor throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}
.\" destroy: Class template cached_node_allocator
.\" Class template cached_node_allocator: destroy

.sp

.nf
void destroy(const pointer & ptr);
.fi

.sp
Destroys object\&. Throws if object\'s destructor throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
size_type size(const pointer & p) const;
.fi

.sp
Returns maximum the number of objects the previously allocated memory pointed by p can hold\&. This size only works for memory allocated with allocate, allocation_command and allocate_many\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}
.\" allocation_command: Class template cached_node_allocator
.\" Class template cached_node_allocator: allocation_command

.sp

.nf
pointer allocation_command(boost::interprocess::allocation_type command, 
                           size_type limit_size, 
                           size_type & prefer_in_recvd_out_size, 
                           pointer & reuse);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "13." 4.2
.\}
.\" deallocate: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate
.\" allocate_many: Class template cached_node_allocator
.\" Class template cached_node_allocator: allocate_many

.sp

.nf
void allocate_many(size_type elem_size, size_type num_elements, 
                   multiallocation_chain & chain);
.fi

.sp
Allocates many elements of size elem_size in a contiguous block of memory\&. The minimum number to be allocated is min_elements, the preferred and maximum number is preferred_elements\&. The number of actually allocated elements is will be assigned to received_size\&. The elements must be deallocated with deallocate(\&.\&.\&.)
.RE


.sp
.RS 4
.ie n \{\
\h'-04'14.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "14." 4.2
.\}
.\" allocate_many: Class template cached_node_allocator
.\" Class template cached_node_allocator: allocate_many

.sp

.nf
void allocate_many(const size_type * elem_sizes, size_type n_elements, 
                   multiallocation_chain & chain);
.fi

.sp
Allocates n_elements elements, each one of size elem_sizes[i]in a contiguous block of memory\&. The elements must be deallocated
.RE


.sp
.RS 4
.ie n \{\
\h'-04'15.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "15." 4.2
.\}
.\" deallocate: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate
.\" deallocate_many: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate_many

.sp

.nf
void deallocate_many(multiallocation_chain & chain);
.fi

.sp
Allocates many elements of size elem_size in a contiguous block of memory\&. The minimum number to be allocated is min_elements, the preferred and maximum number is preferred_elements\&. The number of actually allocated elements is will be assigned to received_size\&. The elements must be deallocated with deallocate(\&.\&.\&.)
.RE


.sp
.RS 4
.ie n \{\
\h'-04'16.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "16." 4.2
.\}
.\" deallocate_one: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate_one
.\" allocate_one: Class template cached_node_allocator
.\" Class template cached_node_allocator: allocate_one

.sp

.nf
pointer allocate_one();
.fi

.sp
Allocates just one object\&. Memory allocated with this function must be deallocated only with deallocate_one()\&. Throws
boost::interprocess::bad_alloc
if there is no enough memory
.RE


.sp
.RS 4
.ie n \{\
\h'-04'17.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "17." 4.2
.\}
.\" deallocate_one: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate_one
.\" allocate_individual: Class template cached_node_allocator
.\" Class template cached_node_allocator: allocate_individual

.sp

.nf
multiallocation_chain allocate_individual(size_type num_elements);
.fi

.sp
Allocates many elements of size == 1 in a contiguous block of memory\&. The minimum number to be allocated is min_elements, the preferred and maximum number is preferred_elements\&. The number of actually allocated elements is will be assigned to received_size\&. Memory allocated with this function must be deallocated only with deallocate_one()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'18.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "18." 4.2
.\}
.\" allocate_one: Class template cached_node_allocator
.\" Class template cached_node_allocator: allocate_one
.\" deallocate_one: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate_one

.sp

.nf
void deallocate_one(const pointer & p);
.fi

.sp
Deallocates memory previously allocated with allocate_one()\&. You should never use deallocate_one to deallocate memory allocated with other functions different from allocate_one()\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04'19.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "19." 4.2
.\}
.\" deallocate_one: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate_one
.\" deallocate_individual: Class template cached_node_allocator
.\" Class template cached_node_allocator: deallocate_individual

.sp

.nf
void deallocate_individual(multiallocation_chain it);
.fi

.sp
Allocates many elements of size == 1 in a contiguous block of memory\&. The minimum number to be allocated is min_elements, the preferred and maximum number is preferred_elements\&. The number of actually allocated elements is will be assigned to received_size\&. Memory allocated with this function must be deallocated only with deallocate_one()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'20.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "20." 4.2
.\}
.\" set_max_cached_nodes: Class template cached_node_allocator
.\" Class template cached_node_allocator: set_max_cached_nodes

.sp

.nf
void set_max_cached_nodes(size_type newmax);
.fi

.sp
Sets the new max cached nodes value\&. This can provoke deallocations if "newmax" is less than current cached nodes\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04'21.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "21." 4.2
.\}

.sp

.nf
size_type get_max_cached_nodes() const;
.fi

.sp
Returns the max cached nodes parameter\&. Never throws
.RE

.SS "cached_node_allocator friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" swap: Class template cached_node_allocator
.\" Class template cached_node_allocator: swap

.sp

.nf
friend void swap(self_t & alloc1, self_t & alloc2);
.fi

.sp
Swaps allocators\&. Does not throw\&. If each allocator is placed in a different memory segment, the result is undefined\&.
.RE


