.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TE" 3 "" "" ""
.SH "NAME"
boost::typeindex::type_id_with_cvr
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_index\&.hpp>


template<typename T> type_index type_id_with_cvr();
.fi
.SH "DESCRIPTION"
.PP
Function for constructing boost::typeindex::type_index instance for type T\&. Does not remove const, volatile, & and && modifiers from T\&.
.PP
If T has no const, volatile, & and && modifiers, then returns exactly the same result as in case of calling
type_id<T>()\&.
.PP
\fBExample:\fR

.sp
.if n \{\
.RS 4
.\}
.nf
type_index ti = type_id_with_cvr<int&>();
std::cout << ti\&.pretty_name();  // Outputs \'int&\'

.fi
.if n \{\
.RE
.\}

.PP

.PP
Template Parameters:
.RS 4
.PP
T
.RS 4
Type for which type_index must be created\&.
.RE
.RE
.PP
Returns:
.RS 4
boost::typeindex::type_index with information about the specified type T\&.
.RE
.PP
Throws:
.RS 4
Nothing\&.
.RE

