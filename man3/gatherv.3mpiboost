.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION GATHERV" 3 "" "" ""
.SH "NAME"
boost::mpi::gatherv \- Similar to boost::mpi::gather with the difference that the number of values to be send by non\-root processes can vary\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/mpi/collectives\&.hpp>


template<typename T> 
  void gatherv(const communicator & comm, const std::vector< T > & in_values, 
               T * out_values, const std::vector< int > & sizes, 
               const std::vector< int > & displs, int root);
template<typename T> 
  void gatherv(const communicator & comm, const T * in_values, int in_size, 
               T * out_values, const std::vector< int > & sizes, 
               const std::vector< int > & displs, int root);
template<typename T> 
  void gatherv(const communicator & comm, const std::vector< T > & in_values, 
               int root);
template<typename T> 
  void gatherv(const communicator & comm, const T * in_values, int in_size, 
               int root);
template<typename T> 
  void gatherv(const communicator & comm, const T * in_values, int in_size, 
               T * out_values, const std::vector< int > & sizes, int root);
template<typename T> 
  void gatherv(const communicator & comm, const std::vector< T > & in_values, 
               T * out_values, const std::vector< int > & sizes, int root);
.fi
.SH "DESCRIPTION"
.PP

.PP
Parameters:
.RS 4
.PP
comm
.RS 4
The communicator over which the gather will occur\&.
.RE
.PP
displs
.RS 4
A vector such that the i\-th entry specifies the displacement (relative to
out_values) from which to take the ingoing data at the
root
process\&. Overloaded versions for which
displs
is omitted assume that the data is to be placed contiguously at the root process\&.
.RE
.PP
in_values
.RS 4
The array of values to be transmitted by each process\&.
.RE
.PP
out_values
.RS 4
A pointer to storage that will be populated with the values from each process\&. For non\-root processes, this parameter may be omitted\&. If it is still provided, however, it will be unchanged\&.
.RE
.PP
root
.RS 4
The process ID number that will collect the values\&. This value must be the same on all processes\&.
.RE
.PP
sizes
.RS 4
A vector containing the number of elements each non\-root process will send\&.
.RE
.RE

