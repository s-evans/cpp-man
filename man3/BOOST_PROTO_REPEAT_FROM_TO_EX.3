.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MACRO BOOST" 3 "" "" ""
.SH "NAME"
BOOST_PROTO_REPEAT_FROM_TO_EX \- Repeatedly invoke the specified macro\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/repeat\&.hpp>

BOOST_PROTO_REPEAT_FROM_TO_EX(FROM, TO, MACRO, typename_A, A, A_a, a)
.fi
.SH "DESCRIPTION"
.PP

BOOST_PROTO_REPEAT_FROM_TO_EX()
is used to generate the kind of repetitive code that is typical of EDSLs built with Proto\&.
BOOST_PROTO_REPEAT_FROM_TO_EX(\fIFROM\fR, \fITO\fR, \fIMACRO\fR, \fItypename_A\fR, \fIA\fR, \fIA_a\fR, \fIa\fR)
is equivalent to:
.PP


.sp
.if n \{\
.RS 4
.\}
.nf
\fIMACRO\fR(\fIFROM\fR, typename_A, A, A_a, a)
\fIMACRO\fR(\fIFROM\fR\fI+\fR\fI1\fR, typename_A, A, A_a, a)
\&.\&.\&.
\fIMACRO\fR(\fITO\fR\fI\-\fR\fI1\fR, typename_A, A, A_a, a)
.fi
.if n \{\
.RE
.\}
.sp

.PP

\fBExample:\fR
.PP
See
BOOST_PROTO_REPEAT_FROM_TO()\&.

