.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::interprocess::basic_bufferbuf
.SH "SYNOPSIS"
.\" traits_type: Class template basic_bufferbuf
.\" Class template basic_bufferbuf: traits_type
.\" pos_type: Class template basic_bufferbuf
.\" Class template basic_bufferbuf: pos_type
.\" off_type: Class template basic_bufferbuf
.\" Class template basic_bufferbuf: off_type
.\" int_type: Class template basic_bufferbuf
.\" Class template basic_bufferbuf: int_type
.\" char_type: Class template basic_bufferbuf
.\" Class template basic_bufferbuf: char_type
.\" buffer: Class template basic_bufferbuf
.\" Class template basic_bufferbuf: buffer
.\" basic_bufferbuf: Class template basic_bufferbuf
.\" Class template basic_bufferbuf: basic_bufferbuf
.\" base_t: Class template basic_bufferbuf
.\" Class template basic_bufferbuf: base_t

.sp
.nf
// In header: <boost/interprocess/streams/bufferstream\&.hpp>

template<typename CharT, typename CharTraits> 
class basic_bufferbuf : public std::basic_streambuf< CharT, CharTraits > {
public:
  // types
  typedef CharT                                          char_type;  
  typedef CharTraits::int_type                           int_type;   
  typedef CharTraits::pos_type                           pos_type;   
  typedef CharTraits::off_type                           off_type;   
  typedef CharTraits                                     traits_type;
  typedef std::basic_streambuf< char_type, traits_type > base_t;     

  // construct/copy/destruct
  explicit basic_bufferbuf(std::ios_base::openmode = std::ios_base::in|std::ios_base::out);
  explicit basic_bufferbuf(CharT *, std::size_t, 
                           std::ios_base::openmode = std::ios_base::in|std::ios_base::out);
  ~basic_bufferbuf();

  // public member functions
  std::pair< CharT *, std::size_t > buffer() const;
  void buffer(CharT *, std::size_t);
};
.fi
.SH "DESCRIPTION"
.PP
A streambuf class that controls the transmission of elements to and from a basic_xbufferstream\&. The elements are transmitted from a to a fixed size buffer
.SS "basic_bufferbuf public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit basic_bufferbuf(std::ios_base::openmode mode = std::ios_base::in|std::ios_base::out);
.fi

.sp
Constructor\&. Does not throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit basic_bufferbuf(CharT * buf, std::size_t length, 
                         std::ios_base::openmode mode = std::ios_base::in|std::ios_base::out);
.fi

.sp
Constructor\&. Assigns formatting buffer\&. Does not throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
~basic_bufferbuf();
.fi

.RE

.SS "basic_bufferbuf public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" buffer: Class template basic_bufferbuf
.\" Class template basic_bufferbuf: buffer

.sp

.nf
std::pair< CharT *, std::size_t > buffer() const;
.fi

.sp
Returns the pointer and size of the internal buffer\&. Does not throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" buffer: Class template basic_bufferbuf
.\" Class template basic_bufferbuf: buffer

.sp

.nf
void buffer(CharT * buf, std::size_t length);
.fi

.sp
Sets the underlying buffer to a new value Does not throw\&.
.RE


