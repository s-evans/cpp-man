.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEM" 3 "" "" ""
.SH "NAME"
boost::xpressive::regex_token_iterator
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_token_iterator\&.hpp>

template<typename BidiIter> 
struct regex_token_iterator {
  // types
  typedef basic_regex< BidiIter >          regex_type;       
  typedef iterator_value< BidiIter >::type char_type;        
  typedef sub_match< BidiIter >            value_type;       
  typedef std::ptrdiff_t                   difference_type;  
  typedef value_type const *               pointer;          
  typedef value_type const &               reference;        
  typedef std::forward_iterator_tag        iterator_category;

  // construct/copy/destruct
  regex_token_iterator();
  regex_token_iterator(BidiIter, BidiIter, basic_regex< BidiIter > const &);
  template<typename LetExpr> 
    regex_token_iterator(BidiIter, BidiIter, basic_regex< BidiIter > const &, 
                         \fIunspecified\fR);
  template<typename Subs> 
    regex_token_iterator(BidiIter, BidiIter, basic_regex< BidiIter > const &, 
                         Subs const &, 
                         regex_constants::match_flag_type = regex_constants::match_default);
  template<typename Subs, typename LetExpr> 
    regex_token_iterator(BidiIter, BidiIter, basic_regex< BidiIter > const &, 
                         Subs const &, \fIunspecified\fR, 
                         regex_constants::match_flag_type = regex_constants::match_default);
  regex_token_iterator(regex_token_iterator< BidiIter > const &);
  regex_token_iterator< BidiIter > & 
  operator=(regex_token_iterator< BidiIter > const &);

  // public member functions
  value_type const & operator*() const;
  value_type const * operator\->() const;
  regex_token_iterator< BidiIter > & operator++();
  regex_token_iterator< BidiIter > operator++(int);
};
.fi
.SH "DESCRIPTION"
.SS "regex_token_iterator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
regex_token_iterator();
.fi

.sp

.PP
Postconditions:
.RS 4
*this
is the end of sequence iterator\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
regex_token_iterator(BidiIter begin, BidiIter end, 
                     basic_regex< BidiIter > const & rex);
.fi

.sp

.PP
Parameters:
.RS 4
.PP
begin
.RS 4
The beginning of the character range to search\&.
.RE
.PP
end
.RS 4
The end of the character range to search\&.
.RE
.PP
rex
.RS 4
The regex pattern to search for\&.
.RE
.RE
.PP
Requires:
.RS 4
[begin,end) is a valid range\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename LetExpr> 
  regex_token_iterator(BidiIter begin, BidiIter end, 
                       basic_regex< BidiIter > const & rex, \fIunspecified\fR args);
.fi

.sp

.PP
Parameters:
.RS 4
.PP
args
.RS 4
A let() expression with argument bindings for semantic actions\&.
.RE
.PP
begin
.RS 4
The beginning of the character range to search\&.
.RE
.PP
end
.RS 4
The end of the character range to search\&.
.RE
.PP
rex
.RS 4
The regex pattern to search for\&.
.RE
.RE
.PP
Requires:
.RS 4
[begin,end) is a valid range\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename Subs> 
  regex_token_iterator(BidiIter begin, BidiIter end, 
                       basic_regex< BidiIter > const & rex, 
                       Subs const & subs, 
                       regex_constants::match_flag_type flags = regex_constants::match_default);
.fi

.sp

.PP
Parameters:
.RS 4
.PP
begin
.RS 4
The beginning of the character range to search\&.
.RE
.PP
end
.RS 4
The end of the character range to search\&.
.RE
.PP
flags
.RS 4
Optional match flags, used to control how the expression is matched against the sequence\&. (See match_flag_type\&.)
.RE
.PP
rex
.RS 4
The regex pattern to search for\&.
.RE
.PP
subs
.RS 4
A range of integers designating sub\-matches to be treated as tokens\&.
.RE
.RE
.PP
Requires:
.RS 4
[begin,end) is a valid range\&.
.RE
.PP
Requires:
.RS 4
subs
is either an integer greater or equal to \-1, or else an array or non\-empty
std::vector<>
of such integers\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename Subs, typename LetExpr> 
  regex_token_iterator(BidiIter begin, BidiIter end, 
                       basic_regex< BidiIter > const & rex, 
                       Subs const & subs, \fIunspecified\fR args, 
                       regex_constants::match_flag_type flags = regex_constants::match_default);
.fi

.sp

.PP
Parameters:
.RS 4
.PP
args
.RS 4
A let() expression with argument bindings for semantic actions\&.
.RE
.PP
begin
.RS 4
The beginning of the character range to search\&.
.RE
.PP
end
.RS 4
The end of the character range to search\&.
.RE
.PP
flags
.RS 4
Optional match flags, used to control how the expression is matched against the sequence\&. (See match_flag_type\&.)
.RE
.PP
rex
.RS 4
The regex pattern to search for\&.
.RE
.PP
subs
.RS 4
A range of integers designating sub\-matches to be treated as tokens\&.
.RE
.RE
.PP
Requires:
.RS 4
[begin,end) is a valid range\&.
.RE
.PP
Requires:
.RS 4
subs
is either an integer greater or equal to \-1, or else an array or non\-empty
std::vector<>
of such integers\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
regex_token_iterator(regex_token_iterator< BidiIter > const & that);
.fi

.sp

.PP
Postconditions:
.RS 4
*this == that
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
regex_token_iterator< BidiIter > & 
operator=(regex_token_iterator< BidiIter > const & that);
.fi

.sp

.PP
Postconditions:
.RS 4
*this == that
.RE
.RE

.SS "regex_token_iterator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
value_type const & operator*() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
value_type const * operator\->() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
regex_token_iterator< BidiIter > & operator++();
.fi

.sp
If N == \-1 then sets *this equal to the end of sequence iterator\&. Otherwise if N+1 < subs\&.size(), then increments N and sets result equal to ((subs[N] == \-1) ? value_type(what\&.prefix()\&.str()) : value_type(what[subs[N]]\&.str()))\&. Otherwise if what\&.prefix()\&.first != what[0]\&.second and if the element match_prev_avail is not set in flags then sets it\&. Then locates the next match as if by calling regex_search(what[0]\&.second, end, what, *pre, flags), with the following variation: in the event that the previous match found was of zero length (what[0]\&.length() == 0) then attempts to find a non\-zero length match starting at what[0]\&.second, only if that fails and provided what[0]\&.second != suffix()\&.second does it look for a (possibly zero length) match starting from what[0]\&.second + 1\&. If such a match is found then sets N equal to zero, and sets result equal to ((subs[N] == \-1) ? value_type(what\&.prefix()\&.str()) : value_type(what[subs[N]]\&.str()))\&. Otherwise if no further matches were found, then let last_end be the endpoint of the last match that was found\&. Then if last_end != end and subs[0] == \-1 sets N equal to \-1 and sets result equal to value_type(last_end, end)\&. Otherwise sets *this equal to the end of sequence iterator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
regex_token_iterator< BidiIter > operator++(int);
.fi

.RE


