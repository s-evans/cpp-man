.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::log::sinks::basic_custom_mapping \- Customizable mapping\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/attribute_mapping\&.hpp>

template<typename MappedT, typename AttributeValueT = int> 
class basic_custom_mapping :
  public boost::log::sinks::basic_mapping< MappedT >
{
public:
  // types
  typedef AttributeValueT        attribute_value_type;  // Attribute contained value type\&. 
  typedef base_type::mapped_type mapped_type;           // Mapped value type\&. 

  // construct/copy/destruct
  explicit basic_custom_mapping(attribute_name const &, mapped_type const &);

  // public member functions
  mapped_type operator()(record_view const &) const;
  implementation_defined operator[](attribute_value_type const &);
};
.fi
.SH "DESCRIPTION"
.PP
The class allows to setup a custom mapping between an attribute and native values\&. The mapping should be initialized similarly to the standard
map
container, by using indexing operator and assignment\&.
.PP
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Unlike many other components of the library, exact type of the attribute value must be specified in the template parameter
AttributeValueT\&. Type sequences are not supported\&.
.sp .5v
.RE

.SS "basic_custom_mapping public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit basic_custom_mapping(attribute_name const & name, 
                              mapped_type const & default_value);
.fi

.sp
Constructor
.sp

.PP
Parameters:
.RS 4
.PP
default_value
.RS 4
The default native value that is returned if the conversion cannot be performed
.RE
.PP
name
.RS 4
Attribute name
.RE
.RE
.RE

.SS "basic_custom_mapping public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
mapped_type operator()(record_view const & rec) const;
.fi

.sp
Extraction operator\&. Extracts the attribute value and attempts to map it onto the native value\&.
.sp

.PP
Parameters:
.RS 4
.PP
rec
.RS 4
A log record to extract value from
.RE
.RE
.PP
Returns:
.RS 4
A mapped value, if mapping was successful, or the default value if mapping did not succeed\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
implementation_defined operator[](attribute_value_type const & key);
.fi

.sp
Insertion operator
.sp

.PP
Parameters:
.RS 4
.PP
key
.RS 4
Attribute value to be mapped
.RE
.RE
.PP
Returns:
.RS 4
An object of unspecified type that allows to insert a new mapping through assignment\&. The
\fIkey\fR
argument becomes the key attribute value, and the assigned value becomes the mapped native value\&.
.RE
.RE


