.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS POSI" 3 "" "" ""
.SH "NAME"
boost::program_options::positional_options_description
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/positional_options\&.hpp>


class positional_options_description {
public:
  // construct/copy/destruct
  positional_options_description();

  // public member functions
  positional_options_description & add(const char *, int);
  unsigned max_total_count() const;
  const std::string & name_for_position(unsigned) const;
};
.fi
.SH "DESCRIPTION"
.PP
Describes positional options\&.
.PP
The class allows to guess option names for positional options, which are specified on the command line and are identified by the position\&. The class uses the information provided by the user to associate a name with every positional option, or tell that no name is known\&.
.PP
The primary assumption is that only the relative order of the positional options themselves matters, and that any interleaving ordinary options don\'t affect interpretation of positional options\&.
.PP
The user initializes the class by specifying that first N positional options should be given the name X1, following M options should be given the name X2 and so on\&.
.SS "positional_options_description public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
positional_options_description();
.fi

.RE

.SS "positional_options_description public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
positional_options_description & add(const char * name, int max_count);
.fi

.sp
Species that up to \'max_count\' next positional options should be given the \'name\'\&. The value of \'\-1\' means \'unlimited\'\&. No calls to \'add\' can be made after call with \'max_value\' equal to \'\-1\'\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
unsigned max_total_count() const;
.fi

.sp
Returns the maximum number of positional options that can be present\&. Can return (numeric_limits<unsigned>::max)() to indicate unlimited number\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
const std::string & name_for_position(unsigned position) const;
.fi

.sp
Returns the name that should be associated with positional options at \'position\'\&. Precondition: position < max_total_count()
.RE


