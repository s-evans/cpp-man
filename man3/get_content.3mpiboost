.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPL" 3 "" "" ""
.SH "NAME"
boost::mpi::get_content \- Returns the content of an object, suitable for transmission via Boost\&.MPI\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/mpi/skeleton_and_content\&.hpp>


template<typename T> const content get_content(const T & x);
.fi
.SH "DESCRIPTION"
.PP
The function creates an absolute MPI datatype for the object, where all offsets are counted from the address 0 (a\&.k\&.a\&.
MPI_BOTTOM) instead of the address
&x
of the object\&. This allows the creation of MPI data types for complex data structures containing pointers, such as linked lists or trees\&.
.PP
The disadvantage, compared to relative MPI data types is that for each object a new MPI data type has to be created\&.
.PP
The contents of an object can only be transmitted when the receiver already has an object with the same structure or shape as the sender\&. To accomplish this, first transmit the skeleton of the object using, e\&.g\&.,
skeleton()
or
skeleton_proxy\&.
.PP
The type
T
has to allow creation of an absolute MPI data type (content)\&.
.PP

.PP
Parameters:
.RS 4
.PP
x
.RS 4
the object for which the content will be transmitted\&.
.RE
.RE
.PP
Returns:
.RS 4
the content of the object
x, which can be used for transmission via
send,
recv, or
broadcast\&.
.RE

