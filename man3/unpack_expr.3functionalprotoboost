.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::proto::functional::unpack_expr \- A PolymorphicFunctionObject equivalent to the proto::unpack_expr() function\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/make_expr\&.hpp>

template<typename Tag, typename Domain = proto::deduce_domain> 
struct unpack_expr :  proto::callable {
  // member classes/structs/unions
  template<typename This, typename Sequence> 
  struct result<This(Sequence)> :  
    proto::result_of::unpack_expr<
      Tag,
      Domain,
      typename boost::remove_reference< Sequence >::type
    >
  {
  };

  // public member functions
  template<typename Sequence> 
    typename proto::result_of::unpack_expr< Tag, Domain, Sequence const >::type const 
    operator()(Sequence const &) const;
};
.fi
.SH "DESCRIPTION"
.PP
In all cases,
proto::functional::unpack_expr<Tag, Domain>()(seq)
is equivalent to
proto::unpack_expr()<Tag, Domain>(seq)\&.
.PP

proto::functional::unpack_expr<Tag>()(seq)
is equivalent to
proto::unpack_expr()<Tag>(seq)\&.
.SS "unpack_expr public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Sequence> 
  typename proto::result_of::unpack_expr< Tag, Domain, Sequence const >::type const 
  operator()(Sequence const & sequence) const;
.fi

.sp
Construct an expression node with tag type
Tag
and in the domain
Domain\&.
.PP
Parameters:
.RS 4
.PP
sequence
.RS 4
A Fusion Forward Sequence
.RE
.RE
.PP
Returns:
.RS 4

proto::unpack_expr<Tag, Domain>(sequence)
.RE
.RE


