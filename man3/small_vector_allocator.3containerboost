.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::container::small_vector_allocator
.SH "SYNOPSIS"
.\" void_pointer: Class template small_vector_allocator
.\" Class template small_vector_allocator: void_pointer
.\" value_type: Class template small_vector_allocator
.\" Class template small_vector_allocator: value_type
.\" swap: Class template small_vector_allocator
.\" Class template small_vector_allocator: swap
.\" small_vector_allocator: Class template small_vector_allocator
.\" Class template small_vector_allocator: small_vector_allocator
.\" size_type: Class template small_vector_allocator
.\" Class template small_vector_allocator: size_type
.\" reference: Class template small_vector_allocator
.\" Class template small_vector_allocator: reference
.\" rebind: Class template small_vector_allocator
.\" Class template small_vector_allocator: rebind
.\" propagate_on_container_swap: Class template small_vector_allocator
.\" Class template small_vector_allocator: propagate_on_container_swap
.\" propagate_on_container_move_assignment: Class template small_vector_allocator
.\" Class template small_vector_allocator: propagate_on_container_move_assignment
.\" propagate_on_container_copy_assignment: Class template small_vector_allocator
.\" Class template small_vector_allocator: propagate_on_container_copy_assignment
.\" pointer: Class template small_vector_allocator
.\" Class template small_vector_allocator: pointer
.\" other: Class template small_vector_allocator
.\" Class template small_vector_allocator: other
.\" is_partially_propagable: Class template small_vector_allocator
.\" Class template small_vector_allocator: is_partially_propagable
.\" is_always_equal: Class template small_vector_allocator
.\" Class template small_vector_allocator: is_always_equal
.\" difference_type: Class template small_vector_allocator
.\" Class template small_vector_allocator: difference_type
.\" deallocate: Class template small_vector_allocator
.\" Class template small_vector_allocator: deallocate
.\" const_void_pointer: Class template small_vector_allocator
.\" Class template small_vector_allocator: const_void_pointer
.\" const_reference: Class template small_vector_allocator
.\" Class template small_vector_allocator: const_reference
.\" const_pointer: Class template small_vector_allocator
.\" Class template small_vector_allocator: const_pointer
.\" allocate: Class template small_vector_allocator
.\" Class template small_vector_allocator: allocate

.sp
.nf
// In header: <boost/container/small_vector\&.hpp>

template<typename Allocator> 
class small_vector_allocator : public Allocator {
public:
  // types
  typedef allocator_traits< Allocator >::value_type                             value_type;                            
  typedef allocator_traits< Allocator >::pointer                                pointer;                               
  typedef allocator_traits< Allocator >::const_pointer                          const_pointer;                         
  typedef allocator_traits< Allocator >::reference                              reference;                             
  typedef allocator_traits< Allocator >::const_reference                        const_reference;                       
  typedef allocator_traits< Allocator >::size_type                              size_type;                             
  typedef allocator_traits< Allocator >::difference_type                        difference_type;                       
  typedef allocator_traits< Allocator >::void_pointer                           void_pointer;                          
  typedef allocator_traits< Allocator >::const_void_pointer                     const_void_pointer;                    
  typedef allocator_traits< Allocator >::propagate_on_container_copy_assignment propagate_on_container_copy_assignment;
  typedef allocator_traits< Allocator >::propagate_on_container_move_assignment propagate_on_container_move_assignment;
  typedef allocator_traits< Allocator >::propagate_on_container_swap            propagate_on_container_swap;           
  typedef implementation_defined                                                is_always_equal;                         // An integral constant with member ::value == false
  typedef implementation_defined                                                is_partially_propagable;                 // An integral constant with member ::value == true

  // member classes/structs/unions
  template<typename T2> 
  struct rebind {
    // types
    typedef allocator_traits< Allocator >::template rebind_alloc< T2 >::type other;
  };

  // construct/copy/destruct
  template<class\&.\&.\&. Args> explicit small_vector_allocator(Args &&\&.\&.\&.);
  small_vector_allocator(const small_vector_allocator &) noexcept;
  small_vector_allocator(small_vector_allocator &&) noexcept;
  template<typename OtherAllocator> 
    small_vector_allocator(const small_vector_allocator< OtherAllocator > &) noexcept;
  template<typename OtherAllocator> 
    small_vector_allocator(small_vector_allocator< OtherAllocator > &&) noexcept;
  small_vector_allocator & operator=(const small_vector_allocator &) noexcept;
  small_vector_allocator & operator=(small_vector_allocator &&) noexcept;
  template<typename OtherAllocator> 
    small_vector_allocator & 
    operator=(const small_vector_allocator< OtherAllocator > &) noexcept;
  template<typename OtherAllocator> 
    small_vector_allocator & 
    operator=(small_vector_allocator< OtherAllocator > &&) noexcept;

  // public member functions
  pointer allocate(size_type, const_void_pointer = const_void_pointer());
  void deallocate(pointer, size_type) noexcept;
  size_type max_size() const noexcept;
  small_vector_allocator select_on_container_copy_construction() const;
  bool storage_is_unpropagable(pointer) const;

  // friend functions
  friend void swap(small_vector_allocator &, small_vector_allocator &) noexcept;
  friend bool operator==(const small_vector_allocator &, 
                         const small_vector_allocator &) noexcept;
  friend bool operator!=(const small_vector_allocator &, 
                         const small_vector_allocator &) noexcept;
};
.fi
.SH "DESCRIPTION"
.PP
A non\-standard allocator used to implement
small_vector\&. Users should never use it directly\&. It is described here for documentation purposes\&.
.PP
This allocator inherits from a standard\-conforming allocator and forwards member functions to the standard allocator except when internal storage is being used as memory source\&.
.PP
This allocator is a "partially_propagable" allocator and defines
is_partially_propagable
as true_type\&.
.PP
A partially propagable allocator means that not all storage allocatod by an instance of
small_vector_allocator
can be deallocated by another instance of this type, even if both instances compare equal or an instance is propagated to another one using the copy/move constructor or assignment\&. The storage that can never be propagated is identified by
storage_is_unpropagable(p)\&.
.PP
boost::container::vector
supports partially propagable allocators fallbacking to deep copy/swap/move operations when internal storage is being used to store vector elements\&.
.PP
small_vector_allocator
assumes that will be instantiated as
boost::container::vector< T, small_vector_allocator<Allocator> >
and internal storage can be obtained downcasting that vector to
small_vector_base<T>\&.
.SS "small_vector_allocator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<class\&.\&.\&. Args> explicit small_vector_allocator(Args &&\&.\&.\&. args);
.fi

Constructor from arbitrary arguments\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
small_vector_allocator(const small_vector_allocator & other) noexcept;
.fi

.sp
Constructor from other
small_vector_allocator\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
small_vector_allocator(small_vector_allocator && other) noexcept;
.fi

.sp
Move constructor from
small_vector_allocator\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename OtherAllocator> 
  small_vector_allocator(const small_vector_allocator< OtherAllocator > & other) noexcept;
.fi

.sp
Constructor from related
small_vector_allocator\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename OtherAllocator> 
  small_vector_allocator(small_vector_allocator< OtherAllocator > && other) noexcept;
.fi

.sp
Move constructor from related
small_vector_allocator\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
small_vector_allocator & 
operator=(const small_vector_allocator & other) noexcept;
.fi

.sp
Assignment from other
small_vector_allocator\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
small_vector_allocator & operator=(small_vector_allocator && other) noexcept;
.fi

.sp
Move constructor from other
small_vector_allocator\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
template<typename OtherAllocator> 
  small_vector_allocator & 
  operator=(const small_vector_allocator< OtherAllocator > & other) noexcept;
.fi

.sp
Assignment from related
small_vector_allocator\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
template<typename OtherAllocator> 
  small_vector_allocator & 
  operator=(small_vector_allocator< OtherAllocator > && other) noexcept;
.fi

.sp
Move assignment from related
small_vector_allocator\&. Never throws
.RE

.SS "small_vector_allocator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" allocate: Class template small_vector_allocator
.\" Class template small_vector_allocator: allocate

.sp

.nf
pointer allocate(size_type count, 
                 const_void_pointer hint = const_void_pointer());
.fi

Allocates storage from the standard\-conforming allocator\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" deallocate: Class template small_vector_allocator
.\" Class template small_vector_allocator: deallocate

.sp

.nf
void deallocate(pointer ptr, size_type n) noexcept;
.fi

.sp
Deallocates previously allocated memory\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
size_type max_size() const noexcept;
.fi

.sp
Returns the maximum number of elements that could be allocated\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
small_vector_allocator select_on_container_copy_construction() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
bool storage_is_unpropagable(pointer p) const;
.fi

.RE

.SS "small_vector_allocator friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" swap: Class template small_vector_allocator
.\" Class template small_vector_allocator: swap

.sp

.nf
friend void swap(small_vector_allocator & l, small_vector_allocator & r) noexcept;
.fi

.sp
Swaps two allocators, does nothing because this
small_vector_allocator
is stateless
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
friend bool operator==(const small_vector_allocator & l, 
                       const small_vector_allocator & r) noexcept;
.fi

.sp
An
small_vector_allocator
always compares to true, as memory allocated with one instance can be deallocated by another instance (except for unpropagable storage)
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator!=(const small_vector_allocator & l, 
                       const small_vector_allocator & r) noexcept;
.fi

.sp
An
small_vector_allocator
always compares to false, as memory allocated with one instance can be deallocated by another instance
.RE


