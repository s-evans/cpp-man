.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::icl::open_interval
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/icl/open_interval\&.hpp>

template<typename DomainT, 
         ICL_COMPARE Compare = ICL_COMPARE_INSTANCE(ICL_COMPARE_DEFAULT, DomainT)> 
class open_interval {
public:
  // types
  typedef open_interval< DomainT, Compare > type;       
  typedef DomainT                           domain_type;

  // construct/copy/destruct
  open_interval();
  explicit open_interval(const DomainT &);
  open_interval(const DomainT &, const DomainT &);

  // public member functions
  typedef ICL_COMPARE_DOMAIN(Compare, DomainT);
  DomainT lower() const;
  DomainT upper() const;
};
.fi
.SH "DESCRIPTION"
.SS "open_interval public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
open_interval();
.fi

.sp
Default constructor; yields an empty interval
(0,0)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit open_interval(const DomainT & val);
.fi

.sp
Constructor for an open singleton interval
(val\-1,val+1)
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
open_interval(const DomainT & low, const DomainT & up);
.fi

.sp
Interval from
low
to
up
with bounds
bounds
.RE

.SS "open_interval public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
typedef ICL_COMPARE_DOMAIN(Compare, DomainT);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
DomainT lower() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
DomainT upper() const;
.fi

.RE


