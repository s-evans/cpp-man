.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS PARAM_TYPE" 3 "" "" ""
.SH "NAME"
boost::random::discrete_distribution::param_type
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/discrete_distribution\&.hpp>



class param_type {
public:
  // types
  typedef discrete_distribution distribution_type;

  // construct/copy/destruct
  param_type();
  template<typename Iter> param_type(Iter, Iter);
  param_type(const std::initializer_list< WeightType > &);
  template<typename Range> explicit param_type(const Range &);
  template<typename Func> param_type(std::size_t, double, double, Func);

  // public member functions
  std::vector< WeightType > probabilities() const;

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, const param_type &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, const param_type &);
  friend bool operator==(const param_type &, const param_type &);
  friend bool operator!=(const param_type &, const param_type &);
};
.fi
.SH "DESCRIPTION"
.SS "param_type public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
param_type();
.fi

.sp
Constructs a
param_type
object, representing a distribution with
\&\s-2\u[11]\d\s+2[IMAGE]\&\s-2\u[2]\d\s+2 [$p(0) = 1$]
and
\&\s-2\u[12]\d\s+2[IMAGE]\&\s-2\u[13]\d\s+2 [$p(k|k>0) = 0$]\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename Iter> param_type(Iter first, Iter last);
.fi

.sp
If
first
==
last, equivalent to the default constructor\&. Otherwise, the values of the range represent weights for the possible values of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
param_type(const std::initializer_list< WeightType > & wl);
.fi

.sp
If wl\&.size() == 0, equivalent to the default constructor\&. Otherwise, the values of the
initializer_list
represent weights for the possible values of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename Range> explicit param_type(const Range & range);
.fi

.sp
If the range is empty, equivalent to the default constructor\&. Otherwise, the elements of the range represent weights for the possible values of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename Func> 
  param_type(std::size_t nw, double xmin, double xmax, Func fw);
.fi

.sp
If nw is zero, equivalent to the default constructor\&. Otherwise, the range of the distribution is [0, nw), and the weights are found by calling fw with values evenly distributed between
\&\s-2\u[14]\d\s+2[IMAGE]\&\s-2\u[6]\d\s+2 [$\mbox{xmin} + \delta/2$]
and
\&\s-2\u[15]\d\s+2[IMAGE]\&\s-2\u[8]\d\s+2 [$\mbox{xmax} - \delta/2$], where
\&\s-2\u[16]\d\s+2[IMAGE]\&\s-2\u[10]\d\s+2 [$\delta = (\mbox{xmax} - \mbox{xmin})/\mbox{nw}$]\&.
.RE

.SS "param_type public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
std::vector< WeightType > probabilities() const;
.fi

.sp
Returns a vector containing the probabilities of each possible value of the distribution\&.
.RE

.SS "param_type friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const param_type & param);
.fi

.sp
Writes the parameters to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const param_type & param);
.fi

.sp
Reads the parameters from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const param_type & lhs, const param_type & rhs);
.fi

.sp
Returns true if the two sets of parameters are the same\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const param_type & lhs, const param_type & rhs);
.fi

.sp
Returns true if the two sets of parameters are different\&.
.RE


