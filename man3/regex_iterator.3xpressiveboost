.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLA" 3 "" "" ""
.SH "NAME"
boost::xpressive::regex_iterator
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_iterator\&.hpp>

template<typename BidiIter> 
struct regex_iterator {
  // types
  typedef basic_regex< BidiIter >               regex_type;       
  typedef match_results< BidiIter >             value_type;       
  typedef iterator_difference< BidiIter >::type difference_type;  
  typedef value_type const *                    pointer;          
  typedef value_type const &                    reference;        
  typedef std::forward_iterator_tag             iterator_category;

  // construct/copy/destruct
  regex_iterator();
  regex_iterator(BidiIter, BidiIter, basic_regex< BidiIter > const &, 
                 regex_constants::match_flag_type = regex_constants::match_default);
  template<typename LetExpr> 
    regex_iterator(BidiIter, BidiIter, basic_regex< BidiIter > const &, 
                   \fIunspecified\fR, 
                   regex_constants::match_flag_type = regex_constants::match_default);
  regex_iterator(regex_iterator< BidiIter > const &);
  regex_iterator< BidiIter > & operator=(regex_iterator< BidiIter > const &);

  // public member functions
  value_type const & operator*() const;
  value_type const * operator\->() const;
  regex_iterator< BidiIter > & operator++();
  regex_iterator< BidiIter > operator++(int);
};
.fi
.SH "DESCRIPTION"
.SS "regex_iterator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
regex_iterator();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
regex_iterator(BidiIter begin, BidiIter end, 
               basic_regex< BidiIter > const & rex, 
               regex_constants::match_flag_type flags = regex_constants::match_default);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename LetExpr> 
  regex_iterator(BidiIter begin, BidiIter end, 
                 basic_regex< BidiIter > const & rex, \fIunspecified\fR args, 
                 regex_constants::match_flag_type flags = regex_constants::match_default);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
regex_iterator(regex_iterator< BidiIter > const & that);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
regex_iterator< BidiIter > & 
operator=(regex_iterator< BidiIter > const & that);
.fi

.RE

.SS "regex_iterator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
value_type const & operator*() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
value_type const * operator\->() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
regex_iterator< BidiIter > & operator++();
.fi

.sp
If what\&.prefix()\&.first != what[0]\&.second and if the element match_prev_avail is not set in flags then sets it\&. Then behaves as if by calling regex_search(what[0]\&.second, end, what, *pre, flags), with the following variation: in the event that the previous match found was of zero length (what[0]\&.length() == 0) then attempts to find a non\-zero length match starting at what[0]\&.second, only if that fails and provided what[0]\&.second != suffix()\&.second does it look for a (possibly zero length) match starting from what[0]\&.second + 1\&. If no further match is found then sets *this equal to the end of sequence iterator\&.
.PP
Postconditions:
.RS 4
(*this)\->size() == pre\->mark_count() + 1
.RE
.PP
Postconditions:
.RS 4
(*this)\->empty() == false
.RE
.PP
Postconditions:
.RS 4
(*this)\->prefix()\&.first == An iterator denoting the end point of the previous match found
.RE
.PP
Postconditions:
.RS 4
(*this)\->prefix()\&.last == (**this)[0]\&.first
.RE
.PP
Postconditions:
.RS 4
(*this)\->prefix()\&.matched == (*this)\->prefix()\&.first != (*this)\->prefix()\&.second
.RE
.PP
Postconditions:
.RS 4
(*this)\->suffix()\&.first == (**this)[0]\&.second
.RE
.PP
Postconditions:
.RS 4
(*this)\->suffix()\&.last == end
.RE
.PP
Postconditions:
.RS 4
(*this)\->suffix()\&.matched == (*this)\->suffix()\&.first != (*this)\->suffix()\&.second
.RE
.PP
Postconditions:
.RS 4
(**this)[0]\&.first == The starting iterator for this match\&.
.RE
.PP
Postconditions:
.RS 4
(**this)[0]\&.second == The ending iterator for this match\&.
.RE
.PP
Postconditions:
.RS 4
(**this)[0]\&.matched == true if a full match was found, and false if it was a partial match (found as a result of the match_partial flag being set)\&.
.RE
.PP
Postconditions:
.RS 4
(**this)[n]\&.first == For all integers n < (*this)\->size(), the start of the sequence that matched sub\-expression n\&. Alternatively, if sub\-expression n did not participate in the match, then end\&.
.RE
.PP
Postconditions:
.RS 4
(**this)[n]\&.second == For all integers n < (*this)\->size(), the end of the sequence that matched sub\-expression n\&. Alternatively, if sub\-expression n did not participate in the match, then end\&.
.RE
.PP
Postconditions:
.RS 4
(**this)[n]\&.matched == For all integers n < (*this)\->size(), true if sub\-expression n participated in the match, false otherwise\&.
.RE
.PP
Postconditions:
.RS 4
(*this)\->position() == The distance from the start of the original sequence being iterated, to the start of this match\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
regex_iterator< BidiIter > operator++(int);
.fi

.RE


