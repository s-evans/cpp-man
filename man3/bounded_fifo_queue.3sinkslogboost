.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLA" 3 "" "" ""
.SH "NAME"
boost::log::sinks::bounded_fifo_queue \- Bounded FIFO log record queueing strategy\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/bounded_fifo_queue\&.hpp>

template<std::size_t MaxQueueSizeV, typename OverflowStrategyT> 
class bounded_fifo_queue : private OverflowStrategyT {
public:
  // construct/copy/destruct
  bounded_fifo_queue();
  template<typename ArgsT> explicit bounded_fifo_queue(ArgsT const &);

  // protected member functions
  void enqueue(record_view const &);
  bool try_enqueue(record_view const &);
  bool try_dequeue_ready(record_view &);
  bool try_dequeue(record_view &);
  bool dequeue_ready(record_view &);
  void interrupt_dequeue();
};
.fi
.SH "DESCRIPTION"
.PP
The
bounded_fifo_queue
class is intended to be used with the
asynchronous_sink
frontend as a log record queueing strategy\&.
.PP
This strategy describes log record queueing logic\&. The queue has a limited capacity, upon reaching which the enqueue operation will invoke the overflow handling strategy specified in the
OverflowStrategyT
template parameter to handle the situation\&. The library provides overflow handling strategies for most common cases:
drop_on_overflow
will silently discard the log record, and
block_on_overflow
will put the enqueueing thread to wait until there is space in the queue\&.
.PP
The log record queue imposes no ordering over the queued elements aside from the order in which they are enqueued\&.
.SS "bounded_fifo_queue public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
bounded_fifo_queue();
.fi

Default constructor\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename ArgsT> explicit bounded_fifo_queue(ArgsT const &);
.fi

Initializing constructor\&. .RE

.SS "bounded_fifo_queue protected member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void enqueue(record_view const & rec);
.fi

Enqueues log record to the queue\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
bool try_enqueue(record_view const & rec);
.fi

Attempts to enqueue log record to the queue\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
bool try_dequeue_ready(record_view & rec);
.fi

Attempts to dequeue a log record ready for processing from the queue, does not block if the queue is empty\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
bool try_dequeue(record_view & rec);
.fi

Attempts to dequeue log record from the queue, does not block if the queue is empty\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
bool dequeue_ready(record_view & rec);
.fi

Dequeues log record from the queue, blocks if the queue is empty\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void interrupt_dequeue();
.fi

Wakes a thread possibly blocked in the dequeue method\&. .RE


