.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS OPTIONS_DE" 3 "" "" ""
.SH "NAME"
boost::program_options::options_description
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/options_description\&.hpp>


class options_description {
public:
  // construct/copy/destruct
  options_description(unsigned = m_default_line_length, 
                      unsigned = m_default_line_length/2);
  options_description(const std::string &, unsigned = m_default_line_length, 
                      unsigned = m_default_line_length/2);

  // public member functions
  void add(shared_ptr< option_description >);
  options_description & add(const options_description &);
  unsigned get_option_column_width() const;
  options_description_easy_init add_options();
  const option_description & 
  find(const std::string &, bool, bool = false, bool = false) const;
  const option_description * 
  find_nothrow(const std::string &, bool, bool = false, bool = false) const;
  const std::vector< shared_ptr< option_description > > & options() const;
  void print(std::ostream &, unsigned = 0) const;

  // friend functions
  friend BOOST_PROGRAM_OPTIONS_DECL std::ostream & 
  operator<<(std::ostream &, const options_description &);

  // public data members
  static const unsigned m_default_line_length;
};
.fi
.SH "DESCRIPTION"
.PP
A set of option descriptions\&. This provides convenient interface for adding new option (the add_options) method, and facilities to search for options by name\&.
.PP
See here for option adding interface discussion\&.
.PP \fBSee Also:\fR.PP option_description
.SS "options_description public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
options_description(unsigned line_length = m_default_line_length, 
                    unsigned min_description_length = m_default_line_length/2);
.fi

.sp
Creates the instance\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
options_description(const std::string & caption, 
                    unsigned line_length = m_default_line_length, 
                    unsigned min_description_length = m_default_line_length/2);
.fi

.sp
Creates the instance\&. The \'caption\' parameter gives the name of this \'options_description\' instance\&. Primarily useful for output\&. The \'description_length\' specifies the number of columns that should be reserved for the description text; if the option text encroaches into this, then the description will start on the next line\&.
.RE

.SS "options_description public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void add(shared_ptr< option_description > desc);
.fi

.sp
Adds new variable description\&. Throws duplicate_variable_error if either short or long name matches that of already present one\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
options_description & add(const options_description & desc);
.fi

.sp
Adds a group of option description\&. This has the same effect as adding all option_descriptions in \'desc\' individually, except that output operator will show a separate group\&. Returns *this\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
unsigned get_option_column_width() const;
.fi

.sp
Find the maximum width of the option column, including options in groups\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
options_description_easy_init add_options();
.fi

.sp
Returns an object of implementation\-defined type suitable for adding options to
options_description\&. The returned object will have overloaded operator() with parameter type matching \'option_description\' constructors\&. Calling the operator will create new
option_description
instance and add it\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
const option_description & 
find(const std::string & name, bool approx, bool long_ignore_case = false, 
     bool short_ignore_case = false) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
const option_description * 
find_nothrow(const std::string & name, bool approx, 
             bool long_ignore_case = false, bool short_ignore_case = false) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
const std::vector< shared_ptr< option_description > > & options() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
void print(std::ostream & os, unsigned width = 0) const;
.fi

.sp
Outputs \'desc\' to the specified stream, calling \'f\' to output each
option_description
element\&.
.RE

.SS "options_description friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
friend BOOST_PROGRAM_OPTIONS_DECL std::ostream & 
operator<<(std::ostream & os, const options_description & desc);
.fi

.sp
Produces a human readable output of \'desc\', listing options, their descriptions and allowed parameters\&. Other
options_description
instances previously passed to add will be output separately\&.
.RE


