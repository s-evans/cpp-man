.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS SEED_SEQ" 3 "" "" ""
.SH "NAME"
boost::random::seed_seq
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/seed_seq\&.hpp>


class seed_seq {
public:
  // types
  typedef boost::uint_least32_t result_type;

  // construct/copy/destruct
  seed_seq();
  template<typename T> seed_seq(const std::initializer_list< T > &);
  template<typename Iter> seed_seq(Iter, Iter);
  template<typename Range> explicit seed_seq(const Range &);

  // public member functions
  template<typename Iter> void generate(Iter, Iter) const;
  std::size_t size() const;
  template<typename Iter> void param(Iter);
};
.fi
.SH "DESCRIPTION"
.PP
The class
seed_seq
stores a sequence of 32\-bit words for seeding a
pseudo\-random number generator
\&. These words will be combined to fill the entire state of the generator\&.
.SS "seed_seq public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
seed_seq();
.fi

.sp
Initializes a
seed_seq
to hold an empty sequence\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename T> seed_seq(const std::initializer_list< T > & il);
.fi

.sp
Initializes the sequence from an initializer_list\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename Iter> seed_seq(Iter first, Iter last);
.fi

.sp
Initializes the sequence from an iterator range\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename Range> explicit seed_seq(const Range & range);
.fi

.sp
Initializes the sequence from Boost\&.Range range\&.
.RE

.SS "seed_seq public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Iter> void generate(Iter first, Iter last) const;
.fi

.sp
Fills a range with 32\-bit values based on the stored sequence\&.
.sp
Requires: Iter must be a Random Access Iterator whose value type is an unsigned integral type at least 32 bits wide\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
std::size_t size() const;
.fi

.sp
Returns the size of the sequence\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename Iter> void param(Iter out);
.fi

.sp
Writes the stored sequence to iter\&.
.RE


