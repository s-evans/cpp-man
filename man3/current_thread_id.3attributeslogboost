.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS CURRENT_THR" 3 "" "" ""
.SH "NAME"
boost::log::attributes::current_thread_id \- A class of an attribute that always returns the current thread identifier\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/current_thread_id\&.hpp>


class current_thread_id : public attribute {
public:
  // types
  typedef thread_id value_type;  // A held attribute value type\&. 

  // member classes/structs/unions

  // Factory implementation\&.

  class impl : public attribute_value::impl {
  public:

    // public member functions
    virtual bool dispatch(type_dispatcher &);
    virtual intrusive_ptr< attribute_value::impl > detach_from_thread();
    virtual typeindex::type_index get_type() const;
  };

  // construct/copy/destruct
  current_thread_id();
  explicit current_thread_id(cast_source const &);
};
.fi
.SH "DESCRIPTION"
.PP
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
This attribute can be registered globally, it will still return the correct thread identifier, no matter which thread emits the log record\&.
.sp .5v
.RE

.SS "current_thread_id public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
current_thread_id();
.fi

.sp
Default constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit current_thread_id(cast_source const & source);
.fi

.sp
Constructor for casting support
.RE


