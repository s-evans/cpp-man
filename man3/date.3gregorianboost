.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS DATE" 3 "" "" ""
.SH "NAME"
boost::gregorian::date \- A date type based on gregorian_calendar\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/gregorian/greg_date\&.hpp>


class date :
  public date_time::date< date, gregorian_calendar, date_duration >
{
public:
  // types
  typedef gregorian_calendar::year_type        year_type;       
  typedef gregorian_calendar::month_type       month_type;      
  typedef gregorian_calendar::day_type         day_type;        
  typedef gregorian_calendar::day_of_year_type day_of_year_type;
  typedef gregorian_calendar::ymd_type         ymd_type;        
  typedef gregorian_calendar::date_rep_type    date_rep_type;   
  typedef gregorian_calendar::date_int_type    date_int_type;   
  typedef date_duration                        duration_type;   

  // construct/copy/destruct
  date();
  date(year_type, month_type, day_type);
  explicit date(const ymd_type &);
  explicit date(const date_int_type &);
  explicit date(date_rep_type);
  explicit date(special_values);

  // public member functions
  date_int_type julian_day() const;
  day_of_year_type day_of_year() const;
  date_int_type modjulian_day() const;
  int week_number() const;
  date_int_type day_number() const;
  date end_of_month() const;
};
.fi
.SH "DESCRIPTION"
.PP
This class is the primary interface for programming with greogorian dates\&. The is a lightweight type that can be freely passed by value\&. All comparison operators are supported\&.
.SS "date public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
date();
.fi

Default constructor constructs with not_a_date_time\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
date(year_type y, month_type m, day_type d);
.fi

Main constructor with year, month, day\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
explicit date(const ymd_type & ymd);
.fi

Constructor from a ymd_type structure\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
explicit date(const date_int_type & rhs);
.fi

Needed copy constructor\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
explicit date(date_rep_type rhs);
.fi

Needed copy constructor\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
explicit date(special_values sv);
.fi

Constructor for infinities, not a date, max and min date\&. .RE

.SS "date public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
date_int_type julian_day() const;
.fi

Return the Julian Day number for the date\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
day_of_year_type day_of_year() const;
.fi

Return the day of year 1\&.\&.365 or 1\&.\&.366 (for leap year) .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
date_int_type modjulian_day() const;
.fi

Return the Modified Julian Day number for the date\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
int week_number() const;
.fi

Return the iso 8601 week number 1\&.\&.53\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
date_int_type day_number() const;
.fi

Return the day number from the calendar\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
date end_of_month() const;
.fi

Return the last day of the current month\&. .RE


