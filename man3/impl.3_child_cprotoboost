.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE IM" 3 "" "" ""
.SH "NAME"
boost::proto::_child_c::impl
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/arg\&.hpp>


template<typename Expr, typename State, typename Data> 
struct impl :  proto::transform_impl< Expr, State, Data > {
  // types
  typedef typename proto::result_of::child_c< Expr, N >::type result_type;

  // public member functions
  typename proto::result_of::child_c< Expr, N >::type 
  operator()(typename impl::expr_param, typename impl::state_param, 
             typename impl::data_param) const;
};
.fi
.SH "DESCRIPTION"
.SS "impl public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
typename proto::result_of::child_c< Expr, N >::type 
operator()(typename impl::expr_param expr, typename impl::state_param, 
           typename impl::data_param) const;
.fi

.sp
Returns the N\-th child of
expr
.PP
Parameters:
.RS 4
.PP
expr
.RS 4
The current expression\&.
.RE
.RE
.PP
Requires:
.RS 4

Expr::proto_arity::value > N
.RE
.PP
Returns:
.RS 4

proto::child_c<N>(expr)
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


