.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT IMPL" 3 "" "" ""
.SH "NAME"
boost::log::attribute::impl \- A base class for an attribute value factory\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/attribute\&.hpp>



// A base class for an attribute value factory\&.

struct impl : public boost::intrusive_ref_counter< impl > {
  // construct/copy/destruct
  ~impl();

  // public member functions
  virtual attribute_value get_value() = 0;

  // public static functions
  static void * operator new(std::size_t);
  static void operator delete(void *, std::size_t) noexcept;
};
.fi
.SH "DESCRIPTION"
.PP
All attributes must derive their implementation from this class\&.
.SS "impl public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
~impl();
.fi

Virtual destructor\&. .RE

.SS "impl public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual attribute_value get_value() = 0;
.fi

.sp

.PP
Returns:
.RS 4
The actual attribute value\&. It shall not return empty values (exceptions shall be used to indicate errors)\&.
.RE
.RE

.SS "impl public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static void * operator new(std::size_t size);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static void operator delete(void * p, std::size_t size) noexcept;
.fi

.RE


