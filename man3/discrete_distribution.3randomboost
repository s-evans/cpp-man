.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::random::discrete_distribution
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/discrete_distribution\&.hpp>

template<typename IntType = int, typename WeightType = double> 
class discrete_distribution {
public:
  // types
  typedef WeightType input_type; 
  typedef IntType    result_type;

  // member classes/structs/unions

  class param_type {
  public:
    // types
    typedef discrete_distribution distribution_type;

    // construct/copy/destruct
    param_type();
    template<typename Iter> param_type(Iter, Iter);
    param_type(const std::initializer_list< WeightType > &);
    template<typename Range> explicit param_type(const Range &);
    template<typename Func> param_type(std::size_t, double, double, Func);

    // public member functions
    std::vector< WeightType > probabilities() const;

    // friend functions
    template<typename CharT, typename Traits> 
      friend std::basic_ostream< CharT, Traits > & 
      operator<<(std::basic_ostream< CharT, Traits > &, const param_type &);
    template<typename CharT, typename Traits> 
      friend std::basic_istream< CharT, Traits > & 
      operator>>(std::basic_istream< CharT, Traits > &, const param_type &);
    friend bool operator==(const param_type &, const param_type &);
    friend bool operator!=(const param_type &, const param_type &);
  };

  // construct/copy/destruct
  discrete_distribution();
  template<typename Iter> discrete_distribution(Iter, Iter);
  discrete_distribution(std::initializer_list< WeightType >);
  template<typename Range> explicit discrete_distribution(const Range &);
  template<typename Func> 
    discrete_distribution(std::size_t, double, double, Func);
  explicit discrete_distribution(const param_type &);

  // public member functions
  template<typename URNG> IntType operator()(URNG &) const;
  template<typename URNG> IntType operator()(URNG &, const param_type &) const;
  result_type min() const;
  result_type max() const;
  std::vector< WeightType > probabilities() const;
  param_type param() const;
  void param(const param_type &);
  void reset();

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const discrete_distribution &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, 
               const discrete_distribution &);
  friend bool operator==(const discrete_distribution &, 
                         const discrete_distribution &);
  friend bool operator!=(const discrete_distribution &, 
                         const discrete_distribution &);
};
.fi
.SH "DESCRIPTION"
.PP
The class
discrete_distribution
models a
random distribution
\&. It produces integers in the range [0, n) with the probability of producing each value is specified by the parameters of the distribution\&.
.SS "discrete_distribution public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
discrete_distribution();
.fi

.sp
Creates a new
discrete_distribution
object that has
\&\s-2\u[1]\d\s+2[IMAGE]\&\s-2\u[2]\d\s+2 [$p(0) = 1$]
and
\&\s-2\u[3]\d\s+2[IMAGE]\&\s-2\u[4]\d\s+2 [$p(i|i>0) = 0$]\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename Iter> discrete_distribution(Iter first, Iter last);
.fi

.sp
Constructs a
discrete_distribution
from an iterator range\&. If
first
==
last, equivalent to the default constructor\&. Otherwise, the values of the range represent weights for the possible values of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
discrete_distribution(std::initializer_list< WeightType > wl);
.fi

.sp
Constructs a
discrete_distribution
from a
std::initializer_list\&. If the
initializer_list
is empty, equivalent to the default constructor\&. Otherwise, the values of the
initializer_list
represent weights for the possible values of the distribution\&. For example, given the distribution
.sp

.sp
.if n \{\
.RS 4
.\}
.nf
discrete_distribution<> dist{1, 4, 5};

.fi
.if n \{\
.RE
.\}

.sp
The probability of a 0 is 1/10, the probability of a 1 is 2/5, the probability of a 2 is 1/2, and no other values are possible\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename Range> explicit discrete_distribution(const Range & range);
.fi

.sp
Constructs a
discrete_distribution
from a Boost\&.Range range\&. If the range is empty, equivalent to the default constructor\&. Otherwise, the values of the range represent weights for the possible values of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename Func> 
  discrete_distribution(std::size_t nw, double xmin, double xmax, Func fw);
.fi

.sp
Constructs a
discrete_distribution
that approximates a function\&. If nw is zero, equivalent to the default constructor\&. Otherwise, the range of the distribution is [0, nw), and the weights are found by calling fw with values evenly distributed between
\&\s-2\u[5]\d\s+2[IMAGE]\&\s-2\u[6]\d\s+2 [$\mbox{xmin} + \delta/2$]
and
\&\s-2\u[7]\d\s+2[IMAGE]\&\s-2\u[8]\d\s+2 [$\mbox{xmax} - \delta/2$], where
\&\s-2\u[9]\d\s+2[IMAGE]\&\s-2\u[10]\d\s+2 [$\delta = (\mbox{xmax} - \mbox{xmin})/\mbox{nw}$]\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
explicit discrete_distribution(const param_type & param);
.fi

.sp
Constructs a
discrete_distribution
from its parameters\&.
.RE

.SS "discrete_distribution public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename URNG> IntType operator()(URNG & urng) const;
.fi

.sp
Returns a value distributed according to the parameters of the
discrete_distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename URNG> 
  IntType operator()(URNG & urng, const param_type & param) const;
.fi

.sp
Returns a value distributed according to the parameters specified by param\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
result_type min() const;
.fi

.sp
Returns the smallest value that the distribution can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
result_type max() const;
.fi

.sp
Returns the largest value that the distribution can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
std::vector< WeightType > probabilities() const;
.fi

.sp
Returns a vector containing the probabilities of each value of the distribution\&. For example, given
.sp

.sp
.if n \{\
.RS 4
.\}
.nf
discrete_distribution<> dist = { 1, 4, 5 };
std::vector<double> p = dist\&.param();

.fi
.if n \{\
.RE
.\}

.sp
the vector, p will contain {0\&.1, 0\&.4, 0\&.5}\&.
.sp
If
WeightType
is integral, then the weights will be returned unchanged\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
param_type param() const;
.fi

.sp
Returns the parameters of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void param(const param_type & param);
.fi

.sp
Sets the parameters of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
void reset();
.fi

.sp
Effects: Subsequent uses of the distribution do not depend on values produced by any engine prior to invoking reset\&.
.RE

.SS "discrete_distribution friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const discrete_distribution & dd);
.fi

.sp
Writes a distribution to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const discrete_distribution & dd);
.fi

.sp
Reads a distribution from a
std::istream
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const discrete_distribution & lhs, 
                       const discrete_distribution & rhs);
.fi

.sp
Returns true if the two distributions will return the same sequence of values, when passed equal generators\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const discrete_distribution & lhs, 
                       const discrete_distribution & rhs);
.fi

.sp
Returns true if the two distributions may return different sequences of values, when passed equal generators\&.
.RE


