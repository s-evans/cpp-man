.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::log::expressions::c_ascii_pattern_replacer
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/expressions/formatters/c_decorator\&.hpp>

template<typename CharT> 
class c_ascii_pattern_replacer :
  public boost::log::expressions::pattern_replacer< CharT >
{
public:
  // types
  typedef base_type::result_type result_type;  // Result type\&. 
  typedef base_type::char_type   char_type;    // Character type\&. 
  typedef base_type::string_type string_type;  // String type\&. 

  // construct/copy/destruct
  c_ascii_pattern_replacer();

  // public member functions
  result_type operator()(string_type &, typename string_type::size_type = 0) const;
};
.fi
.SH "DESCRIPTION"
.PP
A character decorator implementation that escapes all non\-prontable and non\-ASCII characters in the output with C\-style escape sequences\&.
.SS "c_ascii_pattern_replacer public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
c_ascii_pattern_replacer();
.fi

Default constructor\&. .RE

.SS "c_ascii_pattern_replacer public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()(string_type & str, 
                       typename string_type::size_type start_pos = 0) const;
.fi

Applies string replacements starting from the specified position\&. .RE


