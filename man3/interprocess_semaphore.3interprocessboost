.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS INTERPRO" 3 "" "" ""
.SH "NAME"
boost::interprocess::interprocess_semaphore
.SH "SYNOPSIS"
.\" wait: Class interprocess_semaphore
.\" Class interprocess_semaphore: wait
.\" try_wait: Class interprocess_semaphore
.\" Class interprocess_semaphore: try_wait
.\" timed_wait: Class interprocess_semaphore
.\" Class interprocess_semaphore: timed_wait
.\" post: Class interprocess_semaphore
.\" Class interprocess_semaphore: post
.\" interprocess_semaphore: Class interprocess_semaphore
.\" Class interprocess_semaphore: interprocess_semaphore
.\" interprocess_semaphore: Class interprocess_semaphore
.\" Class interprocess_semaphore: interprocess_semaphore

.sp
.nf
// In header: <boost/interprocess/sync/interprocess_semaphore\&.hpp>


class interprocess_semaphore {
public:
  // construct/copy/destruct
  interprocess_semaphore(unsigned int);
  ~interprocess_semaphore();

  // public member functions
  void post();
  void wait();
  bool try_wait();
  bool timed_wait(const boost::posix_time::ptime &);
};
.fi
.SH "DESCRIPTION"
.PP
Wraps a
interprocess_semaphore
that can be placed in shared memory and can be shared between processes\&. Allows timed lock tries
.SS "interprocess_semaphore public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
interprocess_semaphore(unsigned int initialCount);
.fi

.sp
Creates a
interprocess_semaphore
with the given initial count\&.
interprocess_exception
if there is an error\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~interprocess_semaphore();
.fi

.sp
Destroys the
interprocess_semaphore\&. Does not throw
.RE

.SS "interprocess_semaphore public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" post: Class interprocess_semaphore
.\" Class interprocess_semaphore: post

.sp

.nf
void post();
.fi

.sp
Increments the
interprocess_semaphore
count\&. If there are processes/threads blocked waiting for the
interprocess_semaphore, then one of these processes will return successfully from its wait function\&. If there is an error an
interprocess_exception
exception is thrown\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" wait: Class interprocess_semaphore
.\" Class interprocess_semaphore: wait

.sp

.nf
void wait();
.fi

.sp
Decrements the
interprocess_semaphore\&. If the
interprocess_semaphore
value is not greater than zero, then the calling process/thread blocks until it can decrement the counter\&. If there is an error an
interprocess_exception
exception is thrown\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
.\" try_wait: Class interprocess_semaphore
.\" Class interprocess_semaphore: try_wait

.sp

.nf
bool try_wait();
.fi

.sp
Decrements the
interprocess_semaphore
if the
interprocess_semaphore\'s value is greater than zero and returns true\&. If the value is not greater than zero returns false\&. If there is an error an
interprocess_exception
exception is thrown\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" timed_wait: Class interprocess_semaphore
.\" Class interprocess_semaphore: timed_wait

.sp

.nf
bool timed_wait(const boost::posix_time::ptime & abs_time);
.fi

.sp
Decrements the
interprocess_semaphore
if the
interprocess_semaphore\'s value is greater than zero and returns true\&. Otherwise, waits for the
interprocess_semaphore
to the posted or the timeout expires\&. If the timeout expires, the function returns false\&. If the
interprocess_semaphore
is posted the function returns true\&. If there is an error throws sem_exception
.RE


