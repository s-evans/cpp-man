.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::apply_visitor_delayed_t \- Adapts a visitor for use as a function object\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/variant/apply_visitor\&.hpp>

template<typename Visitor> 
class apply_visitor_delayed_t {
public:
  // types
  typedef typename Visitor::result_type result_type;

  // construct/copy/destruct
  explicit apply_visitor_delayed_t(Visitor &);

  // function object interface
  template<typename \&.\&.\&. Variant> result_type operator()(Variant&\&.\&.\&.);
  template<typename Variant> result_type operator()(Variant &);
  template<typename Variant1, typename Variant2> 
    result_type operator()(Variant1 &, Variant2 &);
};
.fi
.SH "DESCRIPTION"
.sp
Adapts the function given at construction for use as a function object\&. This is useful, for example, when one needs to operate on each element of a sequence of variant objects using a standard library algorithm such as std::for_each\&.
.sp
See the "visitor\-only" form of apply_visitor for a simple way to create apply_visitor_delayed_t objects\&.
.sp
See apply_visitor_delayed_cpp14_t which is used on C++14 compatible compilers when Visitor has no result_type typedef\&.
.SS "apply_visitor_delayed_t public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit apply_visitor_delayed_t(Visitor & visitor);
.fi

.PP
Effects:
.RS 4
Constructs the function object with the given visitor\&.
.RE
.RE

.SS "apply_visitor_delayed_t function object interface"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename \&.\&.\&. Variant> result_type operator()(Variant&\&.\&.\&. operand);
template<typename Variant> result_type operator()(Variant & operand);
template<typename Variant1, typename Variant2> 
  result_type operator()(Variant1 & operand1, Variant2 & operand2);
.fi

.sp
Function call operator\&.Invokes
apply_visitor
on the stored visitor using the given operands\&.
.PP
Notes:
.RS 4
Version with variadic templates is used by default if
          BOOST_VARIANT_DO_NOT_USE_VARIADIC_TEMPLATES is not defined\&..RE
.RE


