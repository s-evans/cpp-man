.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS VALIDATION_" 3 "" "" ""
.SH "NAME"
boost::program_options::validation_error
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/errors\&.hpp>


class validation_error :
  public boost::program_options::error_with_option_name
{
public:

  enum kind_t { multiple_values_not_allowed = = 30, 
                at_least_one_value_required, invalid_bool_value, 
                invalid_option_value, invalid_option };
  // construct/copy/destruct
  validation_error(kind_t, const std::string & = "", const std::string & = "", 
                   int = 0);
  ~validation_error();

  // protected member functions
  std::string get_template(kind_t);
};
.fi
.SH "DESCRIPTION"
.PP
Class thrown when value of option is incorrect\&.
.SS "validation_error public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
validation_error(kind_t kind, const std::string & option_name = "", 
                 const std::string & original_token = "", 
                 int option_style = 0);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~validation_error();
.fi

.RE

.SS "validation_error protected member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
std::string get_template(kind_t kind);
.fi

.sp
Used to convert kind_t to a related error text
.RE


