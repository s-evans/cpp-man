.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::log::sinks::event_log::basic_event_composer \- An event composer\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/event_log_backend\&.hpp>

template<typename CharT> 
class basic_event_composer {
public:
  // types
  typedef CharT                          char_type;             // Character type\&. 
  typedef std::basic_string< char_type > string_type;           // String type to be used as a message text holder\&. 
  typedef \fIunspecified\fR                    event_id_mapper_type;  // Event identifier mapper type\&. 
  typedef basic_formatter< char_type >   formatter_type;        // Type of an insertion composer (a formatter) 
  typedef std::vector< string_type >     insertion_list;        // Type of the composed insertions list\&. 

  // construct/copy/destruct
  explicit basic_event_composer(event_id_mapper_type const &);
  basic_event_composer(basic_event_composer const &);
  basic_event_composer & operator=(basic_event_composer);
  ~basic_event_composer();

  // public member functions
  void swap(basic_event_composer &);
  event_map_reference operator[](event_id);
  event_map_reference operator[](int);
  event_id operator()(record_view const &, insertion_list &) const;
};
.fi
.SH "DESCRIPTION"
.PP
This class is a function object that extracts event identifier from the attribute values set and formats insertion strings for the particular event\&. Each insertion string is formatted with a distinct formatter, which can be created just like regular sinks formatters\&.
.PP
Before using, the composer must be initialized with the following information:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Event identifier extraction logic\&. One can use
basic_direct_event_id_mapping
or
basic_custom_event_id_mapping
classes in order to create such extractor and pass it to the composer constructor\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Event identifiers and insertion string formatters\&. The composer provides the following syntax to provide this information:
.RE
.sp
.RE


.sp
.if n \{\
.RS 4
.\}
.nf
event_composer comp;
comp[MY_EVENT_ID1] % formatter1 % \&.\&.\&. % formatterN;
comp[MY_EVENT_ID2] % formatter1 % \&.\&.\&. % formatterN;
\&.\&.\&.

.fi
.if n \{\
.RE
.\}

.PP
The event identifiers in square brackets are provided by the message compiler generated header (the actual names are specified in the \&.mc file)\&. The formatters represent the insertion strings that will be used to replace placeholders in event messages, thus the number and the order of the formatters must correspond to the message definition\&.
.SS "basic_event_composer public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit basic_event_composer(event_id_mapper_type const & id_mapper);
.fi

.sp
Default constructor\&. Creates an empty map of events\&.
.sp

.PP
Parameters:
.RS 4
.PP
id_mapper
.RS 4
An event identifier mapping function that will be used to extract event ID from attribute values
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_event_composer(basic_event_composer const & that);
.fi

.sp
Copy constructor\&. Performs a deep copy of the object\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
basic_event_composer & operator=(basic_event_composer that);
.fi

.sp
Assignment\&. Provides strong exception guarantee\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
~basic_event_composer();
.fi

.sp
Destructor
.RE

.SS "basic_event_composer public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void swap(basic_event_composer & that);
.fi

.sp
Swaps
*this
and
that
objects\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
event_map_reference operator[](event_id id);
.fi

.sp
Initiates creation of a new event description\&. The result of the operator can be used to add formatters for insertion strings construction\&. The returned reference type is implementation detail\&.
.sp

.PP
Parameters:
.RS 4
.PP
id
.RS 4
Event identifier\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
event_map_reference operator[](int id);
.fi

.sp
Initiates creation of a new event description\&. The result of the operator can be used to add formatters for insertion strings construction\&. The returned reference type is implementation detail\&.
.sp

.PP
Parameters:
.RS 4
.PP
id
.RS 4
Event identifier\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
event_id operator()(record_view const & rec, insertion_list & insertions) const;
.fi

.sp
Event composition operator\&. Extracts an event identifier from the attribute values by calling event ID mapper\&. Then runs all formatters that were registered for the event with the extracted ID\&. The results of formatting are returned in the
\fIinsertions\fR
parameter\&.
.sp

.PP
Parameters:
.RS 4
.PP
insertions
.RS 4
A sequence of formatted insertion strings
.RE
.PP
rec
.RS 4
Log record view
.RE
.RE
.PP
Returns:
.RS 4
An event identifier that was extracted from
attributes
.RE
.RE


