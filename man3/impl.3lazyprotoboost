.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE IM" 3 "" "" ""
.SH "NAME"
boost::proto::lazy::impl
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/lazy\&.hpp>


template<typename Expr, typename State, typename Data> 
struct impl :  proto::transform_impl<Expr, State, Data> {
  // types
  typedef \fIsee\fR\fI\-\fR\fIbelow\fR result_type;

  // public member functions
  result_type operator()(typename impl::expr_param, 
                         typename impl::state_param, 
                         typename impl::data_param) const;
};
.fi
.SH "DESCRIPTION"
.SS "impl public types"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

typedef
\fIsee\fR\fI\-\fR\fIbelow\fR
result_type;
.sp

proto::lazy<T>::impl<Expr,State,Data>::result_type
is calculated as follows:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
if of the form
O(A0,&#8230;An), then let
O\'
be
boost::result_of<proto::make<O>(Expr, State, Data)>::type
and let
T\'
be
O\'(A0,&#8230;An)\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
if of the form
O(A0,&#8230;An \&.\&.\&.), then let
O\'
be
boost::result_of<proto::make<O>(Expr, State, Data)>::type
and let
T\'
be
O\'(A0,&#8230;An \&.\&.\&.)\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise, let
T\'
be
boost::result_of<proto::make<T>(Expr, State, Data)>::type\&.
.RE
.RS 4

The result type is boost::result_of<proto::call<T\'>(Expr, State, Data)>::type\&.
.RE

.SS "impl public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()(typename impl::expr_param expr, 
                       typename impl::state_param state, 
                       typename impl::data_param data) const;
.fi

.sp

proto::lazy<T>::impl<Expr,State,Data>::operator()
behaves as follows:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
if of the form
O(A0,&#8230;An), then let
O\'
be
boost::result_of<proto::make<O>(Expr, State, Data)>::type
and let
T\'
be
O\'(A0,&#8230;An)\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
if of the form
O(A0,&#8230;An \&.\&.\&.), then let
O\'
be
boost::result_of<proto::make<O>(Expr, State, Data)>::type
and let
T\'
be
O\'(A0,&#8230;An \&.\&.\&.)\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise, let
T\'
be
boost::result_of<proto::make<T>(Expr, State, Data)>::type\&.
.RE
.RS 4

.PP
Returns:
.RS 4

proto::call<T\'>()(expr, state, data)
.RE
.RE


