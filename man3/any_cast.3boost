.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION ANY_CAST" 3 "" "" ""
.SH "NAME"
boost::any_cast \- Custom keyword cast for extracting a value of a given type from an any\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/any\&.hpp>


template<typename T> T any_cast(any & operand);
template<typename T> T any_cast(any && operand);
template<typename T> T any_cast(const any & operand);
template<typename ValueType> const ValueType * any_cast(const any * operand);
template<typename ValueType> ValueType * any_cast(any * operand);
.fi
.SH "DESCRIPTION"
.PP
Returns:
.RS 4
If passed a pointer, it returns a similarly qualified pointer to the value content if successful, otherwise null is returned\&. If T is ValueType, it returns a copy of the held value, otherwise, if T is a reference to (possibly const qualified) ValueType, it returns a reference to the held value\&.
.RE
.PP
Throws:
.RS 4
Overloads taking an
any
pointer do not throw; overloads taking an
any
value or reference throws
bad_any_cast
if unsuccessful\&.
.RE

