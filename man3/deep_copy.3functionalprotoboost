.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT DEEP_COPY" 3 "" "" ""
.SH "NAME"
boost::proto::functional::deep_copy \- A PolymorphicFunctionObject type for deep\-copying Proto expression trees\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/deep_copy\&.hpp>


struct deep_copy :  proto::callable {
  // member classes/structs/unions
  template<typename This, typename Expr> 
  struct result<This(Expr)> :  result_of::deep_copy<Expr> {
  };

  // public member functions
  template<typename Expr> 
    result_of::deep_copy<Expr>::type operator()(Expr const &) const;
};
.fi
.SH "DESCRIPTION"
.PP
A
PolymorphicFunctionObject
type for deep\-copying Proto expression trees\&. When a tree is deep\-copied, all internal nodes and terminals held by reference are instead held by value\&. The only exception is function references, which continue to be held by reference\&.
.SS "deep_copy public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Expr> 
  result_of::deep_copy<Expr>::type operator()(Expr const & expr) const;
.fi

Deep\-copies a Proto expression tree, turning all nodes and terminals held by
                reference into ones held by value\&..RE


