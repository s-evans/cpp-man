.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "GLOBAL S1" 3 "" "" ""
.SH "NAME"
boost::xpressive::s1 \- Sub\-match placeholder, like $1 in perl\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_primitives\&.hpp>

mark_tag const s1;
.fi
.SH "DESCRIPTION"
.PP
To create a sub\-match, assign a sub\-expression to the sub\-match placeholder\&. For instance, (s1= _) will match any one character and remember which character was matched in the 1st sub\-match\&. Later in the pattern, you can refer back to the sub\-match\&. For instance, (s1= _) >> s1 will match any character, and then match the same character again\&.
.PP
After a successful regex_match() or regex_search(), the sub\-match placeholders can be used to index into the
match_results<> object to retrieve the Nth sub\-match\&.

