.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS " 3 "" "" ""
.SH "NAME"
boost::log::sinks::basic_simple_event_log_backend \- An implementation of a simple logging sink backend that emits events into Windows NT event log\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/event_log_backend\&.hpp>

template<typename CharT> 
class basic_simple_event_log_backend :
  public basic_formatted_sink_backend< CharT, concurrent_feeding >
{
public:
  // types
  typedef base_type::char_type   char_type;               // Character type\&. 
  typedef base_type::string_type string_type;             // String type to be used as a message text holder\&. 
  typedef \fIunspecified\fR            event_type_mapper_type;  // Mapper type for the event type\&. 

  // construct/copy/destruct
  basic_simple_event_log_backend();
  template<typename\&.\&.\&. ArgsT> 
    explicit basic_simple_event_log_backend(ArgsT\&.\&.\&.const &);
  ~basic_simple_event_log_backend();

  // public member functions
  void set_event_type_mapper(event_type_mapper_type const &);
  void consume(record_view const &, string_type const &);

  // public static functions
  static string_type get_default_log_name();
  static string_type get_default_source_name();
};
.fi
.SH "DESCRIPTION"
.PP
The sink uses Windows NT 5 (Windows 2000) and later event log API to emit events to an event log\&. The sink acts as an event source in terms of the API, it implements all needed resources and source registration in the Windows registry that is needed for the event delivery\&.
.PP
The backend performs message text formatting\&. The composed text is then passed as the first and only string parameter of the event\&. The resource embedded into the backend describes the event so that the parameter is inserted into the event description text, thus making it visible in the event log\&.
.PP
The backend allows to customize mapping of application severity levels to the native Windows event types\&. This allows to write portable code even if OS\-specific sinks, such as this one, are used\&.
.PP
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Since the backend registers itself into Windows registry as the resource file that contains event description, it is important to keep the library binary in a stable place of the filesystem\&. Otherwise Windows might not be able to load event resources from the library and display events correctly\&.
.sp .5v
.RE

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
It is known that Windows is not able to find event resources in the application executable, which is linked against the static build of the library\&. Users are advised to use dynamic builds of the library to solve this problem\&.
.sp .5v
.RE

.SS "basic_simple_event_log_backend public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_simple_event_log_backend();
.fi

.sp
Default constructor\&. Registers event source with name based on the application executable file name in the Application log\&. If such a registration is already present, it is not overridden\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename\&.\&.\&. ArgsT> 
  explicit basic_simple_event_log_backend(ArgsT\&.\&.\&.const & args);
.fi

.sp
Constructor\&. Registers event log source with the specified parameters\&. The following named parameters are supported:
.sp

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
target
\- Specifies an UNC path to the remote server which log records should be sent to\&. The local machine will be used to process log records, if not specified\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
log_name
\- Specifies the log in which the source should be registered\&. The result of
get_default_log_name
is used, if the parameter is not specified\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
log_source
\- Specifies the source name\&. The result of
get_default_source_name
is used, if the parameter is not specified\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
registration
\- Specifies the event source registration mode in the Windows registry\&. Can have values of the
registration_mode
enum\&. Default value:
on_demand\&.
.RE
.RS 4

.PP
Parameters:
.RS 4
.PP
args
.RS 4
A set of named parameters\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
~basic_simple_event_log_backend();
.fi

.sp
Destructor\&. Unregisters event source\&. The log source description is not removed from the Windows registry\&.
.RE

.SS "basic_simple_event_log_backend public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void set_event_type_mapper(event_type_mapper_type const & mapper);
.fi

.sp
The method installs the function object that maps application severity levels to WinAPI event types
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void consume(record_view const & rec, string_type const & formatted_message);
.fi

.sp
The method puts the formatted message to the event log
.RE

.SS "basic_simple_event_log_backend public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static string_type get_default_log_name();
.fi

.sp

.PP
Returns:
.RS 4
Default log name: Application
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static string_type get_default_source_name();
.fi

.sp

.PP
Returns:
.RS 4
Default log source name that is based on the application executable file name and the sink name
.RE
.RE


