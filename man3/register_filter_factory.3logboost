.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION" 3 "" "" ""
.SH "NAME"
boost::log::register_filter_factory
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/setup/filter_parser\&.hpp>


template<typename FactoryT> 
  enable_if< is_base_and_derived< filter_factory< typename FactoryT::char_type >, FactoryT >>::type 
  register_filter_factory(attribute_name const & name, 
                          shared_ptr< FactoryT > const & factory);
.fi
.SH "DESCRIPTION"
.PP
The function registers a filter factory object for the specified attribute name\&. The factory will be used to construct a filter during parsing the filter string\&.
.PP

.PP
Parameters:
.RS 4
.PP
factory
.RS 4
The filter factory
.RE
.PP
name
.RS 4
Attribute name to associate the factory with
.RE
.RE
.PP
Requires:
.RS 4
name != NULL && factory != NULL,
name
points to a zero\-terminated string
.RE

