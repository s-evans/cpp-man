.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS VARIABLE_VAL" 3 "" "" ""
.SH "NAME"
boost::program_options::variable_value
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/variables_map\&.hpp>


class variable_value {
public:
  // construct/copy/destruct
  variable_value();
  variable_value(const boost::any &, bool);

  // friend functions
  friend BOOST_PROGRAM_OPTIONS_DECL void 
  store(const basic_parsed_options< char > &, variables_map &, bool);

  // public member functions
  template<typename T> const T & as() const;
  template<typename T> T & as();
  bool empty() const;
  bool defaulted() const;
  const boost::any & value() const;
  boost::any & value();
};
.fi
.SH "DESCRIPTION"
.PP
Class holding value of option\&. Contains details about how the value is set and allows to conveniently obtain the value\&.
.SS "variable_value public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
variable_value();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
variable_value(const boost::any & xv, bool xdefaulted);
.fi

.RE

.SS "variable_value friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
friend BOOST_PROGRAM_OPTIONS_DECL void 
store(const basic_parsed_options< char > & options, variables_map & m, bool);
.fi

.sp
Stores in \'m\' all options that are defined in \'options\'\&. If \'m\' already has a non\-defaulted value of an option, that value is not changed, even if \'options\' specify some value\&.
.RE

.SS "variable_value public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T> const T & as() const;
.fi

.sp
If stored value if of type T, returns that value\&. Otherwise, throws boost::bad_any_cast exception\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename T> T & as();
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
bool empty() const;
.fi

Returns true if no value is stored\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
bool defaulted() const;
.fi

.sp
Returns true if the value was not explicitly given, but has default value\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
const boost::any & value() const;
.fi

.sp
Returns the contained value\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
boost::any & value();
.fi

.sp
Returns the contained value\&.
.RE


