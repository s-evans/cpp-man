.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TE" 3 "" "" ""
.SH "NAME"
boost::interprocess::basic_managed_heap_memory
.SH "SYNOPSIS"
.\" swap: Class template basic_managed_heap_memory
.\" Class template basic_managed_heap_memory: swap
.\" size_type: Class template basic_managed_heap_memory
.\" Class template basic_managed_heap_memory: size_type
.\" grow: Class template basic_managed_heap_memory
.\" Class template basic_managed_heap_memory: grow
.\" basic_managed_heap_memory: Class template basic_managed_heap_memory
.\" Class template basic_managed_heap_memory: basic_managed_heap_memory
.\" basic_managed_heap_memory: Class template basic_managed_heap_memory
.\" Class template basic_managed_heap_memory: basic_managed_heap_memory

.sp
.nf
// In header: <boost/interprocess/managed_heap_memory\&.hpp>

template<typename CharType, typename AllocationAlgorithm, 
         template< class IndexConfig > class IndexType> 
class basic_managed_heap_memory {
public:
  // types
  typedef base_t::size_type size_type;

  // construct/copy/destruct
  basic_managed_heap_memory();
  basic_managed_heap_memory(size_type);
  basic_managed_heap_memory(basic_managed_heap_memory &&);
  basic_managed_heap_memory & operator=(basic_managed_heap_memory &&);
  ~basic_managed_heap_memory();

  // public member functions
  bool grow(size_type);
  void swap(basic_managed_heap_memory &);
};
.fi
.SH "DESCRIPTION"
.PP
A basic heap memory named object creation class\&. Initializes the heap memory segment\&. Inherits all basic functionality from basic_managed_memory_impl<CharType, AllocationAlgorithm, IndexType>
.SS "basic_managed_heap_memory public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_managed_heap_memory();
.fi

.sp
Default constructor\&. Does nothing\&. Useful in combination with move semantics
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_managed_heap_memory(size_type size);
.fi

.sp
Creates heap memory and initializes the segment manager\&. This can throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
basic_managed_heap_memory(basic_managed_heap_memory && moved);
.fi

Moves the ownership of "moved"\'s managed memory to *this\&. Does not throw\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
basic_managed_heap_memory & operator=(basic_managed_heap_memory && moved);
.fi

Moves the ownership of "moved"\'s managed memory to *this\&. Does not throw\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
~basic_managed_heap_memory();
.fi

.sp
Destructor\&. Liberates the heap memory holding the managed data\&. Never throws\&.
.RE

.SS "basic_managed_heap_memory public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" grow: Class template basic_managed_heap_memory
.\" Class template basic_managed_heap_memory: grow

.sp

.nf
bool grow(size_type extra_bytes);
.fi

.sp
Tries to resize internal heap memory so that we have room for more objects\&. WARNING: If memory is reallocated, all the objects will be binary\-copied to the new buffer\&. To be able to use this function, all pointers constructed in this buffer must be offset pointers\&. Otherwise, the result is undefined\&. Returns true if the growth has been successful, so you will have some extra bytes to allocate new objects\&. If returns false, the heap allocation has failed\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" swap: Class template basic_managed_heap_memory
.\" Class template basic_managed_heap_memory: swap

.sp

.nf
void swap(basic_managed_heap_memory & other);
.fi

.sp
Swaps the ownership of the managed heap memories managed by *this and other\&. Never throws\&.
.RE


