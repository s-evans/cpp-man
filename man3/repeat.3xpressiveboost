.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION REPEAT" 3 "" "" ""
.SH "NAME"
boost::xpressive::repeat \- Repeat a sub\-expression multiple times\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_primitives\&.hpp>


template<unsigned int Min, unsigned int Max, typename Expr> 
  \fIunspecified\fR repeat(Expr const & expr);
template<unsigned int Count, typename Expr2> 
  \fIunspecified\fR repeat(Expr2 const & expr2);
.fi
.SH "DESCRIPTION"
.PP
There are two forms of the repeat<>() function template\&. To match a sub\-expression N times, use repeat<N>(expr)\&. To match a sub\-expression from M to N times, use repeat<M,N>(expr)\&.
.PP
The repeat<>() function creates a greedy quantifier\&. To make the quantifier non\-greedy, apply the unary minus operator, as in \-repeat<M,N>(expr)\&.
.PP

.PP
Parameters:
.RS 4
.PP
expr
.RS 4
The sub\-expression to repeat\&.
.RE
.RE

