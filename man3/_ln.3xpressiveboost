.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "GLOBAL _LN" 3 "" "" ""
.SH "NAME"
boost::xpressive::_ln \- Matches a logical newline sequence\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_primitives\&.hpp>

\fIunspecified\fR _ln;
.fi
.SH "DESCRIPTION"
.PP
\'_ln\' matches a logical newline sequence\&. This can be any character in the line separator class, as determined by the regex traits, or the \'\er\en\' sequence\&. For the purpose of back\-tracking, \'\er\en\' is treated as a unit\&. To match any one character that is not a logical newline, use ~_ln\&.

