.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::date_time::date_itr_base \- Base date iterator type\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/date_iterator\&.hpp>

template<typename date_type> 
class date_itr_base {
public:
  // types
  typedef date_type::duration_type duration_type;    
  typedef date_type                value_type;       
  typedef std::input_iterator_tag  iterator_category;

  // construct/copy/destruct
  date_itr_base(date_type);
  ~date_itr_base();

  // public member functions
  date_itr_base & operator++();
  date_itr_base & operator\-\-();
  virtual duration_type get_offset(const date_type &) const = 0;
  virtual duration_type get_neg_offset(const date_type &) const = 0;
  date_type operator*();
  date_type * operator\->();
  bool operator<(const date_type &);
  bool operator<=(const date_type &);
  bool operator>(const date_type &);
  bool operator>=(const date_type &);
  bool operator==(const date_type &);
  bool operator!=(const date_type &);
};
.fi
.SH "DESCRIPTION"
.PP
This class provides the skeleton for the creation of iterators\&. New and interesting interators can be created by plugging in a new function that derives the next value from the current state\&. generation of various types of \-based information\&.
.PP
\fBTemplate Parameters\fR
.PP
\fBdate_type\fR
.PP
The date_type is a concrete date_type\&. The date_type must define a duration_type and a calendar_type\&.
.SS "date_itr_base public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
date_itr_base(date_type d);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~date_itr_base();
.fi

.RE

.SS "date_itr_base public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
date_itr_base & operator++();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
date_itr_base & operator\-\-();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
virtual duration_type get_offset(const date_type & current) const = 0;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
virtual duration_type get_neg_offset(const date_type & current) const = 0;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
date_type operator*();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
date_type * operator\->();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
bool operator<(const date_type & d);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
bool operator<=(const date_type & d);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
bool operator>(const date_type & d);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
bool operator>=(const date_type & d);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
bool operator==(const date_type & d);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
bool operator!=(const date_type & d);
.fi

.RE


