.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLA" 3 "" "" ""
.SH "NAME"
boost::CV::constrained_value \- A template to specify a constrained basic value type\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/constrained_value\&.hpp>

template<typename value_policies> 
class constrained_value {
public:
  // types
  typedef value_policies::value_type value_type;

  // construct/copy/destruct
  constrained_value(value_type);
  constrained_value & operator=(value_type);

  // public member functions
  operator value_type() const;

  // public static functions
  static value_type max BOOST_PREVENT_MACRO_SUBSTITUTION();
  static value_type min BOOST_PREVENT_MACRO_SUBSTITUTION();

  // private member functions
  void assign(value_type);
};
.fi
.SH "DESCRIPTION"
.PP
This template provides a quick way to generate an integer type with a constrained range\&. The type provides for the ability to specify the min, max, and and error handling policy\&.
.PP
\fBvalue policies\fR
A class that provides the range limits via the min and max functions as well as a function on_error that determines how errors are handled\&. A common strategy would be to assert or throw and exception\&. The on_error is passed both the current value and the new value that is in error\&.
.SS "constrained_value public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
constrained_value(value_type value);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
constrained_value & operator=(value_type v);
.fi

.RE

.SS "constrained_value public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
operator value_type() const;
.fi

Coerce into the representation type\&. .RE

.SS "constrained_value public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static value_type max BOOST_PREVENT_MACRO_SUBSTITUTION();
.fi

Return the max allowed value (traits method) .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static value_type min BOOST_PREVENT_MACRO_SUBSTITUTION();
.fi

Return the min allowed value (traits method) .RE

.SS "constrained_value private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void assign(value_type value);
.fi

.RE


