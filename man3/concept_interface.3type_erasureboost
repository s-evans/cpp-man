.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPL" 3 "" "" ""
.SH "NAME"
boost::type_erasure::concept_interface
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_erasure/concept_interface\&.hpp>

template<typename Concept, typename Base, typename ID, typename Enable = void> 
struct concept_interface : public Base {
};
.fi
.SH "DESCRIPTION"
.PP
The
concept_interface
class can be specialized to add behavior to an any\&. An any inherits from all the relevant specializations of
concept_interface\&.
.PP
concept_interface
can be specialized for either primitive or composite concepts\&. If a concept
C1
contains another concept
C2, then the library guarantees that the specialization of
concept_interface
for
C2
is a base class of the specialization for
C1\&. This means that
C1
can safely override members of
C2\&.
.PP
concept_interface
may only be specialized for user\-defined concepts\&. The library owns the specializations of its own built in concepts\&.
.PP
The metafunctions
derived,
rebind_any, and
as_param
(which can be applied to
Base) are useful for determining the argument and return types of functions defined in
concept_interface\&.
.PP
For dispatching the function use
call\&.
.SS "Template Parameters"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
typename Concept
.fi

.sp
The concept that we\'re specializing concept_interface for\&. One of its placeholders should be ID\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
typename Base
.fi

.sp
The base of this class\&. Specializations of concept_interface must inherit publicly from this type\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
typename ID
.fi

.sp
The placeholder representing this type\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
typename Enable = void
.fi

.sp
A dummy parameter that can be used for SFINAE\&.
.RE


