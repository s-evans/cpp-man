.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS NAMED_MUTEX" 3 "" "" ""
.SH "NAME"
boost::interprocess::named_mutex
.SH "SYNOPSIS"
.\" unlock: Class named_mutex
.\" Class named_mutex: unlock
.\" try_lock: Class named_mutex
.\" Class named_mutex: try_lock
.\" timed_lock: Class named_mutex
.\" Class named_mutex: timed_lock
.\" remove: Class named_mutex
.\" Class named_mutex: remove
.\" named_mutex: Class named_mutex
.\" Class named_mutex: named_mutex
.\" named_mutex: Class named_mutex
.\" Class named_mutex: named_mutex
.\" lock: Class named_mutex
.\" Class named_mutex: lock

.sp
.nf
// In header: <boost/interprocess/sync/named_mutex\&.hpp>


class named_mutex {
public:
  // construct/copy/destruct
  named_mutex(create_only_t, const char *, 
              const permissions & = permissions());
  named_mutex(open_or_create_t, const char *, 
              const permissions & = permissions());
  named_mutex(open_only_t, const char *);
  ~named_mutex();

  // public member functions
  void unlock();
  void lock();
  bool try_lock();
  bool timed_lock(const boost::posix_time::ptime &);

  // public static functions
  static bool remove(const char *);
};
.fi
.SH "DESCRIPTION"
.PP
A mutex with a global name, so it can be found from different processes\&. This mutex can\'t be placed in shared memory, and each process should have it\'s own
named_mutex\&.
.SS "named_mutex public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
named_mutex(create_only_t create_only, const char * name, 
            const permissions & perm = permissions());
.fi

.sp
Creates a global mutex with a name\&. Throws
interprocess_exception
on error\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" named_mutex: Class named_mutex
.\" Class named_mutex: named_mutex

.sp

.nf
named_mutex(open_or_create_t open_or_create, const char * name, 
            const permissions & perm = permissions());
.fi

.sp
Opens or creates a global mutex with a name\&. If the mutex is created, this call is equivalent to
named_mutex(create_only_t, \&.\&.\&. ) If the mutex is already created, this call is equivalent
named_mutex(open_only_t, \&.\&.\&. ) Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
named_mutex(open_only_t open_only, const char * name);
.fi

.sp
Opens a global mutex with a name if that mutex is previously created\&. If it is not previously created this function throws
interprocess_exception\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" remove: Class named_mutex
.\" Class named_mutex: remove

.sp

.nf
~named_mutex();
.fi

.sp
Destroys *this and indicates that the calling process is finished using the resource\&. The destructor function will deallocate any system resources allocated by the system for use by this process for this resource\&. The resource can still be opened again calling the open constructor overload\&. To erase the resource from the system use remove()\&.
.RE

.SS "named_mutex public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" unlock: Class named_mutex
.\" Class named_mutex: unlock

.sp

.nf
void unlock();
.fi

.sp
Unlocks a previously locked mutex\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" lock: Class named_mutex
.\" Class named_mutex: lock

.sp

.nf
void lock();
.fi

.sp
Locks the mutex, sleeps when the mutex is already locked\&. Throws
interprocess_exception
if a severe error is found
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
.\" try_lock: Class named_mutex
.\" Class named_mutex: try_lock

.sp

.nf
bool try_lock();
.fi

.sp
Tries to lock the mutex, returns false when the mutex is already locked, returns true when success\&. Throws
interprocess_exception
if a severe error is found
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" timed_lock: Class named_mutex
.\" Class named_mutex: timed_lock

.sp

.nf
bool timed_lock(const boost::posix_time::ptime & abs_time);
.fi

.sp
Tries to lock the the mutex until time abs_time, Returns false when timeout expires, returns true when locks\&. Throws
interprocess_exception
if a severe error is found
.RE

.SS "named_mutex public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" remove: Class named_mutex
.\" Class named_mutex: remove

.sp

.nf
static bool remove(const char * name);
.fi

.sp
Erases a named mutex from the system\&. Returns false on error\&. Never throws\&.
.RE


