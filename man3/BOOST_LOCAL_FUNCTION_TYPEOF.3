.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MACRO BOOST_" 3 "" "" ""
.SH "NAME"
BOOST_LOCAL_FUNCTION_TYPEOF \- This macro expands to the type of the specified bound variable\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/local_function\&.hpp>

BOOST_LOCAL_FUNCTION_TYPEOF(bound_variable_name)
.fi
.SH "DESCRIPTION"
.PP
This macro can be used within the local functions body to refer to the bound variable types so to declare local variables, check concepts (using Boost\&.ConceptCheck), etc (see the
Advanced Topics
section)\&. This way the local function can be programmed entirely without explicitly specifying the bound variable types thus facilitating maintenance (e\&.g\&., if the type of a bound variable changes in the enclosing scope, the local function code does not have to change)\&.
.PP
\fBParameters:\fR
.TS
allbox tab(:);
l l.
T{
\fBbound_variable_name\fR
T}:T{
The name of one of the local function\'s bound variables\&.
T}
.TE
.sp 1

.PP
The type returned by the macro is fully qualified in that it contains the extra constant and reference qualifiers when the specified variable is bound by constant and by reference\&. For example, if a variable named
t
of type
T
is:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Bound by value using
bind t
then
BOOST_LOCAL_FUNCTION_TYPEOF(t)
is
T\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Bound by constant value using
const bind t
then
BOOST_LOCAL_FUNCTION_TYPEOF(t)
is
const T\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Bound by reference using
bind& t
then
BOOST_LOCAL_FUNCTION_TYPEOF(t)
is
T&\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Bound by constant reference using
const bind& t
then
BOOST_LOCAL_FUNCTION_TYPEOF(t)
is
const T&\&.
.RE
.sp
.RE
This macro must be prefixed by
typename
when used within templates\&.
.PP
\fBNote:\fR
It is best to use this macro instead of Boost\&.Typeof so to reduce the number of times Boost\&.Typeof is used to deduce types (see the
Advanced Topics
section)\&.
.PP
\fBSee:\fR
Advanced Topics
section,
BOOST_LOCAL_FUNCTION\&.

