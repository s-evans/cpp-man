.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::log::sinks::unlocked_sink \- Non\-blocking logging sink frontend\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/unlocked_frontend\&.hpp>

template<typename SinkBackendT> 
class unlocked_sink : public basic_sink_frontend {
public:
  // types
  typedef SinkBackendT                    sink_backend_type;   // Sink implementation type\&. 
  typedef shared_ptr< sink_backend_type > locked_backend_ptr;  // Type of pointer to the backend\&. 

  // construct/copy/destruct
  unlocked_sink();
  explicit unlocked_sink(shared_ptr< sink_backend_type > const &);

  // public member functions
  locked_backend_ptr locked_backend();
  virtual void consume(record_view const &);
  virtual void flush();
};
.fi
.SH "DESCRIPTION"
.PP
The sink frontend does not perform thread synchronization and simply passes logging records to the sink backend\&.
.SS "unlocked_sink public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
unlocked_sink();
.fi

.sp
Default constructor\&. Constructs the sink backend instance\&. Requires the backend to be default\-constructible\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit unlocked_sink(shared_ptr< sink_backend_type > const & backend);
.fi

.sp
Constructor attaches user\-constructed backend instance
.sp

.PP
Parameters:
.RS 4
.PP
backend
.RS 4
Pointer to the backend instance
.RE
.RE
.PP
Requires:
.RS 4
\fIbackend\fR
is not
NULL\&.
.RE
.RE

.SS "unlocked_sink public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
locked_backend_ptr locked_backend();
.fi

.sp
Locking accessor to the attached backend\&.
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Does not do any actual locking, provided only for interface consistency with other frontends\&.
.sp .5v
.RE

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
virtual void consume(record_view const & rec);
.fi

.sp
Passes the log record to the backend
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
virtual void flush();
.fi

.sp
The method performs flushing of any internal buffers that may hold log records\&. The method may take considerable time to complete and may block both the calling thread and threads attempting to put new records into the sink while this call is in progress\&.
.RE


