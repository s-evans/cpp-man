.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLA" 3 "" "" ""
.SH "NAME"
boost::container::uses_allocator
.SH "SYNOPSIS"
.\" uses_allocator: Struct template uses_allocator
.\" Struct template uses_allocator: uses_allocator

.sp
.nf
// In header: <boost/container/scoped_allocator\&.hpp>

template<typename T, typename Allocator> 
struct uses_allocator {
};
.fi
.SH "DESCRIPTION"
.PP
\fBRemark\fR: Automatically detects if T has a nested allocator_type that is convertible from Allocator\&. Meets the BinaryTypeTrait requirements ([meta\&.rqmts] 20\&.4\&.1)\&. A program may specialize this type to define uses_allocator<X>::value as true for a T of user\-defined type if T does not have a nested allocator_type but is nonetheless constructible using the specified Allocator\&.
.PP
\fBResult\fR: uses_allocator<T, Allocator>::value== true if Convertible<Allocator,T::allocator_type>, false otherwise\&.

