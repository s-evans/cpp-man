.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::icl::add_iterator \- Performes an addition using a container\'s memberfunction add, when operator= is called\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/icl/iterator\&.hpp>

template<typename ContainerT> 
class add_iterator :
  public std::iterator< std::output_iterator_tag, void, void, void, void >
{
public:
  // types
  typedef ContainerT               container_type;     // The container\'s type\&. 
  typedef std::output_iterator_tag iterator_category;

  // construct/copy/destruct
  add_iterator(ContainerT &, typename ContainerT::iterator);
  add_iterator & operator=(typename ContainerT::const_reference);

  // public member functions
  add_iterator & operator*();
  add_iterator & operator++();
  add_iterator & operator++(int);
};
.fi
.SH "DESCRIPTION"
.SS "add_iterator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
add_iterator(ContainerT & cont, typename ContainerT::iterator iter);
.fi

.sp
An
add_iterator
is constructed with a container and a position that has to be maintained\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
add_iterator & operator=(typename ContainerT::const_reference value);
.fi

.sp
This assignment operator adds the
value
before the current position\&. It maintains it\'s position by incrementing after addition\&.
.RE

.SS "add_iterator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
add_iterator & operator*();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
add_iterator & operator++();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
add_iterator & operator++(int);
.fi

.RE


