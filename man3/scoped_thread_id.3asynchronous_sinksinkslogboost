.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS SCOPED_THRE" 3 "" "" ""
.SH "NAME"
boost::log::sinks::asynchronous_sink::scoped_thread_id \- A scope guard that implements thread ID management\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/async_frontend\&.hpp>



// A scope guard that implements thread ID management\&.

class scoped_thread_id {
public:
  // construct/copy/destruct
  scoped_thread_id(frontend_mutex_type &, condition_variable_any &, 
                   thread::id &, bool volatile &);
  scoped_thread_id(unique_lock< frontend_mutex_type > &, 
                   condition_variable_any &, thread::id &, bool volatile &);
  scoped_thread_id(scoped_thread_id const &);
  scoped_thread_id & operator=(scoped_thread_id const &);
  ~scoped_thread_id();
};
.fi
.SH "DESCRIPTION"
.SS "scoped_thread_id public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
scoped_thread_id(frontend_mutex_type & mut, condition_variable_any & cond, 
                 thread::id & tid, bool volatile & sr);
.fi

Initializing constructor\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
scoped_thread_id(unique_lock< frontend_mutex_type > & l, 
                 condition_variable_any & cond, thread::id & tid, 
                 bool volatile & sr);
.fi

Initializing constructor\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
scoped_thread_id(scoped_thread_id const &);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
scoped_thread_id & operator=(scoped_thread_id const &);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
~scoped_thread_id();
.fi

Destructor\&. .RE


