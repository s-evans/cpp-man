.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS RAND48" 3 "" "" ""
.SH "NAME"
boost::random::rand48
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/linear_congruential\&.hpp>


class rand48 {
public:
  // types
  typedef boost::uint32_t result_type;

  // construct/copy/destruct
  rand48();
  explicit rand48(result_type);
  template<typename SeedSeq> explicit rand48(SeedSeq &);
  template<typename It> rand48(It &, It);

  // public static functions
  static uint32_t min();
  static uint32_t max();

  // public member functions
  void seed();
  void seed(result_type);
  template<typename It> void seed(It &, It);
  template<typename SeedSeq> void seed(SeedSeq &);
  uint32_t operator()();
  void discard(boost::uintmax_t);
  template<typename Iter> void generate(Iter, Iter);

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, const rand48 &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, rand48 &);
  friend bool operator==(const rand48 &, const rand48 &);
  friend bool operator!=(const rand48 &, const rand48 &);

  // public data members
  static const bool has_fixed_range;
};
.fi
.SH "DESCRIPTION"
.PP
Class
rand48
models a
pseudo\-random number generator
\&. It uses the linear congruential algorithm with the parameters a = 0x5DEECE66D, c = 0xB, m = 2**48\&. It delivers identical results to the
lrand48()
function available on some systems (assuming lcong48 has not been called)\&.
.PP
It is only available on systems where
uint64_t
is provided as an integral type, so that for example static in\-class constants and/or enum definitions with large
uint64_t
numbers work\&.
.SS "rand48 public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
rand48();
.fi

.sp
Seeds the generator with the default seed\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit rand48(result_type x0);
.fi

.sp
Constructs a
rand48
generator with x(0) := (x0 << 16) | 0x330e\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeedSeq> explicit rand48(SeedSeq & seq);
.fi

.sp
Seeds the generator with values produced by
seq\&.generate()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename It> rand48(It & first, It last);
.fi

.sp
Seeds the generator using values from an iterator range, and updates first to point one past the last value consumed\&.
.RE

.SS "rand48 public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static uint32_t min();
.fi

.sp
Returns the smallest value that the generator can produce
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static uint32_t max();
.fi

.sp
Returns the largest value that the generator can produce
.RE

.SS "rand48 public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void seed();
.fi

.sp
Seeds the generator with the default seed\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void seed(result_type x0);
.fi

.sp
Changes the current value x(n) of the generator to (x0 << 16) | 0x330e\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename It> void seed(It & first, It last);
.fi

.sp
Seeds the generator using values from an iterator range, and updates first to point one past the last value consumed\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename SeedSeq> void seed(SeedSeq & seq);
.fi

.sp
Seeds the generator with values produced by
seq\&.generate()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
uint32_t operator()();
.fi

.sp
Returns the next value of the generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void discard(boost::uintmax_t z);
.fi

.sp
Advances the state of the generator by
z\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename Iter> void generate(Iter first, Iter last);
.fi

.sp
Fills a range with random values
.RE

.SS "rand48 friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, const rand48 & r);
.fi

.sp
Writes a
rand48
to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, rand48 & r);
.fi

.sp
Reads a
rand48
from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const rand48 & x, const rand48 & y);
.fi

.sp
Returns true if the two generators will produce identical sequences of values\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const rand48 & x, const rand48 & y);
.fi

.sp
Returns true if the two generators will produce different sequences of values\&.
.RE


