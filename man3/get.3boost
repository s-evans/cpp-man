.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION GET" 3 "" "" ""
.SH "NAME"
boost::get \- Retrieves a value of a specified type from a given variant\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/variant/get\&.hpp>


template<typename U, typename T1, typename T2, \&.\&.\&., typename TN> 
  U * get(variant<T1, T2, \&.\&.\&., TN> * operand);
template<typename U, typename T1, typename T2, \&.\&.\&., typename TN> 
  const U * get(const variant<T1, T2, \&.\&.\&., TN> * operand);
template<typename U, typename T1, typename T2, \&.\&.\&., typename TN> 
  U & get(variant<T1, T2, \&.\&.\&., TN> & operand);
template<typename U, typename T1, typename T2, \&.\&.\&., typename TN> 
  const U & get(const variant<T1, T2, \&.\&.\&., TN> & operand);
.fi
.SH "DESCRIPTION"
.sp
Evaluates to strict_get if BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT is not defined\&. If BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT is defined then evaluates to relaxed_get\&.
.sp
\fBRecomendation\fR: Use get in new code without defining BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT\&. In that way get provides more compile time checks and it\'s behavior is closer to std::get from C++ Standard Library\&.

