.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION" 3 "" "" ""
.SH "NAME"
boost::log::make_exception_handler
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/exception_handler\&.hpp>


template<typename\&.\&.\&. ExceptionsT, typename HandlerT> 
  nothrow_exception_handler< MPL_sequence_of_ExceptionsT, HandlerT > 
  make_exception_handler(HandlerT const & handler, std::nothrow_t const &);
.fi
.SH "DESCRIPTION"
.PP
The function creates an exception handler functional object\&. The handler will call to the user\-specified functional object with an exception as its argument\&. If the exception type cannot be identified, the handler will call the user\-defined functor with no arguments, instead of propagating exception to the caller\&. All expected exception types should be specified as first template parameters explicitly, in the order they would be specified in a corresponding
try/catch
statement\&.
.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP

.PP
Parameters:
.RS 4
.PP
handler
.RS 4
User\-defined functional object that will receive exceptions\&.
.RE
.RE
.PP
Returns:
.RS 4
A nullary functional object that should be called from within a
catch
statement\&.
.RE

