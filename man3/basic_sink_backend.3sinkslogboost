.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMP" 3 "" "" ""
.SH "NAME"
boost::log::sinks::basic_sink_backend \- Base class for a logging sink backend\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/basic_sink_backend\&.hpp>

template<typename FrontendRequirementsT> 
struct basic_sink_backend {
  // types
  typedef FrontendRequirementsT frontend_requirements;  // Frontend requirements tag\&. 

  // construct/copy/destruct
  basic_sink_backend() = default;
  basic_sink_backend(basic_sink_backend const &) = delete;
  basic_sink_backend & operator=(basic_sink_backend const &) = delete;
};
.fi
.SH "DESCRIPTION"
.PP
The
basic_sink_backend
class template defines a number of types that all sink backends are required to define\&. All sink backends have to derive from the class\&.
.SS "basic_sink_backend public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_sink_backend() = default;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_sink_backend(basic_sink_backend const &) = delete;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
basic_sink_backend & operator=(basic_sink_backend const &) = delete;
.fi

.RE


