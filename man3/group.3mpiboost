.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS GROUP" 3 "" "" ""
.SH "NAME"
boost::mpi::group \- A group is a representation of a subset of the processes within a communicator\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/mpi/group\&.hpp>


class group {
public:
  // construct/copy/destruct
  group();
  group(const MPI_Group &, bool);

  // public member functions
  optional< int > rank() const;
  int size() const;
  template<typename InputIterator, typename OutputIterator> 
    OutputIterator 
    translate_ranks(InputIterator, InputIterator, const group &, 
                    OutputIterator);
  operator bool() const;
  operator MPI_Group() const;
  template<typename InputIterator> group include(InputIterator, InputIterator);
  template<typename InputIterator> group exclude(InputIterator, InputIterator);
};
.fi
.SH "DESCRIPTION"
.PP
The
group
class allows one to create arbitrary subsets of the processes within a communicator\&. One can compute the union, intersection, or difference of two groups, or create new groups by specifically including or excluding certain processes\&. Given a group, one can create a new communicator containing only the processes in that group\&.
.SS "group public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
group();
.fi

Constructs an empty group\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
group(const MPI_Group & in_group, bool adopt);
.fi

Constructs a group from an MPI_Group\&. This routine allows one to construct a Boost\&.MPI
group
from a C
MPI_Group\&. The
group
object can (optionally) adopt the
MPI_Group, after which point the
group
object becomes responsible for freeing the
MPI_Group
when the last copy of
group
disappears\&.
.sp

.PP
Parameters:
.RS 4
.PP
adopt
.RS 4
Whether the
group
should adopt the
MPI_Group\&. When true, the
group
object (or one of its copies) will free the group (via
MPI_Comm_free) when the last copy is destroyed\&. Otherwise, the user is responsible for calling
MPI_Group_free\&.
.RE
.PP
in_group
.RS 4
The
MPI_Group
used to construct this
group\&.
.RE
.RE
.RE

.SS "group public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
optional< int > rank() const;
.fi

.sp
Determine the rank of the calling process in the group\&. This routine is equivalent to
MPI_Group_rank\&.
.sp

.PP
Returns:
.RS 4
The rank of the calling process in the group, which will be a value in [0, size())\&. If the calling process is not in the group, returns an empty value\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
int size() const;
.fi

.sp
Determine the number of processes in the group\&. This routine is equivalent to
MPI_Group_size\&.
.sp

.PP
Returns:
.RS 4
The number of processes in the group\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename InputIterator, typename OutputIterator> 
  OutputIterator 
  translate_ranks(InputIterator first, InputIterator last, 
                  const group & to_group, OutputIterator out);
.fi

.sp
Translates the ranks from one group into the ranks of the same processes in another group\&. This routine translates each of the integer rank values in the iterator range
[first, last) from the current group into rank values of the corresponding processes in
to_group\&. The corresponding rank values are written via the output iterator
out\&. When there is no correspondence between a rank in the current group and a rank in
to_group, the value
MPI_UNDEFINED
is written to the output iterator\&.
.sp

.PP
Parameters:
.RS 4
.PP
first
.RS 4
Beginning of the iterator range of ranks in the current group\&.
.RE
.PP
last
.RS 4
Past the end of the iterator range of ranks in the current group\&.
.RE
.PP
out
.RS 4
The output iterator to which the translated ranks will be written\&.
.RE
.PP
to_group
.RS 4
The group that we are translating ranks to\&.
.RE
.RE
.PP
Returns:
.RS 4
the output iterator, which points one step past the last rank written\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
operator bool() const;
.fi

.sp
Determines whether the group is non\-empty\&. 
.PP
Returns:
.RS 4
True if the group is not empty, false if it is empty\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
operator MPI_Group() const;
.fi

Retrieves the underlying MPI_Group associated with this group\&. 
.PP
Returns:
.RS 4
The
MPI_Group
handle manipulated by this object\&. If this object represents the empty group, returns
MPI_GROUP_EMPTY\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
template<typename InputIterator> 
  group include(InputIterator first, InputIterator last);
.fi

.sp
Creates a new group including a subset of the processes in the current group\&. This routine creates a new
group
which includes only those processes in the current group that are listed in the integer iterator range
[first, last)\&. Equivalent to
MPI_Group_incl\&.
.sp
first
The beginning of the iterator range of ranks to include\&.
.sp
last
Past the end of the iterator range of ranks to include\&.
.sp

.PP
Returns:
.RS 4
A new group containing those processes with ranks
[first, last) in the current group\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename InputIterator> 
  group exclude(InputIterator first, InputIterator last);
.fi

.sp
Creates a new group from all of the processes in the current group, exluding a specific subset of the processes\&. This routine creates a new
group
which includes all of the processes in the current group except those whose ranks are listed in the integer iterator range
[first, last)\&. Equivalent to
MPI_Group_excl\&.
.sp
first
The beginning of the iterator range of ranks to exclude\&.
.sp
last
Past the end of the iterator range of ranks to exclude\&.
.sp

.PP
Returns:
.RS 4
A new group containing all of the processes in the current group except those processes with ranks
[first, last) in the current group\&.
.RE
.RE


