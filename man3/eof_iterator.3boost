.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::eof_iterator
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/eof_iterator\&.hpp>

template<typename Derived, typename ValueType> 
class eof_iterator :
  public iterator_facade< Derived, const ValueType, forward_traversal_tag >
{
public:
  // construct/copy/destruct
  eof_iterator();

  // protected member functions
  ValueType & value();
  void found_eof();

  // private member functions
  void increment();
  bool equal(const eof_iterator &) const;
  const ValueType & dereference() const;
};
.fi
.SH "DESCRIPTION"
.PP
The \'eof_iterator\' class is useful for constructing forward iterators in cases where iterator extract data from some source and it\'s easy to detect \'eof\' \-\- i\&.e\&. the situation where there\'s no data\&. One apparent example is reading lines from a file\&.
.PP
Implementing such iterators using \'iterator_facade\' directly would require to create class with three core operation, a couple of constructors\&. When using \'eof_iterator\', the derived class should define only one method to get new value, plus a couple of constructors\&.
.PP
The basic idea is that iterator has \'eof\' bit\&. Two iterators are equal only if both have their \'eof\' bits set\&. The \'get\' method either obtains the new value or sets the \'eof\' bit\&.
.PP
Specifically, derived class should define:
.PP

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
A default constructor, which creates iterator with \'eof\' bit set\&. The constructor body should call \'found_eof\' method defined here\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Some other constructor\&. It should initialize some \'data pointer\' used in iterator operation and then call \'get\'\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
The \'get\' method\&. It should operate this way:
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
look at some \'data pointer\' to see if new element is available; if not, it should call \'found_eof\'\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
extract new element and store it at location returned by the \'value\' method\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
advance the data pointer\&.
.RE
.RS 4

.RE

.sp
.RE

.PP
Essentially, the \'get\' method has the functionality of both \'increment\' and \'dereference\'\&. It\'s very good for the cases where data extraction implicitly moves data pointer, like for stream operation\&.
.SS "eof_iterator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
eof_iterator();
.fi

.RE

.SS "eof_iterator protected member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
ValueType & value();
.fi

.sp
Returns the reference which should be used by derived class to store the next value\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void found_eof();
.fi

.sp
Should be called by derived class to indicate that it can\'t produce next element\&.
.RE

.SS "eof_iterator private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void increment();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
bool equal(const eof_iterator & other) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
const ValueType & dereference() const;
.fi

.RE


