.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE T" 3 "" "" ""
.SH "NAME"
boost::xpressive::op::throw_ \- throw_<> is a PolymorphicFunctionObject for throwing an exception\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_actions\&.hpp>

template<typename Except> 
struct throw_ {
  // types
  typedef void result_type;

  // public member functions
  void operator()() const;
  template<typename A0> void operator()(A0 const &) const;
  template<typename A0, typename A1> 
    void operator()(A0 const &, A1 const &) const;
  template<typename A0, typename A1, typename A2> 
    void operator()(A0 const &, A1 const &, A2 const &) const;
};
.fi
.SH "DESCRIPTION"
.PP

.SS "Template Parameters"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
typename Except
.fi

.sp
The type of the object to throw\&.
.RE

.SS "throw_ public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void operator()() const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename A0> void operator()(A0 const & a0) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename A0, typename A1> 
  void operator()(A0 const & a0, A1 const & a1) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename A0, typename A1, typename A2> 
  void operator()(A0 const & a0, A1 const & a1, A2 const & a2) const;
.fi

.sp

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
This function makes use of the
BOOST_THROW_EXCEPTION
macro to actually throw the exception\&. See the documentation for the Boost\&.Exception library\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
a0
.RS 4
The first argument to the constructor
.RE
.PP
a1
.RS 4
The second argument to the constructor
.RE
.PP
a2
.RS 4
The third argument to the constructor
.RE
.RE
.PP
Throws:
.RS 4
<tt>Except(a0
.RE
.RE


