.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS DATE_DURATION" 3 "" "" ""
.SH "NAME"
boost::gregorian::date_duration \- Durations in days for gregorian system\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/gregorian/greg_duration\&.hpp>


class date_duration :
  public boost::date_time::date_duration< date_duration_rep >
{
public:
  // types
  typedef base_type::duration_rep duration_rep;

  // construct/copy/destruct
  explicit date_duration(duration_rep = 0);
  date_duration(date_time::special_values);
  date_duration(const date_duration &);
  date_duration(const base_type &);

  // public member functions
  bool operator==(const date_duration &) const;
  bool operator!=(const date_duration &) const;
  bool operator<(const date_duration &) const;
  bool operator>(const date_duration &) const;
  bool operator<=(const date_duration &) const;
  bool operator>=(const date_duration &) const;
  date_duration & operator\-=(const date_duration &);
  date_duration & operator+=(const date_duration &);
  date_duration operator\-() const;
  date_duration & operator/=(int);

  // public static functions
  static date_duration unit();
};
.fi
.SH "DESCRIPTION"
.SS "date_duration public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit date_duration(duration_rep day_count = 0);
.fi

Construct from a day count\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
date_duration(date_time::special_values sv);
.fi

construct from special_values .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
date_duration(const date_duration & other);
.fi

Copy constructor\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
date_duration(const base_type & other);
.fi

Construct from another date_duration\&. .RE

.SS "date_duration public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
bool operator==(const date_duration & rhs) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
bool operator!=(const date_duration & rhs) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
bool operator<(const date_duration & rhs) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
bool operator>(const date_duration & rhs) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
bool operator<=(const date_duration & rhs) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
bool operator>=(const date_duration & rhs) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
date_duration & operator\-=(const date_duration & rhs);
.fi

Subtract another duration <ndash></ndash> result is signed\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
date_duration & operator+=(const date_duration & rhs);
.fi

Add a duration <ndash></ndash> result is signed\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
date_duration operator\-() const;
.fi

unary\- Allows for dd = \-date_duration(2); \-> dd == \-2 .RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
date_duration & operator/=(int divisor);
.fi

Division operations on a duration with an integer\&. .RE

.SS "date_duration public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static date_duration unit();
.fi

Returns the smallest duration <ndash></ndash> used by to calculate \'end\'\&. .RE


