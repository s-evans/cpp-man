.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::interprocess::simple_seq_fit
.SH "SYNOPSIS"
.\" size_type: Class template simple_seq_fit
.\" Class template simple_seq_fit: size_type
.\" simple_seq_fit: Class template simple_seq_fit
.\" Class template simple_seq_fit: simple_seq_fit

.sp
.nf
// In header: <boost/interprocess/mem_algo/simple_seq_fit\&.hpp>

template<typename MutexFamily, typename VoidPointer> 
class simple_seq_fit {
public:
  // types
  typedef base_t::size_type size_type;

  // construct/copy/destruct
  simple_seq_fit(size_type, size_type);
};
.fi
.SH "DESCRIPTION"
.PP
This class implements the simple sequential fit algorithm with a simply linked list of free buffers\&.
.SS "simple_seq_fit public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
simple_seq_fit(size_type segment_size, size_type extra_hdr_bytes);
.fi

.sp
Constructor\&. "size" is the total size of the managed memory segment, "extra_hdr_bytes" indicates the extra bytes beginning in the sizeof(simple_seq_fit) offset that the allocator should not use at all\&.
.RE


