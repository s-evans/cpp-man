.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::icl::interval
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/icl/interval\&.hpp>

template<typename DomainT, 
         ICL_COMPARE Compare = ICL_COMPARE_INSTANCE(ICL_COMPARE_DEFAULT, DomainT)> 
struct interval {
  // types
  typedef interval_type_default< DomainT, Compare >::type interval_type;
  typedef interval_type                                   type;         

  // public static functions
  static interval_type right_open(const DomainT &, const DomainT &);
  static interval_type left_open(const DomainT &, const DomainT &);
  static interval_type open(const DomainT &, const DomainT &);
  static interval_type closed(const DomainT &, const DomainT &);
  static interval_type construct(const DomainT &, const DomainT &);
};
.fi
.SH "DESCRIPTION"
.SS "interval public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static interval_type right_open(const DomainT & low, const DomainT & up);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static interval_type left_open(const DomainT & low, const DomainT & up);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
static interval_type open(const DomainT & low, const DomainT & up);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
static interval_type closed(const DomainT & low, const DomainT & up);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
static interval_type construct(const DomainT & low, const DomainT & up);
.fi

.RE


