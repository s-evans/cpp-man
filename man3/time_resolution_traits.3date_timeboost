.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::date_time::time_resolution_traits
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/time_resolution_traits\&.hpp>

template<typename frac_sec_type, time_resolutions res, 
         #if(defined(BOOST_MSVC)&&(_MSC_VER< 1300)) boost::int64_t resolution_adjust, 
         #else typename frac_sec_type::int_type resolution_adjust, 
         #endif unsigned short frac_digits, 
         typename var_type = boost::int32_t> 
class time_resolution_traits {
public:
  // types
  typedef frac_sec_type::int_type  fractional_seconds_type;
  typedef frac_sec_type::int_type  tick_type;              
  typedef frac_sec_type::impl_type impl_type;              
  typedef var_type                 day_type;               
  typedef var_type                 hour_type;              
  typedef var_type                 min_type;               
  typedef var_type                 sec_type;               

  // public static functions
  static fractional_seconds_type as_number(impl_type);
  static bool is_adapted();
  static time_resolutions resolution();
  static unsigned short num_fractional_digits();
  static fractional_seconds_type res_adjust();
  static tick_type 
  to_tick_count(hour_type, min_type, sec_type, fractional_seconds_type);

  // public member functions
   BOOST_STATIC_CONSTANT(boost::int64_t, ticks_per_second = resolution_adjust);
   BOOST_STATIC_CONSTANT(fractional_seconds_type, 
                         ticks_per_second = resolution_adjust);
};
.fi
.SH "DESCRIPTION"
.SS "time_resolution_traits public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static fractional_seconds_type as_number(impl_type i);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static bool is_adapted();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
static time_resolutions resolution();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
static unsigned short num_fractional_digits();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
static fractional_seconds_type res_adjust();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
static tick_type 
to_tick_count(hour_type hours, min_type minutes, sec_type seconds, 
              fractional_seconds_type fs);
.fi

Any negative argument results in a negative tick_count\&. .RE

.SS "time_resolution_traits public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(boost::int64_t, ticks_per_second = resolution_adjust);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(fractional_seconds_type, 
                       ticks_per_second = resolution_adjust);
.fi

.RE


