.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::proto::_default \- A PrimitiveTransform that gives expressions their usual C++ behavior
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/default\&.hpp>

template<typename Grammar = \fIunspecified\fR> 
struct _default :  proto::transform< _default<Grammar> > {
  // member classes/structs/unions
  template<typename Expr, typename State, typename Data> 
  struct impl :  proto::transform_impl<Expr, State, Data> {
    // types
    typedef typename Expr::tag_type Tag;          // For exposition only
    typedef \fIsee\fR\fI\-\fR\fIbelow\fR               result_type;

    // public member functions
    result_type operator()(typename impl::expr_param, 
                           typename impl::state_param, 
                           typename impl::data_param) const;

    // public data members
    static Expr s_expr;    // For exposition only
    static State s_state;    // For exposition only
    static Data s_data;    // For exposition only
  };
};
.fi
.SH "DESCRIPTION"
.PP
For the complete description of the behavior of the
proto::_default
transform, see the documentation for the nested
proto::_default::impl<>
class template\&.
.PP
When used without specifying a
Grammar
parameter,
proto::_default
behaves as if the parameter were
proto::_default<>\&.

