.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::log::attributes::function::impl_template \- Factory implementation\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/function\&.hpp>



// Factory implementation\&.
template<typename T> 
class impl_template : public function< R >::impl {
public:
  // construct/copy/destruct
  explicit impl_template(T const &);

  // public member functions
  virtual attribute_value get_value();
};
.fi
.SH "DESCRIPTION"
.SS "impl_template public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit impl_template(T const & fun);
.fi

.sp
Constructor with the stored delegate initialization
.RE

.SS "impl_template public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual attribute_value get_value();
.fi

.sp

.PP
Returns:
.RS 4
The actual attribute value\&. It shall not return empty values (exceptions shall be used to indicate errors)\&.
.RE
.RE


