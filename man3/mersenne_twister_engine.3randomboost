.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::random::mersenne_twister_engine
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/mersenne_twister\&.hpp>

template<typename UIntType, std::size_t w, std::size_t n, std::size_t m, 
         std::size_t r, UIntType a, std::size_t u, UIntType d, std::size_t s, 
         UIntType b, std::size_t t, UIntType c, std::size_t l, UIntType f> 
class mersenne_twister_engine {
public:
  // types
  typedef UIntType result_type;

  // construct/copy/destruct
  mersenne_twister_engine();
  explicit mersenne_twister_engine(UIntType);
  template<typename It> mersenne_twister_engine(It &, It);
  template<typename SeedSeq> explicit mersenne_twister_engine(SeedSeq &);

  // public member functions
  void seed();
  void seed(UIntType);
  template<typename SeeqSeq> void seed(SeeqSeq &);
  template<typename It> void seed(It &, It);
  result_type operator()();
  template<typename Iter> void generate(Iter, Iter);
  void discard(boost::uintmax_t);

  // public static functions
  static result_type min();
  static result_type max();

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, 
               const mersenne_twister_engine &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, 
               mersenne_twister_engine &);
  friend bool operator==(const mersenne_twister_engine &, 
                         const mersenne_twister_engine &);
  friend bool operator!=(const mersenne_twister_engine &, 
                         const mersenne_twister_engine &);

  // public data members
  static const std::size_t word_size;
  static const std::size_t state_size;
  static const std::size_t shift_size;
  static const std::size_t mask_bits;
  static const UIntType xor_mask;
  static const std::size_t tempering_u;
  static const UIntType tempering_d;
  static const std::size_t tempering_s;
  static const UIntType tempering_b;
  static const std::size_t tempering_t;
  static const UIntType tempering_c;
  static const std::size_t tempering_l;
  static const UIntType initialization_multiplier;
  static const UIntType default_seed;
  static const UIntType parameter_a;
  static const std::size_t output_u;
  static const std::size_t output_s;
  static const UIntType output_b;
  static const std::size_t output_t;
  static const UIntType output_c;
  static const std::size_t output_l;
  static const bool has_fixed_range;
};
.fi
.SH "DESCRIPTION"
.PP
Instantiations of class template
mersenne_twister_engine
model a
pseudo\-random number generator
\&. It uses the algorithm described in
.PP

.PP "Mersenne Twister: A 623\-dimensionally equidistributed uniform pseudo\-random number generator", Makoto Matsumoto and Takuji Nishimura, ACM Transactions on Modeling and Computer Simulation: Special Issue on Uniform Random Number Generation, Vol\&. 8, No\&. 1, January 1998, pp\&. 3\-30\&.
.PP

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
The boost variant has been implemented from scratch and does not derive from or use mt19937\&.c provided on the above WWW site\&. However, it was verified that both produce identical output\&.
.sp .5v
.RE

.PP
The seeding from an integer was changed in April 2005 to address a
\m[blue]\fBweakness\fR\m[]\&\s-2\u[1]\d\s+2\&.
.PP
The quality of the generator crucially depends on the choice of the parameters\&. User code should employ one of the sensibly parameterized generators such as
mt19937
instead\&.
.PP
The generator requires considerable amounts of memory for the storage of its state array\&. For example,
mt11213b
requires about 1408 bytes and
mt19937
requires about 2496 bytes\&.
.SS "mersenne_twister_engine public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
mersenne_twister_engine();
.fi

.sp
Constructs a
mersenne_twister_engine
and calls
seed()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit mersenne_twister_engine(UIntType value);
.fi

.sp
Constructs a
mersenne_twister_engine
and calls
seed(value)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename It> mersenne_twister_engine(It & first, It last);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename SeedSeq> explicit mersenne_twister_engine(SeedSeq & seq);
.fi

.sp
Constructs a
mersenne_twister_engine
and calls
seed(gen)\&.
.sp

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
The copy constructor will always be preferred over the templated constructor\&.
.sp .5v
.RE

.RE

.SS "mersenne_twister_engine public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void seed();
.fi

.sp
Calls
seed(default_seed)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void seed(UIntType value);
.fi

.sp
Sets the state x(0) to v mod 2w\&. Then, iteratively, sets x(i) to (i + f * (x(i\-1) xor (x(i\-1) rshift w\-2))) mod 2w
for i = 1 \&.\&. n\-1\&. x(n) is the first value to be returned by operator()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename SeeqSeq> void seed(SeeqSeq & seq);
.fi

.sp
Seeds a
mersenne_twister_engine
using values produced by seq\&.generate()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename It> void seed(It & first, It last);
.fi

.sp
Sets the state of the generator using values from an iterator range\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
result_type operator()();
.fi

.sp
Produces the next value of the generator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
template<typename Iter> void generate(Iter first, Iter last);
.fi

.sp
Fills a range with random values
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void discard(boost::uintmax_t z);
.fi

.sp
Advances the state of the generator by
z
steps\&. Equivalent to
.sp

.sp
.if n \{\
.RS 4
.\}
.nf
for(unsigned long long i = 0; i < z; ++i) {
    gen();
}

.fi
.if n \{\
.RE
.\}
.sp

.RE

.SS "mersenne_twister_engine public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static result_type min();
.fi

.sp
Returns the smallest value that the generator can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static result_type max();
.fi

.sp
Returns the largest value that the generator can produce\&.
.RE

.SS "mersenne_twister_engine friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const mersenne_twister_engine & mt);
.fi

.sp
Writes a
mersenne_twister_engine
to a
std::ostream
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             mersenne_twister_engine & mt);
.fi

.sp
Reads a
mersenne_twister_engine
from a
std::istream
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const mersenne_twister_engine & x_, 
                       const mersenne_twister_engine & y_);
.fi

.sp
Returns true if the two generators are in the same state, and will thus produce identical sequences\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const mersenne_twister_engine & x_, 
                       const mersenne_twister_engine & y_);
.fi

.sp
Returns true if the two generators are in different states\&.
.RE


