.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::xpressive::skip \- Specify which characters to skip when matching a regex\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_primitives\&.hpp>


template<typename Skip> \fIunspecified\fR skip(Skip const & skip);
.fi
.SH "DESCRIPTION"
.PP
skip()
instructs the regex engine to skip certain characters when matching a regex\&. It is most useful for writing regexes that ignore whitespace\&. For instance, the following specifies a regex that skips whitespace and punctuation:
.PP

.sp
.if n \{\
.RS 4
.\}
.nf
// A sentence is one or more words separated by whitespace
// and punctuation\&.
sregex word = +alpha;
sregex sentence = skip(set[_s | punct])( +word );

.fi
.if n \{\
.RE
.\}

.PP
The way it works in the above example is to insert
keep(*set[_s | punct])
before each primitive within the regex\&. A "primitive" includes terminals like strings, character sets and nested regexes\&. A final
*set[_s | punct]
is added to the end of the regex\&. The regex
sentence
specified above is equivalent to the following:
.PP

.sp
.if n \{\
.RS 4
.\}
.nf
sregex sentence = +( keep(*set[_s | punct]) >> word )
                       >> *set[_s | punct];

.fi
.if n \{\
.RE
.\}

.PP
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Skipping does not affect how nested regexes are handled because they are treated atomically\&. String literals are also treated atomically; that is, no skipping is done within a string literal\&. So
skip(_s)("this that")
is not the same as
skip(_s)("this" >> as_xpr("that"))\&. The first will only match when there is only one space between "this" and "that"\&. The second will skip any and all whitespace between "this" and "that"\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
skip
.RS 4
A regex that specifies which characters to skip\&.
.RE
.RE

