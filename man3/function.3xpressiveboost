.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::xpressive::function \- A unary metafunction that turns an ordinary function object type into the type of a deferred function object for use in xpressive semantic actions\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_actions\&.hpp>

template<typename PolymorphicFunctionObject> 
struct function {
  // types
  typedef proto::terminal< PolymorphicFunctionObject >::type type;
};
.fi
.SH "DESCRIPTION"
.PP
Use
xpressive::function<>
to turn an ordinary polymorphic function object type into a type that can be used to declare an object for use in xpressive semantic actions\&.
.PP
For example, the global object
xpressive::push_back
can be used to create deferred actions that have the effect of pushing a value into a container\&. It is defined with
xpressive::function<>
as follows:
.sp
.if n \{\
.RS 4
.\}
.nf
xpressive::function<xpressive::op::push_back>::type const push_back = {};

.fi
.if n \{\
.RE
.\}
.sp
where
op::push_back
is an ordinary function object that pushes its second argument into its first\&. Thus defined,
xpressive::push_back
can be used in semantic actions as follows:
.sp
.if n \{\
.RS 4
.\}
.nf
namespace xp = boost::xpressive;
using xp::_;
std::list<int> result;
std::string str("1 23 456 7890");
xp::sregex rx = (+_d)[ xp::push_back(xp::ref(result), xp::as<int>(_) ]
    >> *(\' \' >> (+_d)[ xp::push_back(xp::ref(result), xp::as<int>(_) ) ]);

.fi
.if n \{\
.RE
.\}
.sp


