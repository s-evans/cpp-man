.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::date_time::ostream_ymd_formatter \- Convert ymd to a standard string formatting policies\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/date_formatting_locales\&.hpp>

template<typename ymd_type, typename facet_type, typename charT = char> 
class ostream_ymd_formatter {
public:
  // types
  typedef ymd_type::month_type                         month_type;          
  typedef ostream_month_formatter< facet_type, charT > month_formatter_type;
  typedef std::basic_ostream< charT >                  ostream_type;        
  typedef std::basic_string< charT >                   foo_type;            

  // public static functions
  static void ymd_put(ymd_type, ostream_type &, const facet_type &);
};
.fi
.SH "DESCRIPTION"
.SS "ostream_ymd_formatter public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static void ymd_put(ymd_type ymd, ostream_type & os, const facet_type & f);
.fi

.sp
Convert ymd to a standard string formatting policies\&. This is standard code for handling date formatting with year\-month\-day based date information\&. This function uses the format_type to control whether the string will contain separator characters, and if so what the character will be\&. In addtion, it can format the month as either an integer or a string as controled by the formatting policy
.RE


