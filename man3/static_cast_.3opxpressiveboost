.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::xpressive::op::static_cast_ \- static_cast_<> is a PolymorphicFunctionObject for statically casting a parameter to a different type\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_actions\&.hpp>

template<typename T> 
struct static_cast_ {
  // types
  typedef T result_type;

  // public member functions
  template<typename Value> T operator()(Value const &) const;
};
.fi
.SH "DESCRIPTION"
.PP

.SS "Template Parameters"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
typename T
.fi

.sp
The type to which to statically cast the parameter\&.
.RE

.SS "static_cast_ public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Value> T operator()(Value const & val) const;
.fi

.sp

.PP
Parameters:
.RS 4
.PP
val
.RS 4
The value to statically cast\&.
.RE
.RE
.PP
Returns:
.RS 4
static_cast<T>(val)
.RE
.RE


