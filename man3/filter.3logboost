.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS FILTER" 3 "" "" ""
.SH "NAME"
boost::log::filter
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/expressions/filter\&.hpp>


class filter {
public:
  // types
  typedef bool result_type;  // Result type\&. 

  // member classes/structs/unions

  // Default filter, always returns true\&. 

  struct default_filter {
    // types
    typedef bool result_type;

    // public member functions
    result_type operator()(attribute_value_set const &) const;
  };

  // construct/copy/destruct
  filter();
  filter(filter const &);
  filter(filter &&) noexcept;
  template<typename FunT> filter(FunT &&);
  filter & operator=(filter &&) noexcept;
  filter & operator=(filter const &);
  template<typename FunT> filter & operator=(FunT const &);

  // public member functions
  result_type operator()(attribute_value_set const &) const;
  void reset();
  void swap(filter &) noexcept;
};
.fi
.SH "DESCRIPTION"
.PP
Log record filter function wrapper\&.
.SS "filter public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
filter();
.fi

.sp
Default constructor\&. Creates a filter that always returns
true\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
filter(filter const & that);
.fi

.sp
Copy constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
filter(filter && that) noexcept;
.fi

.sp
Move constructor\&. The moved\-from filter is left in an unspecified state\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename FunT> filter(FunT && fun);
.fi

.sp
Initializing constructor\&. Creates a filter which will invoke the specified function object\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
filter & operator=(filter && that) noexcept;
.fi

.sp
Move assignment\&. The moved\-from filter is left in an unspecified state\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
filter & operator=(filter const & that);
.fi

.sp
Copy assignment\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename FunT> filter & operator=(FunT const & fun);
.fi

.sp
Initializing assignment\&. Sets the specified function object to the filter\&.
.RE

.SS "filter public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()(attribute_value_set const & values) const;
.fi

.sp
Filtering operator\&.
.sp

.PP
Parameters:
.RS 4
.PP
values
.RS 4
Attribute values of the log record\&.
.RE
.RE
.PP
Returns:
.RS 4
true
if the log record passes the filter,
false
otherwise\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void reset();
.fi

.sp
Resets the filter to the default\&. The default filter always returns
true\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void swap(filter & that) noexcept;
.fi

.sp
Swaps two filters
.RE


