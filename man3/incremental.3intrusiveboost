.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::intrusive::incremental
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/intrusive/options\&.hpp>

template<bool Enabled> 
struct incremental {
};
.fi
.SH "DESCRIPTION"
.PP
This option setter specifies if the hash container will use incremental hashing\&. With incremental hashing the cost of hash table expansion is spread out across each hash table insertion operation, as opposed to be incurred all at once\&. Therefore linear hashing is well suited for interactive applications or real\-time appplications where the worst\-case insertion time of non\-incremental hash containers (rehashing the whole bucket array) is not admisible\&.

