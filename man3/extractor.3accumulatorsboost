.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::accumulators::extractor \- Extracts the result associated with Feature from the specified accumulator_set\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/accumulators/accumulators_fwd\&.hpp>

template<typename Feature> 
struct extractor {

  // public member functions
  template<typename Arg1> \fIunspecified\fR operator()(Arg1 const &) const;
  template<typename AccumulatorSet, typename A1> 
    \fIunspecified\fR operator()(AccumulatorSet const &, A1 const &) const;
  template<typename AccumulatorSet, typename A1, typename A2, \&.\&.\&. > 
    \fIunspecified\fR operator()(AccumulatorSet const &, A1 const &, A2 const &, 
                           \&.\&.\&.);
};
.fi
.SH "DESCRIPTION"
.SS "extractor public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Arg1> \fIunspecified\fR operator()(Arg1 const & arg1) const;
.fi

.sp
Extract the result associated with Feature from the accumulator set
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename AccumulatorSet, typename A1> 
  \fIunspecified\fR operator()(AccumulatorSet const & acc, A1 const & a1) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.sp

.PP
Parameters:
.RS 4
.PP
a1
.RS 4
Optional named parameter to be passed to the accumulator\'s result() function\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename AccumulatorSet, typename A1, typename A2, \&.\&.\&. > 
  \fIunspecified\fR operator()(AccumulatorSet const & acc, A1 const & a1, 
                         A2 const & a2, \&.\&.\&.);
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


