.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS BASIC" 3 "" "" ""
.SH "NAME"
boost::program_options::basic_parsed_options<wchar_t>
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/parsers\&.hpp>


class basic_parsed_options<wchar_t> {
public:
  // construct/copy/destruct
  explicit basic_parsed_options(const basic_parsed_options< char > &);

  // public data members
  std::vector< basic_option< wchar_t > > options;
  const options_description * description;
  basic_parsed_options< char > utf8_encoded_options;
  int m_options_prefix;
};
.fi
.SH "DESCRIPTION"
.PP
Specialization of
basic_parsed_options
which:
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
provides convenient conversion from
basic_parsed_options<char>
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
stores the passed char\-based options for later use\&.
.RE
.sp
.RE

.SS "basic_parsed_options public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit basic_parsed_options(const basic_parsed_options< char > & po);
.fi

.sp
Constructs wrapped options from options in UTF8 encoding\&.
.RE

.SS "basic_parsed_options public public data members"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_parsed_options< char > utf8_encoded_options;
.fi

.sp
Stores UTF8 encoded options that were passed to constructor, to avoid reverse conversion in some cases\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
int m_options_prefix;
.fi

.sp
Mainly used for the diagnostic messages in exceptions\&. The canonical option prefix for the parser which generated these results, depending on the settings for basic_command_line_parser::style() or cmdline::style()\&. In order of precedence of command_line_style enums: allow_long allow_long_disguise allow_dash_for_short allow_slash_for_short
.RE


