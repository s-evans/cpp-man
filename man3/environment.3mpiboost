.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS ENVIRONMENT" 3 "" "" ""
.SH "NAME"
boost::mpi::environment \- Initialize, finalize, and query the MPI environment\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/mpi/environment\&.hpp>


class environment : private noncopyable {
public:
  // construct/copy/destruct
  explicit environment(bool = true);
  explicit environment(threading::level, bool = true);
  environment(int &, char **&, bool = true);
  environment(int &, char **&, threading::level, bool = true);
  ~environment();

  // public static functions
  static void abort(int);
  static bool initialized();
  static bool finalized();
  static int max_tag();
  static int collectives_tag();
  static optional< int > host_rank();
  static optional< int > io_rank();
  static std::string processor_name();
  static threading::level thread_level();
  static bool is_main_thread();
};
.fi
.SH "DESCRIPTION"
.PP
The
environment
class is used to initialize, finalize, and query the MPI environment\&. It will typically be used in the
main()
function of a program, which will create a single instance of
environment
initialized with the arguments passed to the program:
.PP

.sp
.if n \{\
.RS 4
.\}
.nf
int main(int argc, char* argv[])
{
  mpi::environment env(argc, argv);
}

.fi
.if n \{\
.RE
.\}

.PP
The instance of
environment
will initialize MPI (by calling
MPI_Init) in its constructor and finalize MPI (by calling
MPI_Finalize
for normal termination or
MPI_Abort
for an uncaught exception) in its destructor\&.
.PP
The use of
environment
is not mandatory\&. Users may choose to invoke
MPI_Init
and
MPI_Finalize
manually\&. In this case, no
environment
object is needed\&. If one is created, however, it will do nothing on either construction or destruction\&.
.SS "environment public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit environment(bool abort_on_exception = true);
.fi

.sp
Initialize the MPI environment\&.
.sp
If the MPI environment has not already been initialized, initializes MPI with a call to
MPI_Init\&. Since this constructor does not take command\-line arguments (argc
and
argv), it is only available when the underlying MPI implementation supports calling
MPI_Init
with
NULL
arguments, indicated by the macro
BOOST_MPI_HAS_NOARG_INITIALIZATION\&.
.sp

.PP
Parameters:
.RS 4
.PP
abort_on_exception
.RS 4
When true, this object will abort the program if it is destructed due to an uncaught exception\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit environment(threading::level mt_level, 
                     bool abort_on_exception = true);
.fi

.sp
Initialize the MPI environment\&.
.sp
If the MPI environment has not already been initialized, initializes MPI with a call to
MPI_Init_thread\&. Since this constructor does not take command\-line arguments (argc
and
argv), it is only available when the underlying MPI implementation supports calling
MPI_Init
with
NULL
arguments, indicated by the macro
BOOST_MPI_HAS_NOARG_INITIALIZATION\&.
.sp

.PP
Parameters:
.RS 4
.PP
abort_on_exception
.RS 4
When true, this object will abort the program if it is destructed due to an uncaught exception\&.
.RE
.PP
mt_level
.RS 4
the required level of threading support\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
environment(int & argc, char **& argv, bool abort_on_exception = true);
.fi

.sp
Initialize the MPI environment\&.
.sp
If the MPI environment has not already been initialized, initializes MPI with a call to
MPI_Init\&.
.sp

.PP
Parameters:
.RS 4
.PP
abort_on_exception
.RS 4
When true, this object will abort the program if it is destructed due to an uncaught exception\&.
.RE
.PP
argc
.RS 4
The number of arguments provided in
argv, as passed into the program\'s
main
function\&.
.RE
.PP
argv
.RS 4
The array of argument strings passed to the program via
main\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
environment(int & argc, char **& argv, threading::level mt_level, 
            bool abort_on_exception = true);
.fi

.sp
Initialize the MPI environment\&.
.sp
If the MPI environment has not already been initialized, initializes MPI with a call to
MPI_Init_thread\&.
.sp

.PP
Parameters:
.RS 4
.PP
abort_on_exception
.RS 4
When true, this object will abort the program if it is destructed due to an uncaught exception\&.
.RE
.PP
argc
.RS 4
The number of arguments provided in
argv, as passed into the program\'s
main
function\&.
.RE
.PP
argv
.RS 4
The array of argument strings passed to the program via
main\&.
.RE
.PP
mt_level
.RS 4
the required level of threading support
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
~environment();
.fi

.sp
Shuts down the MPI environment\&.
.sp
If this
environment
object was used to initialize the MPI environment, and the MPI environment has not already been shut down (finalized), this destructor will shut down the MPI environment\&. Under normal circumstances, this only involves invoking
MPI_Finalize\&. However, if destruction is the result of an uncaught exception and the
abort_on_exception
parameter of the constructor had the value
true, this destructor will invoke
MPI_Abort
with
MPI_COMM_WORLD
to abort the entire MPI program with a result code of \-1\&.
.RE

.SS "environment public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static void abort(int errcode);
.fi

.sp
Abort all MPI processes\&.
.sp
Aborts all MPI processes and returns to the environment\&. The precise behavior will be defined by the underlying MPI implementation\&. This is equivalent to a call to
MPI_Abort
with
MPI_COMM_WORLD\&.
.sp

.PP
Parameters:
.RS 4
.PP
errcode
.RS 4
The error code to return to the environment\&.
.RE
.RE
.PP
Returns:
.RS 4
Will not return\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static bool initialized();
.fi

.sp
Determine if the MPI environment has already been initialized\&.
.sp
This routine is equivalent to a call to
MPI_Initialized\&.
.sp

.PP
Returns:
.RS 4
true
if the MPI environment has been initialized\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
static bool finalized();
.fi

.sp
Determine if the MPI environment has already been finalized\&.
.sp
The routine is equivalent to a call to
MPI_Finalized\&.
.sp

.PP
Returns:
.RS 4
true
if the MPI environment has been finalized\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
static int max_tag();
.fi

.sp
Retrieves the maximum tag value\&.
.sp
Returns the maximum value that may be used for the
tag
parameter of send/receive operations\&. This value will be somewhat smaller than the value of
MPI_TAG_UB, because the Boost\&.MPI implementation reserves some tags for collective operations\&.
.sp

.PP
Returns:
.RS 4
the maximum tag value\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
static int collectives_tag();
.fi

.sp
The tag value used for collective operations\&.
.sp
Returns the reserved tag value used by the Boost\&.MPI implementation for collective operations\&. Although users are not permitted to use this tag to send or receive messages, it may be useful when monitoring communication patterns\&.
.sp

.PP
Returns:
.RS 4
the tag value used for collective operations\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
static optional< int > host_rank();
.fi

.sp
Retrieves the rank of the host process, if one exists\&.
.sp
If there is a host process, this routine returns the rank of that process\&. Otherwise, it returns an empty
optional<int>\&. MPI does not define the meaning of a "host" process: consult the documentation for the MPI implementation\&. This routine examines the
MPI_HOST
attribute of
MPI_COMM_WORLD\&.
.sp

.PP
Returns:
.RS 4
The rank of the host process, if one exists\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
static optional< int > io_rank();
.fi

.sp
Retrieves the rank of a process that can perform input/output\&.
.sp
This routine returns the rank of a process that can perform input/output via the standard C and C++ I/O facilities\&. If every process can perform I/O using the standard facilities, this routine will return
any_source; if no process can perform I/O, this routine will return no value (an empty
optional)\&. This routine examines the
MPI_IO
attribute of
MPI_COMM_WORLD\&.
.sp

.PP
Returns:
.RS 4
the rank of the process that can perform I/O,
any_source
if every process can perform I/O, or no value if no process can perform I/O\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
static std::string processor_name();
.fi

.sp
Retrieve the name of this processor\&.
.sp
This routine returns the name of this processor\&. The actual form of the name is unspecified, but may be documented by the underlying MPI implementation\&. This routine is implemented as a call to
MPI_Get_processor_name\&.
.sp

.PP
Returns:
.RS 4
the name of this processor\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
static threading::level thread_level();
.fi

.sp
Query the current level of thread support\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
static bool is_main_thread();
.fi

.sp
Are we in the main thread?
.RE


