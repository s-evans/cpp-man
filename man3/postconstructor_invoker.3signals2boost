.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS POSTCONS" 3 "" "" ""
.SH "NAME"
boost::signals2::postconstructor_invoker \- Pass arguments to and run postconstructors for objects created with deconstruct()\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/signals2/deconstruct\&.hpp>


class postconstructor_invoker {
public:

  // public methods
  operator const shared_ptr<T> &();
  const shared_ptr<T> & postconstruct();
  template<typename A1> const shared_ptr<T> & postconstruct(A1);
  template<typename A1, typename A2> 
    const shared_ptr<T> & postconstruct(A1, A1);
  template<typename A1, typename A2, \&.\&.\&., typename AN> 
    const shared_ptr<T> & postconstruct(A1, A1, \&.\&.\&., A1);
};
.fi
.SH "DESCRIPTION"
.PP
Objects of type
postconstructor_invoker
are returned by calls to the
deconstruct()
factory function\&. These objects are intended to either be immediately assigned to a shared_ptr (in which case the class\' conversion operator will perform the conversion by calling the
postconstruct
with no arguments), or to be converted to shared_ptr explicitly by the user calling one of the
postconstruct
methods\&.
.SS "postconstructor_invoker public methods"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
operator const shared_ptr<T> &();
.fi

.sp
The conversion operator has the same effect as explicitly calling the
postconstruct
method with no arguments\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
const shared_ptr<T> & postconstruct();
template<typename A1> const shared_ptr<T> & postconstruct(A1 a1);
template<typename A1, typename A2> 
  const shared_ptr<T> & postconstruct(A1 a1, A1 a2);
template<typename A1, typename A2, \&.\&.\&., typename AN> 
  const shared_ptr<T> & postconstruct(A1 a1, A1 a2, \&.\&.\&., A1 aN);
.fi

.sp
The
postconstruct
methods make an unqualified call to
adl_postconstruct()
and then return the
shared_ptr
which was wrapped inside the
postconstructor_invoker
object by
deconstruct()\&. The first two arguments passed to the
adl_postconstruct()
call are always the
shared_ptr
owning the object created by
deconstruct(), followed by a ordinary pointer to the same object\&. As a convenience, the ordinary pointer will always be cast to point to a non\-const type before being passed to
adl_postconstruct\&. The remaining arguments passed to
adl_postconstruct
are whatever arguments the user may have passed to the
postconstruct
method\&.
.RE


