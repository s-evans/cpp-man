.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::container::new_allocator \- This class is a reduced STL\-compatible allocator that allocates memory using operator new\&.
.SH "SYNOPSIS"
.\" value_type: Class template new_allocator
.\" Class template new_allocator: value_type
.\" swap: Class template new_allocator
.\" Class template new_allocator: swap
.\" size_type: Class template new_allocator
.\" Class template new_allocator: size_type
.\" reference: Class template new_allocator
.\" Class template new_allocator: reference
.\" rebind: Class template new_allocator
.\" Class template new_allocator: rebind
.\" propagate_on_container_move_assignment: Class template new_allocator
.\" Class template new_allocator: propagate_on_container_move_assignment
.\" pointer: Class template new_allocator
.\" Class template new_allocator: pointer
.\" other: Class template new_allocator
.\" Class template new_allocator: other
.\" new_allocator: Class template new_allocator
.\" Class template new_allocator: new_allocator
.\" is_always_equal: Class template new_allocator
.\" Class template new_allocator: is_always_equal
.\" difference_type: Class template new_allocator
.\" Class template new_allocator: difference_type
.\" deallocate: Class template new_allocator
.\" Class template new_allocator: deallocate
.\" const_reference: Class template new_allocator
.\" Class template new_allocator: const_reference
.\" const_pointer: Class template new_allocator
.\" Class template new_allocator: const_pointer
.\" allocate: Class template new_allocator
.\" Class template new_allocator: allocate

.sp
.nf
// In header: <boost/container/new_allocator\&.hpp>

template<typename T> 
class new_allocator {
public:
  // types
  typedef T                      value_type;                            
  typedef T *                    pointer;                               
  typedef const T *              const_pointer;                         
  typedef T &                    reference;                             
  typedef const T &              const_reference;                       
  typedef std::size_t            size_type;                             
  typedef std::ptrdiff_t         difference_type;                       
  typedef implementation_defined propagate_on_container_move_assignment;  // A integral constant of type bool with value true\&. 
  typedef implementation_defined is_always_equal;                         // A integral constant of type bool with value true\&. 

  // member classes/structs/unions
  template<typename T2> 
  struct rebind {
    // types
    typedef new_allocator< T2 > other;
  };

  // construct/copy/destruct
  new_allocator() noexcept;
  new_allocator(const new_allocator &) noexcept;
  template<typename T2> new_allocator(const new_allocator< T2 > &) noexcept;

  // public member functions
  pointer allocate(size_type);
  void deallocate(pointer, size_type) noexcept;
  size_type max_size() const noexcept;

  // friend functions
  friend void swap(new_allocator &, new_allocator &) noexcept;
  friend bool operator==(const new_allocator &, const new_allocator &) noexcept;
  friend bool operator!=(const new_allocator &, const new_allocator &) noexcept;
};
.fi
.SH "DESCRIPTION"
.SS "new_allocator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
new_allocator() noexcept;
.fi

.sp
Default constructor Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
new_allocator(const new_allocator &) noexcept;
.fi

.sp
Constructor from other
new_allocator\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename T2> new_allocator(const new_allocator< T2 > &) noexcept;
.fi

.sp
Constructor from related
new_allocator\&. Never throws
.RE

.SS "new_allocator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" allocate: Class template new_allocator
.\" Class template new_allocator: allocate

.sp

.nf
pointer allocate(size_type count);
.fi

.sp
Allocates memory for an array of count elements\&. Throws std::bad_alloc if there is no enough memory
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" deallocate: Class template new_allocator
.\" Class template new_allocator: deallocate

.sp

.nf
void deallocate(pointer ptr, size_type) noexcept;
.fi

.sp
Deallocates previously allocated memory\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
size_type max_size() const noexcept;
.fi

.sp
Returns the maximum number of elements that could be allocated\&. Never throws
.RE

.SS "new_allocator friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" swap: Class template new_allocator
.\" Class template new_allocator: swap

.sp

.nf
friend void swap(new_allocator &, new_allocator &) noexcept;
.fi

.sp
Swaps two allocators, does nothing because this
new_allocator
is stateless
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
friend bool operator==(const new_allocator &, const new_allocator &) noexcept;
.fi

.sp
An
new_allocator
always compares to true, as memory allocated with one instance can be deallocated by another instance
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator!=(const new_allocator &, const new_allocator &) noexcept;
.fi

.sp
An
new_allocator
always compares to false, as memory allocated with one instance can be deallocated by another instance
.RE

.SS "Specializations"

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Class new_allocator<void>
.RE

