.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::forward
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/move/utility_core\&.hpp>


template<typename T> output_reference forward(input_reference);
.fi
.SH "DESCRIPTION"
.PP
This function provides limited form of forwarding that is usually enough for in\-place construction and avoids the exponential overloading for achieve the limited forwarding in C++03\&.
.PP
For compilers with rvalue references this function provides perfect forwarding\&.
.PP
Otherwise:
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If input_reference binds to const ::boost::rv<T> & then it output_reference is ::boost::rv<T> &
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Else, output_reference is equal to input_reference\&.
.RE
.sp
.RE


