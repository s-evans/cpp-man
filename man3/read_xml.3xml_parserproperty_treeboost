.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLA" 3 "" "" ""
.SH "NAME"
boost::property_tree::xml_parser::read_xml
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/property_tree/xml_parser\&.hpp>


template<typename Ptree> 
  void read_xml(const std::string & filename, Ptree & pt, int flags = 0, 
                const std::locale & loc = std::locale());
.fi
.SH "DESCRIPTION"
.PP
Reads XML from a file using the given locale and translates it to property tree\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Clears existing contents of property tree\&. In case of error the property tree unmodified\&.
.sp .5v
.RE

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
XML attributes are placed under keys named
<xmlattr>\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
filename
.RS 4
The file from which to read in the property tree\&.
.RE
.PP
flags
.RS 4
Flags controlling the bahviour of the parser\&. The following flags are supported:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
no_concat_text
<ndash></ndash>
Prevents concatenation of text nodes into datastring of property tree\&. Puts them in separate
<xmltext>
strings instead\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
no_comments
<ndash></ndash>
Skip XML comments\&.
.RE
.RS 4

.RE
.PP
loc
.RS 4
The locale to use when reading in the file contents\&.
.RE
.PP
pt
.RS 4
The property tree to populate\&.
.RE
.RE
.PP
Throws:
.RS 4
xml_parser_error In case of error deserializing the property tree\&.
.RE

