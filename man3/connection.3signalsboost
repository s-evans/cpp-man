.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS CONNECTION" 3 "" "" ""
.SH "NAME"
boost::signals::connection \- Query/disconnect a signal\-slot connection\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/signals/connection\&.hpp>


class connection {
public:
  // construct/copy/destruct
  connection();
  connection(const connection&);
  connection& operator=(const connection&);

  // connection management
  void disconnect() const;
  bool connected() const;

  // blocking
  void block(bool = true);
  void unblock();
  bool blocked() const;

  // modifiers
  void swap(const connection&);

  // comparisons
  bool operator==(const connection&) const;
  bool operator<(const connection&) const;
};

// specialized algorithms
void swap(connection&, connection&);
.fi
.SH "DESCRIPTION"
.PP
The
connection
class represents a connection between a Signal and a Slot\&. It is a lightweight object that has the ability to query whether the signal and slot are currently connected, and to disconnect the signal and slot\&. It is always safe to query or disconnect a connection\&.
.SS "connection public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
connection();
.fi

.PP
Effects:
.RS 4
Sets the currently represented connection to the NULL connection\&.
.RE
.PP
Postconditions:
.RS 4
!this\->connected()\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
connection(const connection& other);
.fi

.PP
Effects:
.RS 4
this
references the connection referenced by
other\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
connection& operator=(const connection& other);
.fi

.PP
Effects:
.RS 4
this
references the connection referenced by
other\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE

.SS "connection connection management"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void disconnect() const;
.fi

.PP
Effects:
.RS 4
If
this\->connected(), disconnects the signal and slot referenced by this; otherwise, this operation is a no\-op\&.
.RE
.PP
Postconditions:
.RS 4
!this\->connected()\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
bool connected() const;
.fi

.PP
Returns:
.RS 4
true
if this references a non\-NULL connection that is still active (connected), and
false
otherwise\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE

.SS "connection blocking"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void block(bool should_block = true);
.fi

.PP
Requires:
.RS 4
connected()
.RE
.PP
Postconditions:
.RS 4
blocked() == should_block
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void unblock();
.fi

.PP
Requires:
.RS 4
connected()
.RE
.PP
Postconditions:
.RS 4
!blocked()
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
bool blocked() const;
.fi

.PP
Returns:
.RS 4
true
if the associated slot is either disconnected or blocked,
false
otherwise\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE

.SS "connection modifiers"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void swap(const connection& other);
.fi

.PP
Effects:
.RS 4
Swaps the connections referenced in
this
and
other\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE

.SS "connection comparisons"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
bool operator==(const connection& other) const;
.fi

.PP
Returns:
.RS 4
true
if
this
and
other
reference the same connection or both reference the NULL connection, and
false
otherwise\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
bool operator<(const connection& other) const;
.fi

.PP
Returns:
.RS 4
true
if the connection referenced by
this
precedes the connection referenced by
other
based on some unspecified ordering, and
false
otherwise\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE

.SS "connection specialized algorithms"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void swap(connection& x, connection& y);
.fi

.PP
Effects:
.RS 4
x\&.swap(y)
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


