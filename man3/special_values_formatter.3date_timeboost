.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::date_time::special_values_formatter \- Class that provides generic formmatting ostream formatting for special values\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/special_values_formatter\&.hpp>

template<typename CharT, 
         typename OutItrT = std::ostreambuf_iterator<CharT, std::char_traits<CharT> > > 
class special_values_formatter {
public:
  // types
  typedef std::basic_string< CharT > string_type;    
  typedef CharT                      char_type;      
  typedef std::vector< string_type > collection_type;

  // construct/copy/destruct
  special_values_formatter();
  special_values_formatter(const char_type *const *, const char_type *const *);
  special_values_formatter(typename collection_type::iterator, 
                           typename collection_type::iterator);

  // public member functions
  OutItrT put_special(OutItrT, const boost::date_time::special_values &) const;

  // public data members
  static const char_type default_special_value_names;  // Storage for the strings used to indicate special values\&. 
};
.fi
.SH "DESCRIPTION"
.PP
This class provides for the formmating of special values to an output stream\&. In particular, it produces strings for the values of negative and positive infinity as well as not_a_date_time\&.
.PP
While not a facet, this class is used by the date and time facets for formatting special value types\&.
.SS "special_values_formatter public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
special_values_formatter();
.fi

.sp
Construct special values formatter using default strings\&. Default strings are not\-a\-date\-time \-infinity +infinity
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
special_values_formatter(const char_type *const * begin, 
                         const char_type *const * end);
.fi

.sp
Construct special values formatter from array of strings\&. This constructor will take pair of iterators from an array of strings that represent the special values and copy them for use in formatting special values\&.

.sp
.if n \{\
.RS 4
.\}
.nf
const char* const special_value_names[]={"nadt","\-inf","+inf" };

special_value_formatter svf(&special_value_names[0], &special_value_names[3]);

.fi
.if n \{\
.RE
.\}
.sp

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
special_values_formatter(typename collection_type::iterator beg, 
                         typename collection_type::iterator end);
.fi

.RE

.SS "special_values_formatter public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
OutItrT put_special(OutItrT next, 
                    const boost::date_time::special_values & value) const;
.fi

.RE


