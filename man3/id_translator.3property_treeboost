.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::property_tree::id_translator \- Simple implementation of the Translator concept\&. It does no translation\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/property_tree/id_translator\&.hpp>

template<typename T> 
struct id_translator {
  // types
  typedef T internal_type;
  typedef T external_type;

  // public member functions
  boost::optional< T > get_value(const T &);
  boost::optional< T > put_value(const T &);
};
.fi
.SH "DESCRIPTION"
.SS "id_translator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
boost::optional< T > get_value(const T & v);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
boost::optional< T > put_value(const T & v);
.fi

.RE


