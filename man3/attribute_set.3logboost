.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS ATTRIBUTE_SET" 3 "" "" ""
.SH "NAME"
boost::log::attribute_set \- An attribute set class\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/attribute_set\&.hpp>


class attribute_set {
public:
  // types
  typedef attribute_name                           key_type;         // Key type\&. 
  typedef attribute                                mapped_type;      // Mapped attribute type\&. 
  typedef std::pair< const key_type, mapped_type > value_type;       // Value type\&. 
  typedef value_type &                             reference;        // Reference type\&. 
  typedef value_type const &                       const_reference;  // Const reference type\&. 
  typedef value_type *                             pointer;          // Pointer type\&. 
  typedef value_type const *                       const_pointer;    // Const pointer type\&. 
  typedef std::size_t                              size_type;        // Size type\&. 
  typedef std::ptrdiff_t                           difference_type;  // Difference type\&. 
  typedef implementation_defined                   iterator;       
  typedef implementation_defined                   const_iterator; 

  // construct/copy/destruct
  attribute_set();
  attribute_set(attribute_set const &);
  attribute_set(attribute_set &&) noexcept;
  attribute_set & operator=(attribute_set) noexcept;
  ~attribute_set();

  // public member functions
  void swap(attribute_set &) noexcept;
  iterator begin() noexcept;
  iterator end() noexcept;
  const_iterator begin() const noexcept;
  const_iterator end() const noexcept;
  size_type size() const noexcept;
  bool empty() const noexcept;
  iterator find(key_type) noexcept;
  const_iterator find(key_type) const noexcept;
  size_type count(key_type) const noexcept;
  \fIunspecified\fR operator[](key_type) noexcept;
  mapped_type operator[](key_type) const noexcept;
  std::pair< iterator, bool > insert(key_type, mapped_type const &);
  std::pair< iterator, bool > insert(const_reference);
  template<typename FwdIteratorT> void insert(FwdIteratorT, FwdIteratorT);
  template<typename FwdIteratorT, typename OutputIteratorT> 
    void insert(FwdIteratorT, FwdIteratorT, OutputIteratorT);
  size_type erase(key_type) noexcept;
  void erase(iterator) noexcept;
  void erase(iterator, iterator) noexcept;
  void clear() noexcept;
};
.fi
.SH "DESCRIPTION"
.PP
An attribute set is an associative container with attribute name as a key and pointer to the attribute as a mapped value\&. The container allows storing only one element for each distinct key value\&. In most regards attribute set container provides interface similar to
std::unordered_map\&. However, there are differences in
operator[] semantics and a number of optimizations with regard to iteration\&. Besides, attribute names are stored as a read\-only
attribute_name\'s instead of
std::string, which saves memory and CPU time\&.
.SS "attribute_set public types"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

typedef
implementation_defined
iterator;
.sp
Iterator type\&. The iterator complies to the bidirectional iterator requirements\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

typedef
implementation_defined
const_iterator;
.sp
Constant iterator type\&. The iterator complies to the bidirectional iterator requirements with read\-only capabilities\&.
.RE

.SS "attribute_set public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
attribute_set();
.fi

.sp
Default constructor\&.
.sp

.PP
Postconditions:
.RS 4
empty() == true
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
attribute_set(attribute_set const & that);
.fi

.sp
Copy constructor\&.
.sp

.PP
Postconditions:
.RS 4
size() == that\&.size() && std::equal(begin(), end(), that\&.begin()) == true
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
attribute_set(attribute_set && that) noexcept;
.fi

.sp
Move constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
attribute_set & operator=(attribute_set that) noexcept;
.fi

.sp
Copy assignment operator\&.
.sp

.PP
Postconditions:
.RS 4
size() == that\&.size() && std::equal(begin(), end(), that\&.begin()) == true
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
~attribute_set();
.fi

.sp
Destructor\&. All stored references to attributes are released\&.
.RE

.SS "attribute_set public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void swap(attribute_set & that) noexcept;
.fi

.sp
Swaps two instances of the container\&.
.sp
\fBThrows:\fR
Nothing\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
iterator begin() noexcept;
.fi

.sp

.PP
Returns:
.RS 4
Iterator to the first element of the container\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
iterator end() noexcept;
.fi

.sp

.PP
Returns:
.RS 4
Iterator to the after\-the\-last element of the container\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
const_iterator begin() const noexcept;
.fi

.sp

.PP
Returns:
.RS 4
Constant iterator to the first element of the container\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
const_iterator end() const noexcept;
.fi

.sp

.PP
Returns:
.RS 4
Constant iterator to the after\-the\-last element of the container\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
size_type size() const noexcept;
.fi

.sp

.PP
Returns:
.RS 4
Number of elements in the container\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
bool empty() const noexcept;
.fi

.sp

.PP
Returns:
.RS 4
true if there are no elements in the container, false otherwise\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
iterator find(key_type key) noexcept;
.fi

.sp
The method finds the attribute by name\&.
.sp

.PP
Parameters:
.RS 4
.PP
key
.RS 4
Attribute name\&.
.RE
.RE
.PP
Returns:
.RS 4
Iterator to the found element or end() if the attribute with such name is not found\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
const_iterator find(key_type key) const noexcept;
.fi

.sp
The method finds the attribute by name\&.
.sp

.PP
Parameters:
.RS 4
.PP
key
.RS 4
Attribute name\&.
.RE
.RE
.PP
Returns:
.RS 4
Iterator to the found element or
end()
if the attribute with such name is not found\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
size_type count(key_type key) const noexcept;
.fi

.sp
The method counts the number of the attribute occurrences in the container\&. Since there can be only one attribute with a particular key, the method always return 0 or 1\&.
.sp

.PP
Parameters:
.RS 4
.PP
key
.RS 4
Attribute name\&.
.RE
.RE
.PP
Returns:
.RS 4
The number of times the attribute is found in the container\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
\fIunspecified\fR operator[](key_type key) noexcept;
.fi

.sp
Combined lookup/insertion operator\&. The operator semantics depends on the further usage of the returned reference\&.

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If the reference is used as an assignment target, the assignment expression is equivalent to element insertion, where the element is composed of the second argument of the
operator[] as a key and the second argument of assignment as a mapped value\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If the returned reference is used in context where a conversion to the mapped type is required, the result of the conversion is equivalent to the mapped value found with the second argument of the
operator[] as a key, if such an element exists in the container, or a default\-constructed mapped value, if an element does not exist in the container\&.
.RE
.RS 4

.PP
Parameters:
.RS 4
.PP
key
.RS 4
Attribute name\&.
.RE
.RE
.PP
Returns:
.RS 4
A smart reference object of unspecified type\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
mapped_type operator[](key_type key) const noexcept;
.fi

.sp
Lookup operator
.sp

.PP
Parameters:
.RS 4
.PP
key
.RS 4
Attribute name\&.
.RE
.RE
.PP
Returns:
.RS 4
If an element with the corresponding attribute name is found in the container, its mapped value is returned\&. Otherwise a default\-constructed mapped value is returned\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "13." 4.2
.\}

.sp

.nf
std::pair< iterator, bool > insert(key_type key, mapped_type const & data);
.fi

.sp
Insertion method
.sp

.PP
Parameters:
.RS 4
.PP
data
.RS 4
Pointer to the attribute\&. Must not be NULL\&.
.RE
.PP
key
.RS 4
Attribute name\&.
.RE
.RE
.PP
Returns:
.RS 4
A pair of values\&. If second is true, the insertion succeeded and the first component points to the inserted element\&. Otherwise the first component points to the element that prevents insertion\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'14.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "14." 4.2
.\}

.sp

.nf
std::pair< iterator, bool > insert(const_reference value);
.fi

.sp
Insertion method
.sp

.PP
Parameters:
.RS 4
.PP
value
.RS 4
An element to be inserted\&.
.RE
.RE
.PP
Returns:
.RS 4
A pair of values\&. If second is true, the insertion succeeded and the first component points to the inserted element\&. Otherwise the first component points to the element that prevents insertion\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'15.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "15." 4.2
.\}

.sp

.nf
template<typename FwdIteratorT> 
  void insert(FwdIteratorT begin, FwdIteratorT end);
.fi

.sp
Mass insertion method\&.
.sp

.PP
Parameters:
.RS 4
.PP
begin
.RS 4
A forward iterator that points to the first element to be inserted\&.
.RE
.PP
end
.RS 4
A forward iterator that points to the after\-the\-last element to be inserted\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'16.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "16." 4.2
.\}

.sp

.nf
template<typename FwdIteratorT, typename OutputIteratorT> 
  void insert(FwdIteratorT begin, FwdIteratorT end, OutputIteratorT out);
.fi

.sp
Mass insertion method with ability to acquire iterators to the inserted elements\&.
.sp

.PP
Parameters:
.RS 4
.PP
begin
.RS 4
A forward iterator that points to the first element to be inserted\&.
.RE
.PP
end
.RS 4
A forward iterator that points to the after\-the\-last element to be inserted\&.
.RE
.PP
out
.RS 4
An output iterator that receives results of insertion of the elements
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'17.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "17." 4.2
.\}

.sp

.nf
size_type erase(key_type key) noexcept;
.fi

.sp
The method erases all attributes with the specified name
.sp

.PP
Parameters:
.RS 4
.PP
key
.RS 4
Attribute name\&.
.RE
.RE
.PP
Postconditions:
.RS 4
All iterators to the erased elements become invalid\&.
.RE
.PP
Returns:
.RS 4
Tne number of erased elements
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'18.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "18." 4.2
.\}

.sp

.nf
void erase(iterator it) noexcept;
.fi

.sp
The method erases the specified attribute
.sp

.PP
Parameters:
.RS 4
.PP
it
.RS 4
A valid iterator to the element to be erased\&.
.RE
.RE
.PP
Postconditions:
.RS 4
All iterators to the erased element become invalid\&.
.RE
.PP
Returns:
.RS 4
Tne number of erased elements
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'19.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "19." 4.2
.\}

.sp

.nf
void erase(iterator begin, iterator end) noexcept;
.fi

.sp
The method erases all attributes within the specified range
.sp

.PP
Parameters:
.RS 4
.PP
begin
.RS 4
An iterator that points to the first element to be erased\&.
.RE
.PP
end
.RS 4
An iterator that points to the after\-the\-last element to be erased\&.
.RE
.RE
.PP
Requires:
.RS 4
\fIend\fR
is reachable from
\fIbegin\fR
with a finite number of increments\&.
.RE
.PP
Postconditions:
.RS 4
All iterators to the erased elements become invalid\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'20.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "20." 4.2
.\}

.sp

.nf
void clear() noexcept;
.fi

.sp
The method removes all elements from the container
.sp

.PP
Postconditions:
.RS 4
empty() == true
.RE
.RE


