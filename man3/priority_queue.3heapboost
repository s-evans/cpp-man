.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::heap::priority_queue \- priority queue, based on stl heap functions
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/heap/priority_queue\&.hpp>

template<typename T, class\&.\&.\&. Options> 
class priority_queue {
public:
  // types
  typedef T                                       value_type;     
  typedef implementation_defined::size_type       size_type;      
  typedef implementation_defined::difference_type difference_type;
  typedef implementation_defined::value_compare   value_compare;  
  typedef implementation_defined::allocator_type  allocator_type; 
  typedef implementation_defined::reference       reference;      
  typedef implementation_defined::const_reference const_reference;
  typedef implementation_defined::pointer         pointer;        
  typedef implementation_defined::const_pointer   const_pointer;  
  typedef implementation_defined::iterator        iterator;       
  typedef implementation_defined::const_iterator  const_iterator; 

  // construct/copy/destruct
  explicit priority_queue(value_compare const & = value_compare());
  priority_queue(priority_queue const &);
  priority_queue(priority_queue &&);
  priority_queue & operator=(priority_queue &&);
  priority_queue & operator=(priority_queue const &);

  // public member functions
  bool empty(void) const;
  size_type size(void) const;
  size_type max_size(void) const;
  void clear(void);
  allocator_type get_allocator(void) const;
  const_reference top(void) const;
  void push(value_type const &);
  template<class\&.\&.\&. Args> void emplace(Args &&\&.\&.\&.);
  void pop(void);
  void swap(priority_queue &);
  iterator begin(void) const;
  iterator end(void) const;
  void reserve(size_type);
  value_compare const & value_comp(void) const;
  template<typename HeapType> bool operator<(HeapType const &) const;
  template<typename HeapType> bool operator>(HeapType const &) const;
  template<typename HeapType> bool operator>=(HeapType const &) const;
  template<typename HeapType> bool operator<=(HeapType const &) const;
  template<typename HeapType> bool operator==(HeapType const &) const;
  template<typename HeapType> bool operator!=(HeapType const &) const;

  // public data members
  static const bool constant_time_size;
  static const bool has_ordered_iterators;
  static const bool is_mergable;
  static const bool is_stable;
  static const bool has_reserve;
};
.fi
.SH "DESCRIPTION"
.PP
The
priority_queue
class is a wrapper for the stl heap functions\&.&#9618;.br&#9618;
The template parameter T is the type to be managed by the container\&. The user can specify additional options and if no options are provided default options are used\&.
.PP
The container supports the following options:
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
boost::heap::compare<>, defaults to
compare<std::less<T>
>
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
boost::heap::stable<>, defaults to
stable<false>
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
boost::heap::stability_counter_type<>, defaults to
stability_counter_type<boost::uintmax_t>
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
boost::heap::allocator<>, defaults to
allocator<std::allocator<T>
>
.RE
.sp
.RE

.SS "priority_queue public types"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

typedef
implementation_defined::iterator
iterator;
.sp
\fBNote:\fR
The iterator does not traverse the priority queue in order of the priorities\&.
.RE

.SS "priority_queue public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit priority_queue(value_compare const & cmp = value_compare());
.fi

.sp
\fBEffects:\fR
constructs an empty priority queue\&.
.sp
\fBComplexity:\fR
Constant\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
priority_queue(priority_queue const & rhs);
.fi

.sp
\fBEffects:\fR
copy\-constructs priority queue from rhs\&.
.sp
\fBComplexity:\fR
Linear\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
priority_queue(priority_queue && rhs);
.fi

.sp
\fBEffects:\fR
C++11\-style move constructor\&.
.sp
\fBComplexity:\fR
Constant\&.
.sp
\fBNote:\fR
Only available, if BOOST_NO_CXX11_RVALUE_REFERENCES is not defined
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
priority_queue & operator=(priority_queue && rhs);
.fi

.sp
\fBEffects:\fR
C++11\-style move assignment\&.
.sp
\fBComplexity:\fR
Constant\&.
.sp
\fBNote:\fR
Only available, if BOOST_NO_CXX11_RVALUE_REFERENCES is not defined
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
priority_queue & operator=(priority_queue const & rhs);
.fi

.sp
\fBEffects:\fR
Assigns priority queue from rhs\&.
.sp
\fBComplexity:\fR
Linear\&.
.RE

.SS "priority_queue public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
bool empty(void) const;
.fi

.sp
\fBEffects:\fR
Returns true, if the priority queue contains no elements\&.
.sp
\fBComplexity:\fR
Constant\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
size_type size(void) const;
.fi

.sp
\fBEffects:\fR
Returns the number of elements contained in the priority queue\&.
.sp
\fBComplexity:\fR
Constant\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
size_type max_size(void) const;
.fi

.sp
\fBEffects:\fR
Returns the maximum number of elements the priority queue can contain\&.
.sp
\fBComplexity:\fR
Constant\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
void clear(void);
.fi

.sp
\fBEffects:\fR
Removes all elements from the priority queue\&.
.sp
\fBComplexity:\fR
Linear\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
allocator_type get_allocator(void) const;
.fi

.sp
\fBEffects:\fR
Returns allocator\&.
.sp
\fBComplexity:\fR
Constant\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
const_reference top(void) const;
.fi

.sp
\fBEffects:\fR
Returns a const_reference to the maximum element\&.
.sp
\fBComplexity:\fR
Constant\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void push(value_type const & v);
.fi

.sp
\fBEffects:\fR
Adds a new element to the priority queue\&.
.sp
\fBComplexity:\fR
Logarithmic (amortized)\&. Linear (worst case)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
template<class\&.\&.\&. Args> void emplace(Args &&\&.\&.\&. args);
.fi

.sp
\fBEffects:\fR
Adds a new element to the priority queue\&. The element is directly constructed in\-place\&.
.sp
\fBComplexity:\fR
Logarithmic (amortized)\&. Linear (worst case)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
void pop(void);
.fi

.sp
\fBEffects:\fR
Removes the top element from the priority queue\&.
.sp
\fBComplexity:\fR
Logarithmic (amortized)\&. Linear (worst case)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
void swap(priority_queue & rhs);
.fi

.sp
\fBEffects:\fR
Swaps two priority queues\&.
.sp
\fBComplexity:\fR
Constant\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
iterator begin(void) const;
.fi

.sp
\fBEffects:\fR
Returns an iterator to the first element contained in the priority queue\&.
.sp
\fBComplexity:\fR
Constant\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
iterator end(void) const;
.fi

.sp
\fBEffects:\fR
Returns an iterator to the end of the priority queue\&.
.sp
\fBComplexity:\fR
Constant\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "13." 4.2
.\}

.sp

.nf
void reserve(size_type element_count);
.fi

.sp
\fBEffects:\fR
Reserves memory for element_count elements
.sp
\fBComplexity:\fR
Linear\&.
.sp
\fBNode:\fR
Invalidates iterators
.RE


.sp
.RS 4
.ie n \{\
\h'-04'14.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "14." 4.2
.\}

.sp

.nf
value_compare const & value_comp(void) const;
.fi

.sp
\fBEffect:\fR
Returns the value_compare object used by the priority queue
.RE


.sp
.RS 4
.ie n \{\
\h'-04'15.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "15." 4.2
.\}

.sp

.nf
template<typename HeapType> bool operator<(HeapType const & rhs) const;
.fi

.sp
\fBReturns:\fR
Element\-wise comparison of heap data structures
.sp
\fBRequirement:\fR
the
value_compare
object of both heaps must match\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'16.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "16." 4.2
.\}

.sp

.nf
template<typename HeapType> bool operator>(HeapType const & rhs) const;
.fi

.sp
\fBReturns:\fR
Element\-wise comparison of heap data structures
.sp
\fBRequirement:\fR
the
value_compare
object of both heaps must match\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'17.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "17." 4.2
.\}

.sp

.nf
template<typename HeapType> bool operator>=(HeapType const & rhs) const;
.fi

.sp
\fBReturns:\fR
Element\-wise comparison of heap data structures
.sp
\fBRequirement:\fR
the
value_compare
object of both heaps must match\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'18.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "18." 4.2
.\}

.sp

.nf
template<typename HeapType> bool operator<=(HeapType const & rhs) const;
.fi

.sp
\fBReturns:\fR
Element\-wise comparison of heap data structures
.sp
\fBRequirement:\fR
the
value_compare
object of both heaps must match\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'19.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "19." 4.2
.\}

.sp

.nf
template<typename HeapType> bool operator==(HeapType const & rhs) const;
.fi

Equivalent comparison \fBReturns:\fR True, if both heap data structures are equivalent\&. \fBRequirement:\fR
the
value_compare
object of both heaps must match\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'20.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "20." 4.2
.\}

.sp

.nf
template<typename HeapType> bool operator!=(HeapType const & rhs) const;
.fi

Equivalent comparison \fBReturns:\fR True, if both heap data structures are not equivalent\&. \fBRequirement:\fR
the
value_compare
object of both heaps must match\&.
.RE


