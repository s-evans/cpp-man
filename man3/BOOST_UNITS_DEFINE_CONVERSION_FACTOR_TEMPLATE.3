.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MAC" 3 "" "" ""
.SH "NAME"
BOOST_UNITS_DEFINE_CONVERSION_FACTOR_TEMPLATE
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/units/conversion\&.hpp>

BOOST_UNITS_DEFINE_CONVERSION_FACTOR_TEMPLATE(Params, Source, Destination, type_, value_)
.fi
.SH "DESCRIPTION"
.PP
Defines the conversion factor from a base unit to any other base unit with the same dimensions\&. Params should be a Boost\&.Preprocessor Seq of template parameters, such as (class T1)(class T2) All uses of must appear at global scope\&. The reverse conversion will be defined automatically\&. This macro is a little dangerous, because, unlike the non\-template form, it will silently fail if either base unit is scaled\&. This is probably not an issue if both the source and destination types depend on the template parameters, but be aware that a generic conversion to kilograms is not going to work\&.

