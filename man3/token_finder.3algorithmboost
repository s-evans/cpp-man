.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMP" 3 "" "" ""
.SH "NAME"
boost::algorithm::token_finder \- "Token" finder
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/algorithm/string/finder\&.hpp>


template<typename PredicateT> 
  \fIunspecified\fR token_finder(PredicateT Pred, 
                           token_compress_mode_type eCompress = token_compress_off);
.fi
.SH "DESCRIPTION"
.PP
Construct the
token_finder\&. The finder searches for a token specified by a predicate\&. It is similar to std::find_if algorithm, with an exception that it return a range of instead of a single iterator\&.
.PP
If "compress token mode" is enabled, adjacent matching tokens are concatenated into one match\&. Thus the finder can be used to search for continuous segments of characters satisfying the given predicate\&.
.PP
The result is given as an
iterator_range
delimiting the match\&.
.PP

.PP
Parameters:
.RS 4
.PP
Pred
.RS 4
An element selection predicate
.RE
.PP
eCompress
.RS 4
Compress flag
.RE
.RE
.PP
Returns:
.RS 4
An instance of the
token_finder
object
.RE

