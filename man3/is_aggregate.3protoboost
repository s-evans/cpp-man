.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::proto::is_aggregate \- A Boolean metafunction that indicates whether a type requires aggregate initialization\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/traits\&.hpp>

template<typename T> 
struct is_aggregate :  mpl::bool_<\fItrue\-or\-false\fR> {
};
.fi
.SH "DESCRIPTION"
.PP

proto::is_aggregate<>
is used by the
proto::make<>
transform to determine how to construct an object of some type
T, given some initialization arguments
a0,\&.\&.\&.an\&. If
proto::is_aggregate<T>::value
is
true, then an object of type
T
will be initialized as
T t = {a0,\&.\&.\&.an};\&. Otherwise, it will be initialized as
T t(a0,\&.\&.\&.an)\&.
.PP
Note:
proto::expr<>
and
proto::basic_expr<>are aggregates\&.

