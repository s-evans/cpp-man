.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::interprocess::rbtree_best_fit
.SH "SYNOPSIS"
.\" zero_free_memory: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: zero_free_memory
.\" void_pointer: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: void_pointer
.\" size_type: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: size_type
.\" shrink_to_fit: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: shrink_to_fit
.\" rbtree_best_fit: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: rbtree_best_fit
.\" rbtree_best_fit: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: rbtree_best_fit
.\" raw_allocation_command: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: raw_allocation_command
.\" mutex_family: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: mutex_family
.\" multiallocation_chain: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: multiallocation_chain
.\" grow: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: grow
.\" get_min_size: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: get_min_size
.\" difference_type: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: difference_type
.\" deallocate: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: deallocate
.\" check_sanity: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: check_sanity
.\" allocation_command: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: allocation_command
.\" allocate_aligned: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: allocate_aligned
.\" allocate: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: allocate
.\" all_memory_deallocated: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: all_memory_deallocated

.sp
.nf
// In header: <boost/interprocess/mem_algo/rbtree_best_fit\&.hpp>

template<typename MutexFamily, typename VoidPointer, std::size_t MemAlignment> 
class rbtree_best_fit {
public:
  // types
  typedef MutexFamily                                                   mutex_family;           // Shared mutex family used for the rest of the Interprocess framework\&. 
  typedef VoidPointer                                                   void_pointer;           // Pointer type to be used with the rest of the Interprocess framework\&. 
  typedef \fIunspecified\fR                                                   multiallocation_chain;
  typedef boost::intrusive::pointer_traits< char_ptr >::difference_type difference_type;      
  typedef \fIunspecified\fR                                                   size_type;            

  // construct/copy/destruct
  rbtree_best_fit(size_type, size_type);
  ~rbtree_best_fit();

  // public member functions
  void * allocate(size_type);
  void deallocate(void *);
  size_type get_size() const;
  size_type get_free_memory() const;
  void zero_free_memory();
  void grow(size_type);
  void shrink_to_fit();
  bool all_memory_deallocated();
  bool check_sanity();
  template<typename T> 
    T * allocation_command(boost::interprocess::allocation_type, size_type, 
                           size_type &, T *&);
  void * raw_allocation_command(boost::interprocess::allocation_type, 
                                size_type, size_type &, void *&, 
                                size_type = 1);
  size_type size(const void *) const;
  void * allocate_aligned(size_type, size_type);

  // public static functions
  static size_type get_min_size(size_type);

  // public data members
  static const size_type PayloadPerAllocation;
};
.fi
.SH "DESCRIPTION"
.PP
This class implements an algorithm that stores the free nodes in a red\-black tree to have logarithmic search/insert times\&.
.SS "rbtree_best_fit public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
rbtree_best_fit(size_type size, size_type extra_hdr_bytes);
.fi

.sp
Constructor\&. "size" is the total size of the managed memory segment, "extra_hdr_bytes" indicates the extra bytes beginning in the sizeof(rbtree_best_fit) offset that the allocator should not use at all\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~rbtree_best_fit();
.fi

Destructor\&. .RE

.SS "rbtree_best_fit public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" allocate: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: allocate

.sp

.nf
void * allocate(size_type nbytes);
.fi

Allocates bytes, returns 0 if there is not more memory\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" deallocate: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: deallocate

.sp

.nf
void deallocate(void * addr);
.fi

Deallocates previously allocated bytes\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
size_type get_size() const;
.fi

Returns the size of the memory segment\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
size_type get_free_memory() const;
.fi

Returns the number of free bytes of the segment\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
.\" zero_free_memory: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: zero_free_memory

.sp

.nf
void zero_free_memory();
.fi

.sp
Initializes to zero all the memory that\'s not in use\&. This function is normally used for security reasons\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
.\" grow: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: grow

.sp

.nf
void grow(size_type extra_size);
.fi

.sp
Increases managed memory in extra_size bytes more
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
.\" shrink_to_fit: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: shrink_to_fit

.sp

.nf
void shrink_to_fit();
.fi

Decreases managed memory as much as possible\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}
.\" all_memory_deallocated: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: all_memory_deallocated

.sp

.nf
bool all_memory_deallocated();
.fi

Returns true if all allocated memory has been deallocated\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}
.\" check_sanity: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: check_sanity

.sp

.nf
bool check_sanity();
.fi

.sp
Makes an internal sanity check and returns true if success
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}
.\" allocation_command: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: allocation_command

.sp

.nf
template<typename T> 
  T * allocation_command(boost::interprocess::allocation_type command, 
                         size_type limit_size, 
                         size_type & prefer_in_recvd_out_size, T *& reuse);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}
.\" raw_allocation_command: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: raw_allocation_command

.sp

.nf
void * raw_allocation_command(boost::interprocess::allocation_type command, 
                              size_type limit_object, 
                              size_type & prefer_in_recvd_out_size, 
                              void *& reuse_ptr, size_type sizeof_object = 1);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
size_type size(const void * ptr) const;
.fi

Returns the size of the buffer previously allocated pointed by ptr\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04'13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "13." 4.2
.\}
.\" allocate_aligned: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: allocate_aligned

.sp

.nf
void * allocate_aligned(size_type nbytes, size_type alignment);
.fi

.sp
Allocates aligned bytes, returns 0 if there is not more memory\&. Alignment must be power of 2
.RE

.SS "rbtree_best_fit public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" get_min_size: Class template rbtree_best_fit
.\" Class template rbtree_best_fit: get_min_size

.sp

.nf
static size_type get_min_size(size_type extra_hdr_bytes);
.fi

Obtains the minimum size needed by the algorithm\&. .RE


