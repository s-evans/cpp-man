.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS UNTYPED_VALUE" 3 "" "" ""
.SH "NAME"
boost::program_options::untyped_value
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/value_semantic\&.hpp>


class untyped_value :
  public boost::program_options::value_semantic_codecvt_helper< char >
{
public:
  // construct/copy/destruct
  untyped_value(bool = false);

  // public member functions
  virtual std::string name() const;
  virtual unsigned min_tokens() const;
  virtual unsigned max_tokens() const;
  virtual bool adjacent_tokens_only() const;
  virtual bool is_composing() const;
  virtual bool is_required() const;
  virtual void xparse(boost::any &, const std::vector< std::string > &) const;
  virtual bool apply_default(boost::any &) const;
  virtual void notify(const boost::any &) const;
};
.fi
.SH "DESCRIPTION"
.PP
Class which specifies a simple handling of a value: the value will have string type and only one token is allowed\&.
.SS "untyped_value public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
untyped_value(bool zero_tokens = false);
.fi

.RE

.SS "untyped_value public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual std::string name() const;
.fi

.sp
Returns the name of the option\&. The name is only meaningful for automatic help message\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
virtual unsigned min_tokens() const;
.fi

.sp
The minimum number of tokens for this option that should be present on the command line\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
virtual unsigned max_tokens() const;
.fi

.sp
The maximum number of tokens for this option that should be present on the command line\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
virtual bool adjacent_tokens_only() const;
.fi

.sp
Returns true if the option should only take adjacent token, not one from further command\-line arguments\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
virtual bool is_composing() const;
.fi

.sp
Returns true if values from different sources should be composed\&. Otherwise, value from the first source is used and values from other sources are discarded\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
virtual bool is_required() const;
.fi

.sp
Returns true if value must be given\&. Non\-optional value
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
virtual void 
xparse(boost::any & value_store, 
       const std::vector< std::string > & new_tokens) const;
.fi

.sp
If \'value_store\' is already initialized, or new_tokens has more than one elements, throws\&. Otherwise, assigns the first string from \'new_tokens\' to \'value_store\', without any modifications\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
virtual bool apply_default(boost::any &) const;
.fi

.sp
Does nothing\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
virtual void notify(const boost::any &) const;
.fi

.sp
Does nothing\&.
.RE


