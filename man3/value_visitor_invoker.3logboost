.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::log::value_visitor_invoker \- Generic attribute value visitor invoker\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/value_visitation_fwd\&.hpp>

template<typename T, typename FallbackPolicyT> 
class value_visitor_invoker : private FallbackPolicyT {
public:
  // construct/copy/destruct
  value_visitor_invoker() = default;
  value_visitor_invoker(value_visitor_invoker const &);
  template<typename U> explicit value_visitor_invoker(U const &);

  // public member functions
  template<typename VisitorT> 
    result_type operator()(attribute_value const &, VisitorT) const;
  template<typename VisitorT> 
    result_type operator()(attribute_name const &, 
                           attribute_value_set const &, VisitorT) const;
  template<typename VisitorT> 
    result_type operator()(attribute_name const &, record const &, VisitorT) const;
  template<typename VisitorT> 
    result_type operator()(attribute_name const &, record_view const &, 
                           VisitorT) const;
  fallback_policy const & get_fallback_policy() const;
};
.fi
.SH "DESCRIPTION"
.PP
Attribute value invoker is a functional object that attempts to find and extract the stored attribute value from the attribute value view or a log record\&. The extracted value is passed to a unary function object (the visitor) provided by user\&.
.PP
The invoker can be specialized on one or several attribute value types that should be specified in the second template argument\&.
.SS "value_visitor_invoker public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
value_visitor_invoker() = default;
.fi

.sp
Default constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
value_visitor_invoker(value_visitor_invoker const & that);
.fi

.sp
Copy constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename U> explicit value_visitor_invoker(U const & arg);
.fi

.sp
Initializing constructor
.sp

.PP
Parameters:
.RS 4
.PP
arg
.RS 4
Fallback policy argument
.RE
.RE
.RE

.SS "value_visitor_invoker public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename VisitorT> 
  result_type operator()(attribute_value const & attr, VisitorT visitor) const;
.fi

.sp
Visitation operator\&. Attempts to acquire the stored value of one of the supported types\&. If acquisition succeeds, the value is passed to
\fIvisitor\fR\&.
.sp

.PP
Parameters:
.RS 4
.PP
attr
.RS 4
An attribute value to apply the visitor to\&.
.RE
.PP
visitor
.RS 4
A receiving function object to pass the attribute value to\&.
.RE
.RE
.PP
Returns:
.RS 4
The result of visitation\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename VisitorT> 
  result_type operator()(attribute_name const & name, 
                         attribute_value_set const & attrs, VisitorT visitor) const;
.fi

.sp
Visitation operator\&. Looks for an attribute value with the specified name and tries to acquire the stored value of one of the supported types\&. If acquisition succeeds, the value is passed to
\fIvisitor\fR\&.
.sp

.PP
Parameters:
.RS 4
.PP
attrs
.RS 4
A set of attribute values in which to look for the specified attribute value\&.
.RE
.PP
name
.RS 4
Attribute value name\&.
.RE
.PP
visitor
.RS 4
A receiving function object to pass the attribute value to\&.
.RE
.RE
.PP
Returns:
.RS 4
The result of visitation\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename VisitorT> 
  result_type operator()(attribute_name const & name, record const & rec, 
                         VisitorT visitor) const;
.fi

.sp
Visitation operator\&. Looks for an attribute value with the specified name and tries to acquire the stored value of one of the supported types\&. If acquisition succeeds, the value is passed to
\fIvisitor\fR\&.
.sp

.PP
Parameters:
.RS 4
.PP
name
.RS 4
Attribute value name\&.
.RE
.PP
rec
.RS 4
A log record\&. The attribute value will be sought among those associated with the record\&.
.RE
.PP
visitor
.RS 4
A receiving function object to pass the attribute value to\&.
.RE
.RE
.PP
Returns:
.RS 4
The result of visitation\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename VisitorT> 
  result_type operator()(attribute_name const & name, record_view const & rec, 
                         VisitorT visitor) const;
.fi

.sp
Visitation operator\&. Looks for an attribute value with the specified name and tries to acquire the stored value of one of the supported types\&. If acquisition succeeds, the value is passed to
\fIvisitor\fR\&.
.sp

.PP
Parameters:
.RS 4
.PP
name
.RS 4
Attribute value name\&.
.RE
.PP
rec
.RS 4
A log record view\&. The attribute value will be sought among those associated with the record\&.
.RE
.PP
visitor
.RS 4
A receiving function object to pass the attribute value to\&.
.RE
.RE
.PP
Returns:
.RS 4
The result of visitation\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
fallback_policy const & get_fallback_policy() const;
.fi

.sp

.PP
Returns:
.RS 4
Fallback policy
.RE
.RE


