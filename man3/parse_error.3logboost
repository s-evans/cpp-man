.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS PARSE_ERROR" 3 "" "" ""
.SH "NAME"
boost::log::parse_error \- Exception class that is used to indicate parsing errors\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/exceptions\&.hpp>


class parse_error : public runtime_error {
public:
  // construct/copy/destruct
  parse_error();
  explicit parse_error(std::string const &);
  ~parse_error();
};
.fi
.SH "DESCRIPTION"
.SS "parse_error public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
parse_error();
.fi

.sp
Default constructor\&. Creates an exception with the default error message\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit parse_error(std::string const & descr);
.fi

.sp
Initializing constructor\&. Creates an exception with the specified error message\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
~parse_error();
.fi

.sp
Destructor
.RE


