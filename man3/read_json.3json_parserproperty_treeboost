.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLA" 3 "" "" ""
.SH "NAME"
boost::property_tree::json_parser::read_json
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/property_tree/json_parser\&.hpp>


template<typename Ptree> 
  void read_json(const std::string & filename, Ptree & pt, 
                 const std::locale & loc = std::locale());
.fi
.SH "DESCRIPTION"
.PP
Read JSON from a the given file and translate it to a property tree\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Clears existing contents of property tree\&. In case of error the property tree unmodified\&.
.sp .5v
.RE

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Items of JSON arrays are translated into ptree keys with empty names\&. Members of objects are translated into named keys\&.
.sp .5v
.RE

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
JSON data can be a string, a numeric value, or one of literals "null", "true" and "false"\&. During parse, any of the above is copied verbatim into ptree data string\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
filename
.RS 4
Name of file from which to read in the property tree\&.
.RE
.PP
loc
.RS 4
The locale to use when reading in the file contents\&.
.RE
.PP
pt
.RS 4
The property tree to populate\&.
.RE
.RE
.PP
Throws:
.RS 4
json_parser_error In case of error deserializing the property tree\&.
.RE

