.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::proto::result_of::make_expr \- Metafunction that computes the return type of the proto::make_expr() function, with a domain deduced from the domains of the children\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/make_expr\&.hpp>

template<typename Tag, typename\&.\&.\&. A> 
struct make_expr {
  // types
  typedef \fIdomain\fR\fI\-\fR\fIdeduced\fR\fI\-\fR\fIfrom\fR\fI\-\fR\fIchild\fR\fI\-\fR\fItypes\fR                          D;   
  typedef typename proto::result_of::make_expr<Tag, D, A\&.\&.\&.>::type type;
};
.fi
.SH "DESCRIPTION"
.PP
Computes the return type of the
proto::make_expr()
function\&.
.PP
In this specialization, the domain is deduced from the domains of the child types\&. If
proto::is_domain<A0>::value
is
true, then another specialization is selected\&.
.SS "make_expr public types"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

typedef
\fIdomain\fR\fI\-\fR\fIdeduced\fR\fI\-\fR\fIfrom\fR\fI\-\fR\fIchild\fR\fI\-\fR\fItypes\fR
D;
.sp
In this specialization, Proto uses the domains of the child expressions to compute the domain of the parent\&. See
proto::deduce_domain
for a full description of the procedure used\&.
.RE


