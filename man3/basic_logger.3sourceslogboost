.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::log::sources::basic_logger \- Basic logger class\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sources/basic_logger\&.hpp>

template<typename CharT, typename FinalT, typename ThreadingModelT> 
class basic_logger : public ThreadingModelT {
public:
  // types
  typedef CharT                      char_type;                   // Character type\&. 
  typedef FinalT                     final_type;                  // Final logger type\&. 
  typedef ThreadingModelT            threading_model;             // Threading model type\&. 
  typedef \fIunspecified\fR                swap_lock;                   // Lock requirement for the swap_unlocked method\&. 
  typedef \fIunspecified\fR                add_attribute_lock;          // Lock requirement for the add_attribute_unlocked method\&. 
  typedef \fIunspecified\fR                remove_attribute_lock;       // Lock requirement for the remove_attribute_unlocked method\&. 
  typedef \fIunspecified\fR                remove_all_attributes_lock;  // Lock requirement for the remove_all_attributes_unlocked method\&. 
  typedef \fIunspecified\fR                get_attributes_lock;         // Lock requirement for the get_attributes method\&. 
  typedef \fIunspecified\fR                open_record_lock;            // Lock requirement for the open_record_unlocked method\&. 
  typedef \fIunspecified\fR                set_attributes_lock;         // Lock requirement for the set_attributes method\&. 
  typedef no_lock< threading_model > push_record_lock;            // Lock requirement for the push_record_unlocked method\&. 

  // construct/copy/destruct
  basic_logger();
  basic_logger(basic_logger const &);
  basic_logger(basic_logger &&);
  template<typename ArgsT> explicit basic_logger(ArgsT const &);
  basic_logger & operator=(basic_logger const &) = delete;

  // protected member functions
  core_ptr const & core() const;
  attribute_set & attributes();
  attribute_set const & attributes() const;
  threading_model & get_threading_model();
  threading_model const & get_threading_model() const;
  final_type * final_this();
  final_type const * final_this() const;
  void swap_unlocked(basic_logger &);
  std::pair< attribute_set::iterator, bool > 
  add_attribute_unlocked(attribute_name const &, attribute const &);
  void remove_attribute_unlocked(attribute_set::iterator);
  void remove_all_attributes_unlocked();
  record open_record_unlocked();
  template<typename ArgsT> record open_record_unlocked(ArgsT const &);
  void push_record_unlocked(record &&);
  attribute_set get_attributes_unlocked() const;
  void set_attributes_unlocked(attribute_set const &);
};
.fi
.SH "DESCRIPTION"
.PP
The
basic_logger
class template serves as a base class for all loggers provided by the library\&. It can also be used as a base for user\-defined loggers\&. The template parameters are:
.PP

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
CharT
\- logging character type
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
FinalT
\- final type of the logger that eventually derives from the
basic_logger\&. There may be other classes in the hierarchy between the final class and
basic_logger\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ThreadingModelT
\- threading model policy\&. Must provide methods of the Boost\&.Thread locking concept used in
basic_logger
class and all its derivatives in the hierarchy up to the
FinalT
class\&. The
basic_logger
class itself requires methods of the SharedLockable concept\&. The threading model policy must also be default and copy\-constructible and support member function
swap\&. There are currently two policies provided:
single_thread_model
and
multi_thread_model\&.
.RE
.sp
.RE
The logger implements fundamental facilities of loggers, such as storing source\-specific attribute set and formatting log record messages\&. The basic logger interacts with the logging core in order to apply filtering and pass records to sinks\&.
.SS "basic_logger public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_logger();
.fi

.sp
Constructor\&. Initializes internal data structures of the basic logger class, acquires reference to the logging core\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_logger(basic_logger const & that);
.fi

.sp
Copy constructor\&. Copies all attributes from the source logger\&.
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Not thread\-safe\&. The source logger must be locked in the final class before copying\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
that
.RS 4
Source logger
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
basic_logger(basic_logger && that);
.fi

.sp
Move constructor\&. Moves all attributes from the source logger\&.
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Not thread\-safe\&. The source logger must be locked in the final class before copying\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
that
.RS 4
Source logger
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename ArgsT> explicit basic_logger(ArgsT const &);
.fi

.sp
Constructor with named arguments\&. The constructor ignores all arguments\&. The result of construction is equivalent to default construction\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
basic_logger & operator=(basic_logger const &) = delete;
.fi

Assignment is closed (should be implemented through copy and swap in the final class) .RE

.SS "basic_logger protected member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
core_ptr const & core() const;
.fi

.sp
An accessor to the logging system pointer
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
attribute_set & attributes();
.fi

.sp
An accessor to the logger attributes
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
attribute_set const & attributes() const;
.fi

.sp
An accessor to the logger attributes
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
threading_model & get_threading_model();
.fi

.sp
An accessor to the threading model base
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
threading_model const & get_threading_model() const;
.fi

.sp
An accessor to the threading model base
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
final_type * final_this();
.fi

.sp
An accessor to the final logger
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
final_type const * final_this() const;
.fi

.sp
An accessor to the final logger
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
void swap_unlocked(basic_logger & that);
.fi

.sp
Unlocked
swap
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
std::pair< attribute_set::iterator, bool > 
add_attribute_unlocked(attribute_name const & name, attribute const & attr);
.fi

.sp
Unlocked
add_attribute
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
void remove_attribute_unlocked(attribute_set::iterator it);
.fi

.sp
Unlocked
remove_attribute
.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
void remove_all_attributes_unlocked();
.fi

.sp
Unlocked
remove_all_attributes
.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
record open_record_unlocked();
.fi

.sp
Unlocked
open_record
.RE


.sp
.RS 4
.ie n \{\
\h'-04'13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "13." 4.2
.\}

.sp

.nf
template<typename ArgsT> record open_record_unlocked(ArgsT const &);
.fi

.sp
Unlocked
open_record
.RE


.sp
.RS 4
.ie n \{\
\h'-04'14.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "14." 4.2
.\}

.sp

.nf
void push_record_unlocked(record && rec);
.fi

.sp
Unlocked
push_record
.RE


.sp
.RS 4
.ie n \{\
\h'-04'15.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "15." 4.2
.\}

.sp

.nf
attribute_set get_attributes_unlocked() const;
.fi

.sp
Unlocked
get_attributes
.RE


.sp
.RS 4
.ie n \{\
\h'-04'16.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "16." 4.2
.\}

.sp

.nf
void set_attributes_unlocked(attribute_set const & attrs);
.fi

.sp
Unlocked
set_attributes
.RE


