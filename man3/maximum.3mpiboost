.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE M" 3 "" "" ""
.SH "NAME"
boost::mpi::maximum \- Compute the maximum of two values\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/mpi/operations\&.hpp>

template<typename T> 
struct maximum : public std::binary_function< T, T, T > {

  // public member functions
  const T & operator()(const T &, const T &) const;
};
.fi
.SH "DESCRIPTION"
.PP
This binary function object computes the maximum of the two values it is given\&. When used with MPI and a type
T
that has an associated, built\-in MPI data type, translates to
MPI_MAX\&.
.SS "maximum public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
const T & operator()(const T & x, const T & y) const;
.fi

.sp

.PP
Returns:
.RS 4
the maximum of x and y\&.
.RE
.RE


