.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPL" 3 "" "" ""
.SH "NAME"
boost::algorithm::erase_tail \- Erase tail algorithm\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/algorithm/string/erase\&.hpp>


template<typename SequenceT> void erase_tail(SequenceT & Input, int N);
.fi
.SH "DESCRIPTION"
.PP
Remove the tail from the input\&. The tail is a suffix of a sequence of given size\&. If the sequence is shorter then required, the whole string is considered to be the tail\&. The input sequence is modified in\-place\&.
.PP

.PP
Parameters:
.RS 4
.PP
Input
.RS 4
An input string
.RE
.PP
N
.RS 4
Length of the tail For N>=0, at most N characters are extracted\&. For N<0, size(Input)\-|N| characters are extracted\&.
.RE
.RE

