.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::log::sources::basic_composite_logger \- A composite logger that inherits a number of features\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sources/basic_logger\&.hpp>

template<typename CharT, typename FinalT, typename ThreadingModelT, 
         typename FeaturesT> 
class basic_composite_logger {
public:
  // types
  typedef base_type::threading_model threading_model;  // Threading model being used\&. 

  // construct/copy/destruct
  basic_composite_logger();
  basic_composite_logger(basic_composite_logger const &);
  basic_composite_logger(logger_base &&);
  template<typename ArgsT> explicit basic_composite_logger(ArgsT const &);

  // public member functions
  std::pair< attribute_set::iterator, bool > 
  add_attribute(attribute_name const &, attribute const &);
  void remove_attribute(attribute_set::iterator);
  void remove_all_attributes();
  attribute_set get_attributes() const;
  void set_attributes(attribute_set const &);
  record open_record();
  template<typename ArgsT> record open_record(ArgsT const &);
  void push_record(record &&);
  void swap(basic_composite_logger &);

  // protected member functions
  FinalT & assign(FinalT const &);
};
.fi
.SH "DESCRIPTION"
.PP
The composite logger is a helper class that simplifies feature composition into the final logger\&. The user\'s logger class is expected to derive from the composite logger class, instantiated with the character type, the user\'s logger class, the threading model and the list of the required features\&. The former three parameters are passed to the
basic_logger
class template\&. The feature list must be an MPL type sequence, where each element is a unary MPL metafunction class, that upon applying on its argument results in a logging feature class that derives from the argument\&. Every logger feature provided by the library can participate in the feature list\&.
.SS "basic_composite_logger public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_composite_logger();
.fi

.sp
Default constructor (default\-constructs all features)
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_composite_logger(basic_composite_logger const & that);
.fi

.sp
Copy constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
basic_composite_logger(logger_base && that);
.fi

.sp
Move constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename ArgsT> explicit basic_composite_logger(ArgsT const & args);
.fi

.sp
Constructor with named parameters
.RE

.SS "basic_composite_logger public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
std::pair< attribute_set::iterator, bool > 
add_attribute(attribute_name const & name, attribute const & attr);
.fi

.sp
The method adds an attribute to the source\-specific attribute set\&. The attribute will be implicitly added to every log record made with the current logger\&.
.sp

.PP
Parameters:
.RS 4
.PP
attr
.RS 4
The attribute factory\&.
.RE
.PP
name
.RS 4
The attribute name\&.
.RE
.RE
.PP
Returns:
.RS 4
A pair of values\&. If the second member is
true, then the attribute is added and the first member points to the attribute\&. Otherwise the attribute was not added and the first member points to the attribute that prevents addition\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void remove_attribute(attribute_set::iterator it);
.fi

.sp
The method removes an attribute from the source\-specific attribute set\&.
.sp

.PP
Parameters:
.RS 4
.PP
it
.RS 4
Iterator to the previously added attribute\&.
.RE
.RE
.PP
Requires:
.RS 4
The attribute was added with the add_attribute call for this instance of the logger\&.
.RE
.PP
Postconditions:
.RS 4
The attribute is no longer registered as a source\-specific attribute for this logger\&. The iterator is invalidated after removal\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void remove_all_attributes();
.fi

.sp
The method removes all attributes from the logger\&. All iterators and references to the removed attributes are invalidated\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
attribute_set get_attributes() const;
.fi

.sp
The method retrieves a copy of a set with all attributes from the logger\&.
.sp

.PP
Returns:
.RS 4
The copy of the attribute set\&. Attributes are shallow\-copied\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
void set_attributes(attribute_set const & attrs);
.fi

.sp
The method installs the whole attribute set into the logger\&. All iterators and references to elements of the previous set are invalidated\&. Iterators to the
\fIattrs\fR
set are not valid to be used with the logger (that is, the logger owns a copy of
\fIattrs\fR
after completion)\&.
.sp

.PP
Parameters:
.RS 4
.PP
attrs
.RS 4
The set of attributes to install into the logger\&. Attributes are shallow\-copied\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
record open_record();
.fi

.sp
The method opens a new log record in the logging core\&.
.sp

.PP
Returns:
.RS 4
A valid record handle if the logging record is opened successfully, an invalid handle otherwise\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename ArgsT> record open_record(ArgsT const & args);
.fi

.sp
The method opens a new log record in the logging core\&.
.sp

.PP
Parameters:
.RS 4
.PP
args
.RS 4
A set of additional named arguments\&. The parameter is ignored\&.
.RE
.RE
.PP
Returns:
.RS 4
A valid record handle if the logging record is opened successfully, an invalid handle otherwise\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
void push_record(record && rec);
.fi

.sp
The method pushes the constructed message to the logging core
.sp

.PP
Parameters:
.RS 4
.PP
rec
.RS 4
The log record with the formatted message
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
void swap(basic_composite_logger & that);
.fi

.sp
Thread\-safe implementation of swap
.RE

.SS "basic_composite_logger protected member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
FinalT & assign(FinalT const & that);
.fi

.sp
Assignment for the final class\&. Threadsafe, provides strong exception guarantee\&.
.RE

.SS "Specializations"

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Class template basic_composite_logger<CharT, FinalT, single_thread_model, FeaturesT>
.RE

