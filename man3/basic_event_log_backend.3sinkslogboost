.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::log::sinks::basic_event_log_backend \- An implementation of a logging sink backend that emits events into Windows NT event log\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/event_log_backend\&.hpp>

template<typename CharT> 
class basic_event_log_backend :
  public basic_sink_backend< synchronized_feeding >
{
public:
  // types
  typedef CharT                          char_type;                   // Character type\&. 
  typedef std::basic_string< char_type > string_type;                 // String type\&. 
  typedef std::vector< string_type >     insertion_list;              // Type of the composed insertions list\&. 
  typedef \fIunspecified\fR                    event_type_mapper_type;      // Mapper type for the event type\&. 
  typedef \fIunspecified\fR                    event_category_mapper_type;  // Mapper type for the event category\&. 
  typedef \fIunspecified\fR                    event_composer_type;         // Event composer type\&. 

  // construct/copy/destruct
  template<typename T> 
    explicit basic_event_log_backend(std::basic_string< T > const &);
  explicit basic_event_log_backend(filesystem::path const &);
  template<typename\&.\&.\&. ArgsT> 
    explicit basic_event_log_backend(ArgsT\&.\&.\&.const &);
  ~basic_event_log_backend();

  // public member functions
  void consume(record_view const &);
  void set_event_type_mapper(event_type_mapper_type const &);
  void set_event_category_mapper(event_category_mapper_type const &);
  void set_event_composer(event_composer_type const &);

  // public static functions
  static string_type get_default_log_name();
  static string_type get_default_source_name();
};
.fi
.SH "DESCRIPTION"
.PP
The sink uses Windows NT 5 (Windows 2000) and later event log API to emit events to an event log\&. The sink acts as an event source\&. Unlike
basic_simple_event_log_backend, this sink backend allows users to specify the custom event message file and supports mapping attribute values onto several insertion strings\&. Although it requires considerably more scaffolding than the simple backend, this allows to support localizable event descriptions\&.
.PP
Besides the file name of the module with event resources, the backend provides the following customizations:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Remote server UNC address, log name and source name\&. These parameters have similar meaning to
basic_simple_event_log_backend\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Event type and category mappings\&. These are function object that allow to map attribute values to the according event parameters\&. One can use mappings in the
event_log
namespace\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Event composer\&. This function object extracts event identifier and formats string insertions, that will be used by the API to compose the final event message text\&.
.RE
.sp
.RE

.SS "basic_event_log_backend public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T> 
  explicit basic_event_log_backend(std::basic_string< T > const & message_file_name);
.fi

.sp
Constructor\&. Registers event source with name based on the application executable file name in the Application log\&. If such a registration is already present, it is not overridden\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit basic_event_log_backend(filesystem::path const & message_file_name);
.fi

.sp
Constructor\&. Registers event source with name based on the application executable file name in the Application log\&. If such a registration is already present, it is not overridden\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename\&.\&.\&. ArgsT> 
  explicit basic_event_log_backend(ArgsT\&.\&.\&.const & args);
.fi

.sp
Constructor\&. Registers event log source with the specified parameters\&. The following named parameters are supported:
.sp

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
message_file
\- Specifies the file name that contains resources that describe events and categories\&. This parameter is mandatory unless
registration
is
never\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
target
\- Specifies an UNC path to the remote server to which log records should be sent to\&. The local machine will be used to process log records, if not specified\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
log_name
\- Specifies the log in which the source should be registered\&. The result of
get_default_log_name
is used, if the parameter is not specified\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
log_source
\- Specifies the source name\&. The result of
get_default_source_name
is used, if the parameter is not specified\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
registration
\- Specifies the event source registration mode in the Windows registry\&. Can have values of the
registration_mode
enum\&. Default value:
on_demand\&.
.RE
.RS 4

.PP
Parameters:
.RS 4
.PP
args
.RS 4
A set of named parameters\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
~basic_event_log_backend();
.fi

.sp
Destructor\&. Unregisters event source\&. The log source description is not removed from the Windows registry\&.
.RE

.SS "basic_event_log_backend public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void consume(record_view const & rec);
.fi

.sp
The method creates an event in the event log
.sp

.PP
Parameters:
.RS 4
.PP
rec
.RS 4
Log record to consume
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void set_event_type_mapper(event_type_mapper_type const & mapper);
.fi

.sp
The method installs the function object that maps application severity levels to WinAPI event types
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void set_event_category_mapper(event_category_mapper_type const & mapper);
.fi

.sp
The method installs the function object that extracts event category from attribute values
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
void set_event_composer(event_composer_type const & composer);
.fi

.sp
The method installs the function object that extracts event identifier from the attributes and creates insertion strings that will replace placeholders in the event message\&.
.RE

.SS "basic_event_log_backend public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static string_type get_default_log_name();
.fi

.sp

.PP
Returns:
.RS 4
Default log name: Application
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static string_type get_default_source_name();
.fi

.sp

.PP
Returns:
.RS 4
Default log source name that is based on the application executable file name and the sink name
.RE
.RE


