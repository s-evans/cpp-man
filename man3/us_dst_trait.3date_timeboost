.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::date_time::us_dst_trait \- Specification for daylight savings start rules in US\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/local_timezone_defs\&.hpp>

template<typename date_type> 
struct us_dst_trait {
  // types
  typedef date_type::day_of_week_type                 day_of_week_type;          
  typedef date_type::month_type                       month_type;                
  typedef date_type::year_type                        year_type;                 
  typedef date_time::nth_kday_of_month< date_type >   start_rule_functor;        
  typedef date_time::first_kday_of_month< date_type > end_rule_functor;          
  typedef date_time::first_kday_of_month< date_type > start_rule_functor_pre2007;
  typedef date_time::last_kday_of_month< date_type >  end_rule_functor_pre2007;  

  // public static functions
  static day_of_week_type start_day(year_type);
  static month_type start_month(year_type);
  static day_of_week_type end_day(year_type);
  static month_type end_month(year_type);
  static date_type local_dst_start_day(year_type);
  static date_type local_dst_end_day(year_type);
  static int dst_start_offset_minutes();
  static int dst_end_offset_minutes();
  static int dst_shift_length_minutes();
};
.fi
.SH "DESCRIPTION"
.PP
This class is used to configure
dst_calc_engine
template typically as follows:

.sp
.if n \{\
.RS 4
.\}
.nf
using namespace boost::gregorian;
using namespace boost::posix_time;
typedef us_dst_trait<date> us_dst_traits;
typedef boost::date_time::dst_calc_engine<date, time_duration, 
                                          us_dst_traits>  
                                          us_dst_calc;
//calculate the 2002 transition day of USA April 7 2002
date dst_start = us_dst_calc::local_dst_start_day(2002); 

//calculate the 2002 transition day of USA Oct 27 2002
date dst_end = us_dst_calc::local_dst_end_day(2002); 
                                          
//check if a local time is in dst or not \-\- posible answers
//are yes, no, invalid time label, ambiguous
ptime t(\&.\&.\&.some time\&.\&.\&.);  
if (us_dst::local_is_dst(t\&.date(), t\&.time_of_day()) 
    == boost::date_time::is_not_in_dst) 
{

}

.fi
.if n \{\
.RE
.\}
.sp
This generates a type suitable for the calculation of dst transitions for the United States\&. Of course other templates can be used for other locales\&.
.SS "us_dst_trait public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static day_of_week_type start_day(year_type);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static month_type start_month(year_type y);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
static day_of_week_type end_day(year_type);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
static month_type end_month(year_type y);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
static date_type local_dst_start_day(year_type year);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
static date_type local_dst_end_day(year_type year);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
static int dst_start_offset_minutes();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
static int dst_end_offset_minutes();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
static int dst_shift_length_minutes();
.fi

.RE


