.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::date_time::gregorian_calendar_base \- An implementation of the Gregorian calendar\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/gregorian_calendar\&.hpp>

template<typename ymd_type_, typename date_int_type_> 
class gregorian_calendar_base {
public:
  // types
  typedef ymd_type_            ymd_type;       // define a type a date split into components 
  typedef ymd_type::month_type month_type;     // define a type for representing months 
  typedef ymd_type::day_type   day_type;       // define a type for representing days 
  typedef ymd_type::year_type  year_type;      // Type to hold a stand alone year value (eg: 2002) 
  typedef date_int_type_       date_int_type;  // Define the integer type to use for internal calculations\&. 

  // public static functions
  static unsigned short day_of_week(const ymd_type &);
  static int week_number(const ymd_type &);
  static date_int_type day_number(const ymd_type &);
  static date_int_type julian_day_number(const ymd_type &);
  static date_int_type modjulian_day_number(const ymd_type &);
  static ymd_type from_day_number(date_int_type);
  static ymd_type from_julian_day_number(date_int_type);
  static ymd_type from_modjulian_day_number(date_int_type);
  static bool is_leap_year(year_type);
  static unsigned short end_of_month_day(year_type, month_type);
  static ymd_type epoch();
  static unsigned short days_in_week();
};
.fi
.SH "DESCRIPTION"
.PP
This is a parameterized implementation of a proleptic Gregorian Calendar that can be used in the creation of date systems or just to perform calculations\&. All the methods of this class are static functions, so the intent is to never create instances of this class\&.
.SS "gregorian_calendar_base public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static unsigned short day_of_week(const ymd_type & ymd);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static int week_number(const ymd_type & ymd);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
static date_int_type day_number(const ymd_type & ymd);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
static date_int_type julian_day_number(const ymd_type & ymd);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
static date_int_type modjulian_day_number(const ymd_type & ymd);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
static ymd_type from_day_number(date_int_type);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
static ymd_type from_julian_day_number(date_int_type);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
static ymd_type from_modjulian_day_number(date_int_type);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
static bool is_leap_year(year_type);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
static unsigned short end_of_month_day(year_type y, month_type m);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
static ymd_type epoch();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
static unsigned short days_in_week();
.fi

.RE


