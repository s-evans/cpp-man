.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMP" 3 "" "" ""
.SH "NAME"
boost::units::make_dimension_list
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/units/dimension\&.hpp>

template<typename Seq> 
struct make_dimension_list {
  // types
  typedef \fIunspecified\fR type;
};
.fi
.SH "DESCRIPTION"
.PP
Reduce dimension list to cardinal form\&. This algorithm collapses duplicate base dimension tags and sorts the resulting list by the tag ordinal value\&. Dimension lists that resolve to the same dimension are guaranteed to be represented by an identical type\&.
.PP
The argument should be an MPL forward sequence containing instances of the
dim
template\&.
.PP
The result is also an MPL forward sequence\&. It also supports the following metafunctions to allow use as a dimension\&.
.PP

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
mpl::plus
is defined only on two equal dimensions and returns the argument unchanged\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
mpl::minus
is defined only for two equal dimensions and returns the argument unchanged\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
mpl::negate
will return its argument unchanged\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
mpl::times
is defined for any dimensions and adds corresponding exponents\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
mpl::divides
is defined for any dimensions and subtracts the exponents of the right had argument from the corresponding exponents of the left had argument\&. Missing base dimension tags are assumed to have an exponent of zero\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
static_power
takes a dimension and a
static_rational
and multiplies all the exponents of the dimension by the
static_rational\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
static_root
takes a dimension and a
static_rational
and divides all the exponents of the dimension by the
static_rational\&.
.RE
.sp
.RE


