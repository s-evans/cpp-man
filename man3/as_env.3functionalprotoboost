.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT AS_ENV" 3 "" "" ""
.SH "NAME"
boost::proto::functional::as_env \- A unary PolymorphicFunctionObject for ensuring that an object is a transform environment\&. If it isn\'t already, it is turned into one such that the object is associated with the proto::data_type key\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/env\&.hpp>


struct as_env :  proto::callable {
  // member classes/structs/unions
  template<typename Sig> 
  struct result {
    // types
    typedef \fIsee\fR\fI\-\fR\fIbelow\fR type;
  };

  // public member functions
  template<typename T> \fIsee\fR\fI\-\fR\fIbelow\fR operator()(T &) const;
  template<typename T> \fIsee\fR\fI\-\fR\fIbelow\fR operator()(T const &) const;
};
.fi
.SH "DESCRIPTION"
.SS "as_env public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T> \fIsee\fR\fI\-\fR\fIbelow\fR operator()(T & t) const;
template<typename T> \fIsee\fR\fI\-\fR\fIbelow\fR operator()(T const & t) const;
.fi

.sp
If
proto::is_env<T>::value
is
false, this function returns the result of
(proto::data = t)\&. See
proto::data_type::operator=
for details\&.
.sp
Otherwise, this function returns
t
by reference\&.
.RE


