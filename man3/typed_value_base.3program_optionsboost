.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TYPED_VALUE" 3 "" "" ""
.SH "NAME"
boost::program_options::typed_value_base
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/value_semantic\&.hpp>


class typed_value_base {
public:
  // construct/copy/destruct
  ~typed_value_base();

  // public member functions
  virtual const std::type_info & value_type() const = 0;
};
.fi
.SH "DESCRIPTION"
.PP
Base class for all option that have a fixed type, and are willing to announce this type to the outside world\&. Any \'value_semantics\' for which you want to find out the type can be dynamic_cast\-ed to
typed_value_base\&. If conversion succeeds, the \'type\' method can be called\&.
.SS "typed_value_base public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
~typed_value_base();
.fi

.RE

.SS "typed_value_base public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual const std::type_info & value_type() const = 0;
.fi

.RE


