.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLA" 3 "" "" ""
.SH "NAME"
boost::recursive_wrapper \- Solves circular dependencies, enabling recursive types\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/variant/recursive_wrapper\&.hpp>

template<typename T> 
class recursive_wrapper {
public:
  // types
  typedef T type;

  // construct/copy/destruct
  recursive_wrapper();
  recursive_wrapper(const recursive_wrapper &);
  recursive_wrapper(const T &);
  ~recursive_wrapper();

  // modifiers
  void swap(recursive_wrapper &);
  recursive_wrapper & operator=(const recursive_wrapper &);
  recursive_wrapper & operator=(const T &);

  // queries
  T & get();
  const T & get() const;
  T * get_pointer();
  const T * get_pointer() const;
};
.fi
.SH "DESCRIPTION"
.sp
The recursive_wrapper class template has an interface similar to a simple value container, but its content is allocated dynamically\&. This allows recursive_wrapper to hold types T whose member data leads to a circular dependency (e\&.g\&., a data member of T has a data member of type T)\&.
.sp
The application of recursive_wrapper is easiest understood in context\&. See the section called &#8220;Recursive types with recursive_wrapper&#8221; for a demonstration of a common use of the class template\&.
.sp
\fBNotes\fR:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Any type specified as the template argument to
            recursive_wrapper must be capable of construction via
            operator new\&. Thus, for instance, references are not
            supported\&..RE
.SS "recursive_wrapper public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
recursive_wrapper();
.fi

.sp
Default constructor\&.Initializes
*this
by default construction of
T\&.
.PP
Requires:
.RS 4
T
must fulfill the requirements of the
\fIDefaultConstructible\fR
[20\&.1\&.4] concept\&.
.RE
.PP
Throws:
.RS 4
May fail with any exceptions arising from the default constructor of
T
or, in the event of insufficient memory, with
std::bad_alloc\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
recursive_wrapper(const recursive_wrapper & other);
.fi

.sp
Copy constructor\&.Copies the content of
other
into
*this\&.
.PP
Throws:
.RS 4
May fail with any exceptions arising from the copy constructor of
T
or, in the event of insufficient memory, with
std::bad_alloc\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
recursive_wrapper(const T & operand);
.fi

.sp
Value constructor\&.Copies
operand
into
*this\&.
.PP
Throws:
.RS 4
May fail with any exceptions arising from the copy constructor of
T
or, in the event of insufficient memory, with
std::bad_alloc\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
~recursive_wrapper();
.fi

.sp
Destructor\&.Deletes the content of
*this\&.
.PP
Throws:
.RS 4
Will not throw\&..RE
.RE

.SS "recursive_wrapper modifiers"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void swap(recursive_wrapper & other);
.fi

.sp
Exchanges contents of
*this
and
other\&.
.PP
Throws:
.RS 4
Will not throw\&..RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
recursive_wrapper & operator=(const recursive_wrapper & rhs);
.fi

.sp
Copy assignment operator\&.Assigns the content of
rhs
to the content of
*this\&.
.PP
Requires:
.RS 4
T
must fulfill the requirements of the Assignable concept\&.
.RE
.PP
Throws:
.RS 4
May fail with any exceptions arising from the assignment operator of
T\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
recursive_wrapper & operator=(const T & rhs);
.fi

.sp
Value assignment operator\&.Assigns
rhs
into the content of
*this\&.
.PP
Requires:
.RS 4
T
must fulfill the requirements of the Assignable concept\&.
.RE
.PP
Throws:
.RS 4
May fail with any exceptions arising from the assignment operator of
T\&.
.RE
.RE

.SS "recursive_wrapper queries"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
T & get();
const T & get() const;
.fi

.sp
Returns a reference to the content of
*this\&.
.PP
Throws:
.RS 4
Will not throw\&..RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
T * get_pointer();
const T * get_pointer() const;
.fi

.sp
Returns a pointer to the content of
*this\&.
.PP
Throws:
.RS 4
Will not throw\&..RE
.RE


