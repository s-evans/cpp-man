.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::local_time::custom_time_zone_base \- A real time zone\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/local_time/custom_time_zone\&.hpp>

template<typename CharT> 
class custom_time_zone_base :
  public date_time::time_zone_base< posix_time::ptime, CharT >
{
public:
  // types
  typedef boost::posix_time::time_duration                      time_duration_type;
  typedef date_time::time_zone_base< posix_time::ptime, CharT > base_type;         
  typedef base_type::string_type                                string_type;       
  typedef base_type::stringstream_type                          stringstream_type; 
  typedef date_time::time_zone_names_base< CharT >              time_zone_names;   
  typedef CharT                                                 char_type;         

  // construct/copy/destruct
  custom_time_zone_base(const time_zone_names &, const time_duration_type &, 
                        const dst_adjustment_offsets &, 
                        boost::shared_ptr< dst_calc_rule >);
  ~custom_time_zone_base();

  // public member functions
  virtual string_type dst_zone_abbrev() const;
  virtual string_type std_zone_abbrev() const;
  virtual string_type dst_zone_name() const;
  virtual string_type std_zone_name() const;
  virtual bool has_dst() const;
  virtual posix_time::ptime dst_local_start_time(gregorian::greg_year) const;
  virtual posix_time::ptime dst_local_end_time(gregorian::greg_year) const;
  virtual time_duration_type base_utc_offset() const;
  virtual time_duration_type dst_offset() const;
  virtual string_type to_posix_string() const;
};
.fi
.SH "DESCRIPTION"
.SS "custom_time_zone_base public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
custom_time_zone_base(const time_zone_names & zone_names, 
                      const time_duration_type & utc_offset, 
                      const dst_adjustment_offsets & dst_shift, 
                      boost::shared_ptr< dst_calc_rule > calc_rule);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~custom_time_zone_base();
.fi

.RE

.SS "custom_time_zone_base public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual string_type dst_zone_abbrev() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
virtual string_type std_zone_abbrev() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
virtual string_type dst_zone_name() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
virtual string_type std_zone_name() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
virtual bool has_dst() const;
.fi

True if zone uses daylight savings adjustments\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
virtual posix_time::ptime dst_local_start_time(gregorian::greg_year y) const;
.fi

Local time that DST starts <ndash></ndash> NADT if has_dst is false\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
virtual posix_time::ptime dst_local_end_time(gregorian::greg_year y) const;
.fi

Local time that DST ends <ndash></ndash> NADT if has_dst is false\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
virtual time_duration_type base_utc_offset() const;
.fi

Base offset from UTC for zone (eg: \-07:30:00) .RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
virtual time_duration_type dst_offset() const;
.fi

Adjustment forward or back made while DST is in effect\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
virtual string_type to_posix_string() const;
.fi

Returns a POSIX time_zone string for this object\&. .RE


