.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::log::basic_record_ostream \- Logging record adapter with a streaming capability\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sources/record_ostream\&.hpp>

template<typename CharT> 
class basic_record_ostream : public basic_formatting_ostream< CharT > {
public:
  // types
  typedef CharT                           char_type;    // Character type\&. 
  typedef std::basic_string< char_type >  string_type;  // String type to be used as a message text holder\&. 
  typedef std::basic_ostream< char_type > stream_type;  // Stream type\&. 

  // construct/copy/destruct
  basic_record_ostream() noexcept;
  explicit basic_record_ostream(record &);
  basic_record_ostream(basic_record_ostream const &) = delete;
  basic_record_ostream & operator=(basic_record_ostream const &) = delete;
  ~basic_record_ostream();

  // public member functions
  explicit operator bool() const noexcept;
  bool operator!() const noexcept;
  record & get_record();
  record const & get_record() const;
  void attach_record(record &);
  void detach_from_record() noexcept;

  // private member functions
  void init_stream();
};
.fi
.SH "DESCRIPTION"
.PP
This class allows to compose the logging record message by streaming operations\&. It aggregates the log record and provides the standard output stream interface\&.
.SS "basic_record_ostream public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_record_ostream() noexcept;
.fi

.sp
Default constructor\&. Creates an empty record that is equivalent to the invalid record handle\&. The stream capability is not available after construction\&.
.sp

.PP
Postconditions:
.RS 4
!*this == true
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit basic_record_ostream(record & rec);
.fi

.sp
Constructor from a record object\&. Attaches to the provided record\&.
.sp

.PP
Parameters:
.RS 4
.PP
rec
.RS 4
The record handle being attached to
.RE
.RE
.PP
Requires:
.RS 4
!!rec == true
.RE
.PP
Postconditions:
.RS 4
&this\->get_record() == &rec
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
basic_record_ostream(basic_record_ostream const &) = delete;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
basic_record_ostream & operator=(basic_record_ostream const &) = delete;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
~basic_record_ostream();
.fi

.sp
Destructor\&. Destroys the record, releases any sinks and attribute values that were involved in processing this record\&.
.RE

.SS "basic_record_ostream public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit operator bool() const noexcept;
.fi

.sp
Conversion to an unspecified boolean type
.sp

.PP
Returns:
.RS 4
true, if stream is valid and ready for formatting,
false, if the stream is not valid\&. The latter also applies to the case when the stream is not attached to a log record\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
bool operator!() const noexcept;
.fi

.sp
Inverted conversion to an unspecified boolean type
.sp

.PP
Returns:
.RS 4
false, if stream is valid and ready for formatting,
true, if the stream is not valid\&. The latter also applies to the case when the stream is not attached to a log record\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
record & get_record();
.fi

.sp
Flushes internal buffers to complete all pending formatting operations and returns the aggregated log record
.sp

.PP
Returns:
.RS 4
The aggregated record object
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
record const & get_record() const;
.fi

.sp
Flushes internal buffers to complete all pending formatting operations and returns the aggregated log record
.sp

.PP
Returns:
.RS 4
The aggregated record object
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
void attach_record(record & rec);
.fi

.sp
If the stream is attached to a log record, flushes internal buffers to complete all pending formatting operations\&. Then reattaches the stream to another log record\&.
.sp

.PP
Parameters:
.RS 4
.PP
rec
.RS 4
New log record to attach to
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void detach_from_record() noexcept;
.fi

The function resets the stream into a detached (default initialized) state\&. .RE

.SS "basic_record_ostream private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void init_stream();
.fi

The function initializes the stream and the stream buffer\&. .RE


