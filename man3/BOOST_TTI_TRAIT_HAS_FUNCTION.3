.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MACRO BOOST" 3 "" "" ""
.SH "NAME"
BOOST_TTI_TRAIT_HAS_FUNCTION \- Expands to a metafunction which tests whether a member function or a static member function with a particular name and signature exists\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/tti/has_function\&.hpp>

BOOST_TTI_TRAIT_HAS_FUNCTION(trait, name)
.fi
.SH "DESCRIPTION"
.PP
trait = the name of the metafunction within the tti namespace\&.
.PP
name = the name of the inner member\&.
.PP
generates a metafunction called "trait" where \'trait\' is the macro parameter\&. template<class BOOST_TTI_TP_T,class BOOST_TTI_TP_R,class BOOST_TTI_TP_FS,class BOOST_TTI_TP_TAG> struct trait { static const value = unspecified; typedef mpl::bool_<true\-or\-false> type; }; The metafunction types and return: BOOST_TTI_TP_T = the enclosing type in which to look for our \'name\'\&. BOOST_TTI_TP_R = the return type of the function BOOST_TTI_TP_FS = (optional) the parameters of the function as a boost::mpl forward sequence if function parameters are not empty\&. BOOST_TTI_TP_TAG = (optional) a boost::function_types tag to apply to the function if the need for a tag exists\&. returns = \'value\' is true if the \'name\' exists, with the appropriate static member function type, otherwise \'value\' is false\&.

