.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEM" 3 "" "" ""
.SH "NAME"
boost::typeindex::type_id_runtime
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_index\&.hpp>


template<typename T> type_index type_id_runtime(const T & runtime_val);
.fi
.SH "DESCRIPTION"
.PP
Function that works exactly like C++ typeid(rtti_val) call, but returns boost::type_index\&.
.PP
Retunrs runtime information about specified type\&.
.PP
\fBRequirements:\fR
RTTI available or Base and Derived classes must be marked with BOOST_TYPE_INDEX_REGISTER_CLASS\&.
.PP
\fBExample:\fR

.sp
.if n \{\
.RS 4
.\}
.nf
struct Base { virtual ~Base(){} };
struct Derived: public Base  {};
\&.\&.\&.
Derived d;
Base& b = d;
type_index ti = type_id_runtime(b);
std::cout << ti\&.pretty_name();  // Outputs \'Derived\'

.fi
.if n \{\
.RE
.\}

.PP

.PP
Parameters:
.RS 4
.PP
runtime_val
.RS 4
Varaible which runtime type must be returned\&.
.RE
.RE
.PP
Returns:
.RS 4
boost::typeindex::type_index with information about the specified variable\&.
.RE
.PP
Throws:
.RS 4
Nothing\&.
.RE

