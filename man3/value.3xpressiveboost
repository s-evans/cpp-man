.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE VA" 3 "" "" ""
.SH "NAME"
boost::xpressive::value \- value<> is a lazy wrapper for a value that can be used in xpressive semantic actions\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_actions\&.hpp>

template<typename T> 
struct value :
  public proto::extends< proto::terminal< T >::type, value< T > >
{
  // construct/copy/destruct
  value();
  explicit value(T const &);

  // public member functions
  T & get();
  T const & get() const;
};
.fi
.SH "DESCRIPTION"
.PP
Below is an example that shows where
value<>
is useful\&.
.sp
.if n \{\
.RS 4
.\}
.nf
sregex good_voodoo(boost::shared_ptr<int> pi)
{
    using namespace boost::xpressive;
    // Use val() to hold the shared_ptr by value:
    sregex rex = +( _d [ ++*val(pi) ] >> \'!\' );
    // OK, rex holds a reference count to the integer\&.
    return rex;
}

.fi
.if n \{\
.RE
.\}
.sp
In the above code,
xpressive::val()
is a function that returns a
value<>
object\&. Had
val()
not been used here, the operation
++*pi
would have been evaluated eagerly once, instead of lazily when the regex match happens\&.
.SS "Template Parameters"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
typename T
.fi

.sp
The type of the value to store\&.
.RE

.SS "value public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
value();
.fi

Store a default\-constructed T\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit value(T const & t);
.fi

Store a copy of t\&. 
.PP
Parameters:
.RS 4
.PP
t
.RS 4
The initial value\&.
.RE
.RE
.RE

.SS "value public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
T & get();
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
T const & get() const;
.fi

Fetch the stored value\&. .RE


