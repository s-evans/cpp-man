.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLA" 3 "" "" ""
.SH "NAME"
boost::reference_wrapper \- Contains a reference to an object of type T\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/core/ref\&.hpp>

template<typename T> 
class reference_wrapper {
public:
  // types
  typedef T type;

  // construct/copy/destruct
  explicit reference_wrapper(T &);
  reference_wrapper(T &&) = delete;

  // public member functions
  operator T &() const;
  T & get() const;
  T * get_pointer() const;
};
.fi
.SH "DESCRIPTION"
.PP
reference_wrapper
is primarily used to "feed" references to function templates (algorithms) that take their parameter by value\&. It provides an implicit conversion to
T&, which usually allows the function templates to work on references unmodified\&.
.SS "reference_wrapper public types"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

typedef
T
type;
.sp
Type
T\&.
.RE

.SS "reference_wrapper public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit reference_wrapper(T & t);
.fi

.sp
Constructs a
reference_wrapper
object that stores a reference to
t\&.
.sp
Does not throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
reference_wrapper(T && t) = delete;
.fi

.sp
Construction from a temporary object is disabled\&.
.RE

.SS "reference_wrapper public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
operator T &() const;
.fi

.sp

Does not throw\&.
.PP
Returns:
.RS 4
The stored reference\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
T & get() const;
.fi

.sp

Does not throw\&.
.PP
Returns:
.RS 4
The stored reference\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
T * get_pointer() const;
.fi

.sp

Does not throw\&.
.PP
Returns:
.RS 4
A pointer to the object referenced by the stored reference\&.
.RE
.RE


