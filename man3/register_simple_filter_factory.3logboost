.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNC" 3 "" "" ""
.SH "NAME"
boost::log::register_simple_filter_factory
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/setup/filter_parser\&.hpp>


template<typename CharT, typename DescriptorT, 
         template< typename > class ActorT> 
  void register_simple_filter_factory(expressions::attribute_keyword< DescriptorT, ActorT > const & keyword);
.fi
.SH "DESCRIPTION"
.PP
The function registers a simple filter factory object for the specified attribute keyword\&. The factory will support attribute values described by the keyword\&. The values must support all relation operations, such as equality comparison and less/greater ordering, and also extraction from stream\&.
.PP

.PP
Parameters:
.RS 4
.PP
keyword
.RS 4
Attribute keyword to associate the factory with
.RE
.RE
.PP
Requires:
.RS 4
name != NULL,
name
points to a zero\-terminated string
.RE

