.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::proto::result_of::unpack_expr \- Metafunction that computes the return type of the proto::unpack_expr() function, with a domain deduced from the domains of the children\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/make_expr\&.hpp>

template<typename Tag, typename Sequence, typename Void = void> 
struct unpack_expr {
  // types
  typedef 
    typename proto::result_of::make_expr<
      Tag,
      typename fusion::result_of::value_at_c<\fIS\fR, 0>::type,
      \&.\&.\&.
      typename fusion::result_of::value_at_c<\fIS\fR, \fIN\fR\-1>::type
    >::type
   type;  // Where S is a Fusion RandomAccessSequence equivalent to Sequence, and N is the size of S\&.
};
.fi
.SH "DESCRIPTION"
.PP
Compute the return type of the
proto::unpack_expr()
function\&.
.PP

Sequence
is a Fusion Forward Sequence\&.
.PP
In this specialization, the domain is deduced from the domains of the child types\&. If
proto::is_domain<Sequence>::value
is
true, then another specialization is selected\&.

