.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE EX" 3 "" "" ""
.SH "NAME"
boost::proto::expr \- Representation of a node in an expression tree\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/expr\&.hpp>

template<typename Tag, typename Args, long Arity = Args::arity> 
struct expr {
  // types
  typedef Tag                                   proto_tag;         
  typedef Args                                  proto_args;        
  typedef mpl::long_< Arity >                   proto_arity;       
  typedef proto::default_domain                 proto_domain;      
  typedef proto::basic_expr< Tag, Args, Arity > proto_grammar;     
  typedef expr                                  proto_base_expr;   
  typedef expr                                  proto_derived_expr;
  typedef typename Args::child\fIN\fR                 proto_childN;        // For each \fIN\fR in \fI[0,max(Arity,1))\fR\&.

  // member classes/structs/unions
  template<typename Signature> 
  struct result {
    // types
    typedef \fIunspecified\fR type;
  };

  // public static functions
  template<typename\&.\&.\&. A> static expr const make(A const &\&.\&.\&.);

  // public member functions
  expr & proto_base();
  expr const & proto_base() const;
  template<typename A> \fIunspecified\fR operator=(A &);
  template<typename A> \fIunspecified\fR operator=(A const &);
  template<typename A> \fIunspecified\fR operator=(A &) const;
  template<typename A> \fIunspecified\fR operator=(A const &) const;
  template<typename A> \fIunspecified\fR operator[](A &);
  template<typename A> \fIunspecified\fR operator[](A const &);
  template<typename A> \fIunspecified\fR operator[](A &) const;
  template<typename A> \fIunspecified\fR operator[](A const &) const;
  template<typename\&.\&.\&. A> \fIunspecified\fR operator()(A const &\&.\&.\&.);
  template<typename\&.\&.\&. A> \fIunspecified\fR operator()(A const &\&.\&.\&.) const;

  // public data members
  proto_child\fIN\fR childN;  // For each \fIN\fR in \fI[0,max(Arity,1))\fR\&.
  static const long proto_arity_c;  // = Arity;
};
.fi
.SH "DESCRIPTION"
.PP

proto::expr<>
is a node in an expression template tree\&. It is a container for its child sub\-trees\&. It also serves as the terminal nodes of the tree\&.
.PP

Tag
is type that represents the operation encoded by this expression\&. It is typically one of the structs in the
boost::proto::tag
namespace, but it doesn\'t have to be\&. If
Arity
is 0 then this
expr<>
type represents a leaf in the expression tree\&.
.PP

Args
is a list of types representing the children of this expression\&. It is an instantiation of one of
proto::list1<>,
proto::list2<>, etc\&. The child types must all themselves be either
proto::expr<>
or
proto::basic_expr<>&
(or extensions thereof via
proto::extends<>
or
BOOST_PROTO_EXTENDS()), unless
Arity
is 0, in which case
Args
must be
proto::term<T>, where
T
can be any type\&.
.PP

proto::expr<>
is a valid Fusion random\-access sequence, where the elements of the sequence are the child expressions\&.
.SS "expr public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename\&.\&.\&. A> static expr const make(A const &\&.\&.\&. a);
.fi

.PP
Requires:
.RS 4
The number of supplied arguments must be
max(Arity,1)\&.
.RE
.PP
Returns:
.RS 4
A new
expr
object initialized with the specified arguments\&.
.RE
.RE

.SS "expr public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
expr & proto_base();
.fi

.PP
Returns:
.RS 4
*this
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
expr const & proto_base() const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename A> \fIunspecified\fR operator=(A & a);
.fi

.sp
Lazy assignment expression
.PP
Returns:
.RS 4
A new expression node representing the assignment operation\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename A> \fIunspecified\fR operator=(A const & a);
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename A> \fIunspecified\fR operator=(A & a) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
template<typename A> \fIunspecified\fR operator=(A const & a) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename A> \fIunspecified\fR operator[](A & a);
.fi

.sp
Lazy subscript expression
.PP
Returns:
.RS 4
A new expression node representing the subscript operation\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
template<typename A> \fIunspecified\fR operator[](A const & a);
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
template<typename A> \fIunspecified\fR operator[](A & a) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
template<typename A> \fIunspecified\fR operator[](A const & a) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
template<typename\&.\&.\&. A> \fIunspecified\fR operator()(A const &\&.\&.\&. a);
.fi

.sp
Lazy function call
.PP
Returns:
.RS 4
A new expression node representing the function call operation\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
template<typename\&.\&.\&. A> \fIunspecified\fR operator()(A const &\&.\&.\&. a) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


