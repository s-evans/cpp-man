.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::log::sources::basic_severity_logger \- Severity level feature implementation\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sources/severity_feature\&.hpp>

template<typename BaseT, typename LevelT = int> 
class basic_severity_logger : public BaseT {
public:
  // types
  typedef base_type::char_type                                                                     char_type;           // Character type\&. 
  typedef base_type::final_type                                                                    final_type;          // Final type\&. 
  typedef base_type::threading_model                                                               threading_model;     // Threading model being used\&. 
  typedef LevelT                                                                                   severity_level;      // Severity level type\&. 
  typedef \fIunspecified\fR                                                                              severity_attribute;  // Severity attribute type\&. 
  typedef strictest_lock< typename base_type::open_record_lock, no_lock< threading_model > >::type open_record_lock;    // Lock requirement for the open_record_unlocked method\&. 
  typedef \fIunspecified\fR                                                                              swap_lock;           // Lock requirement for the swap_unlocked method\&. 

  // construct/copy/destruct
  basic_severity_logger();
  basic_severity_logger(basic_severity_logger const &);
  basic_severity_logger(basic_severity_logger &&);
  template<typename ArgsT> explicit basic_severity_logger(ArgsT const &);

  // public member functions
  severity_level default_severity() const;

  // protected member functions
  severity_attribute const & get_severity_attribute() const;
  template<typename ArgsT> record open_record_unlocked(ArgsT const &);
  void swap_unlocked(basic_severity_logger &);
};
.fi
.SH "DESCRIPTION"
.SS "basic_severity_logger public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_severity_logger();
.fi

.sp
Default constructor\&. The constructed logger will have a severity attribute registered\&. The default level for log records will be 0\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_severity_logger(basic_severity_logger const & that);
.fi

.sp
Copy constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
basic_severity_logger(basic_severity_logger && that);
.fi

.sp
Move constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename ArgsT> explicit basic_severity_logger(ArgsT const & args);
.fi

.sp
Constructor with named arguments\&. Allows to setup the default level for log records\&.
.sp

.PP
Parameters:
.RS 4
.PP
args
.RS 4
A set of named arguments\&. The following arguments are supported:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
severity
\- default severity value
.RE
.RS 4

.RE
.RE
.RE

.SS "basic_severity_logger public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
severity_level default_severity() const;
.fi

.sp
Default severity value getter
.RE

.SS "basic_severity_logger protected member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
severity_attribute const & get_severity_attribute() const;
.fi

.sp
Severity attribute accessor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename ArgsT> record open_record_unlocked(ArgsT const & args);
.fi

.sp
Unlocked
open_record
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void swap_unlocked(basic_severity_logger & that);
.fi

Unlocked swap\&. .RE


