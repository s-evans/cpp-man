.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS INTERVAL_BOU" 3 "" "" ""
.SH "NAME"
boost::icl::interval_bounds
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/icl/interval_bounds\&.hpp>


class interval_bounds {
public:
  // construct/copy/destruct
  interval_bounds();
  explicit interval_bounds(bound_type);

  // public member functions
   BOOST_STATIC_CONSTANT(bound_type, static_open = 0);
   BOOST_STATIC_CONSTANT(bound_type, static_left_open = 1);
   BOOST_STATIC_CONSTANT(bound_type, static_right_open = 2);
   BOOST_STATIC_CONSTANT(bound_type, static_closed = 3);
   BOOST_STATIC_CONSTANT(bound_type, dynamic = 4);
   BOOST_STATIC_CONSTANT(bound_type, undefined = 5);
   BOOST_STATIC_CONSTANT(bound_type, _open = 0);
   BOOST_STATIC_CONSTANT(bound_type, _left_open = 1);
   BOOST_STATIC_CONSTANT(bound_type, _right_open = 2);
   BOOST_STATIC_CONSTANT(bound_type, _closed = 3);
   BOOST_STATIC_CONSTANT(bound_type, _right = 1);
   BOOST_STATIC_CONSTANT(bound_type, _left = 2);
   BOOST_STATIC_CONSTANT(bound_type, _all = 3);
  interval_bounds all() const;
  interval_bounds left() const;
  interval_bounds right() const;
  interval_bounds reverse_left() const;
  interval_bounds reverse_right() const;
  bound_type bits() const;

  // public static functions
  static interval_bounds open();
  static interval_bounds left_open();
  static interval_bounds right_open();
  static interval_bounds closed();

  // public data members
  bound_type _bits;
};
.fi
.SH "DESCRIPTION"
.SS "interval_bounds public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
interval_bounds();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit interval_bounds(bound_type bounds);
.fi

.RE

.SS "interval_bounds public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(bound_type, static_open = 0);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(bound_type, static_left_open = 1);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(bound_type, static_right_open = 2);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(bound_type, static_closed = 3);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(bound_type, dynamic = 4);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(bound_type, undefined = 5);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(bound_type, _open = 0);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(bound_type, _left_open = 1);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(bound_type, _right_open = 2);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(bound_type, _closed = 3);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(bound_type, _right = 1);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(bound_type, _left = 2);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "13." 4.2
.\}

.sp

.nf
 BOOST_STATIC_CONSTANT(bound_type, _all = 3);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'14.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "14." 4.2
.\}

.sp

.nf
interval_bounds all() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'15.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "15." 4.2
.\}

.sp

.nf
interval_bounds left() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'16.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "16." 4.2
.\}

.sp

.nf
interval_bounds right() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'17.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "17." 4.2
.\}

.sp

.nf
interval_bounds reverse_left() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'18.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "18." 4.2
.\}

.sp

.nf
interval_bounds reverse_right() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'19.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "19." 4.2
.\}

.sp

.nf
bound_type bits() const;
.fi

.RE

.SS "interval_bounds public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static interval_bounds open();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static interval_bounds left_open();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
static interval_bounds right_open();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
static interval_bounds closed();
.fi

.RE


