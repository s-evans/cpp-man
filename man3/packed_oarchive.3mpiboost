.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS PACKED_OARCH" 3 "" "" ""
.SH "NAME"
boost::mpi::packed_oarchive \- An archive that packs binary data into an MPI buffer\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/mpi/packed_oarchive\&.hpp>


class packed_oarchive : public oprimitive {
public:
  // construct/copy/destruct
  packed_oarchive(MPI_Comm const &, buffer_type &, 
                  unsigned int = boost::archive::no_header);
  packed_oarchive(MPI_Comm const &, unsigned int = boost::archive::no_header);

  // public member functions
  template<typename T> void save_override(T const &, mpl::false_);
  template<typename T> void save_override(T const &, mpl::true_);
  template<typename T> void save_override(T const &);
  void save_override(const archive::class_id_optional_type &);
  void save_override(const archive::class_name_type &);
  void save_override(const archive::class_id_type &);
  void save_override(const archive::version_type &);
};
.fi
.SH "DESCRIPTION"
.PP
The
packed_iarchive
class is an Archiver (as in the Boost\&.Serialization library) that packs binary data into a buffer for transmission via MPI\&. It can operate on any Serializable data type and will use the
MPI_Pack
function of the underlying MPI implementation to perform serialization\&.
.SS "packed_oarchive public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
packed_oarchive(MPI_Comm const & comm, buffer_type & b, 
                unsigned int flags = boost::archive::no_header);
.fi

.sp
Construct a
packed_oarchive
for transmission over the given MPI communicator and with an initial buffer\&.
.sp

.PP
Parameters:
.RS 4
.PP
b
.RS 4
A user\-defined buffer that will be filled with the binary representation of serialized objects\&.
.RE
.PP
comm
.RS 4
The communicator over which this archive will be sent\&.
.RE
.PP
flags
.RS 4
Control the serialization of the data types\&. Refer to the Boost\&.Serialization documentation before changing the default flags\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
packed_oarchive(MPI_Comm const & comm, 
                unsigned int flags = boost::archive::no_header);
.fi

.sp
Construct a
packed_oarchive
for transmission over the given MPI communicator\&.
.sp

.PP
Parameters:
.RS 4
.PP
comm
.RS 4
The communicator over which this archive will be sent\&.
.RE
.PP
flags
.RS 4
Control the serialization of the data types\&. Refer to the Boost\&.Serialization documentation before changing the default flags\&.
.RE
.RE
.RE

.SS "packed_oarchive public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T> void save_override(T const & x, mpl::false_);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename T> void save_override(T const & x, mpl::true_);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename T> void save_override(T const & x);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
void save_override(const archive::class_id_optional_type &);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
void save_override(const archive::class_name_type & t);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void save_override(const archive::class_id_type & t);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void save_override(const archive::version_type & t);
.fi

.RE


