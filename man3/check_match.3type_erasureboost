.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION CHECK_MAT" 3 "" "" ""
.SH "NAME"
boost::type_erasure::check_match
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_erasure/check_match\&.hpp>


template<typename Concept, typename Op, class\&.\&.\&. U> 
  bool check_match(const binding< Concept > & binding, const Op & f, 
                   U &&\&.\&.\&. args);
template<typename Op, class\&.\&.\&. U> bool check_match(const Op & f, U &&\&.\&.\&. args);
.fi
.SH "DESCRIPTION"
.PP
If
relaxed
is in
Concept, checks whether the arguments to
f
match the types specified by
binding\&. If
relaxed
is not in
Concept, returns true\&. If
binding
is not specified, it will be deduced from the arguments\&.

