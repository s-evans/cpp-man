.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::log::attribute_value_ordering \- Ordering predicate, based on attribute values associated with records\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/record_ordering\&.hpp>

template<typename ValueT, typename FunT = less> 
class attribute_value_ordering : private FunT {
public:
  // types
  typedef bool   result_type;  // Result type\&. 
  typedef ValueT value_type;   // Compared attribute value type\&. 

  // member classes/structs/unions

  struct l1_visitor {
    // types
    typedef void result_type;

    // construct/copy/destruct
    l1_visitor(attribute_value_ordering const &, record_view const &, bool &);

    // public member functions
    template<typename LeftT> result_type operator()(LeftT const &) const;
  };
  template<typename LeftT> 
  struct l2_visitor {
    // types
    typedef void result_type;

    // construct/copy/destruct
    l2_visitor(FunT const &, LeftT const &, bool &);

    // public member functions
    template<typename RightT> result_type operator()(RightT const &) const;
  };

  // construct/copy/destruct
  explicit attribute_value_ordering(attribute_name const &, 
                                    FunT const & = FunT());

  // public member functions
  result_type operator()(record_view const &, record_view const &) const;
};
.fi
.SH "DESCRIPTION"
.PP
This predicate allows to order log records based on values of a specifically named attribute associated with them\&. Two given log records being compared should both have the specified attribute value of the specified type to be able to be ordered properly\&. As a special case, if neither of the records have the value, these records are considered equivalent\&. Otherwise, the ordering results are unspecified\&.
.SS "attribute_value_ordering public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit attribute_value_ordering(attribute_name const & name, 
                                  FunT const & fun = FunT());
.fi

.sp
Initializing constructor\&.
.sp

.PP
Parameters:
.RS 4
.PP
fun
.RS 4
The ordering functor
.RE
.PP
name
.RS 4
The attribute value name to be compared
.RE
.RE
.RE

.SS "attribute_value_ordering public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()(record_view const & left, record_view const & right) const;
.fi

.sp
Ordering operator
.RE


