.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE DE" 3 "" "" ""
.SH "NAME"
boost::interprocess::deleter
.SH "SYNOPSIS"
.\" pointer: Class template deleter
.\" Class template deleter: pointer
.\" deleter: Class template deleter
.\" Class template deleter: deleter

.sp
.nf
// In header: <boost/interprocess/smart_ptr/deleter\&.hpp>

template<typename T, typename SegmentManager> 
class deleter {
public:
  // types
  typedef boost::intrusive::pointer_traits< typename SegmentManager::void_pointer >::template rebind_pointer< T >::type pointer;

  // construct/copy/destruct
  deleter(segment_manager_pointer);

  // public member functions
  void operator()(const pointer &);
};
.fi
.SH "DESCRIPTION"
.PP
A deleter that uses the segment manager\'s destroy_ptr function to destroy the passed pointer resource\&.
.PP
This deleter is used
.SS "deleter public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
deleter(segment_manager_pointer pmngr);
.fi

.RE

.SS "deleter public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void operator()(const pointer & p);
.fi

.RE


