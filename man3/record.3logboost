.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS RECORD" 3 "" "" ""
.SH "NAME"
boost::log::record \- Logging record class\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/core/record\&.hpp>


class record {
public:
  // construct/copy/destruct
  record();
  record(record &&) noexcept;
  record & operator=(record &&) noexcept;
  ~record();

  // public member functions
  attribute_value_set & attribute_values() noexcept;
  attribute_value_set const & attribute_values() const noexcept;
  explicit operator bool() const noexcept;
  bool operator!() const noexcept;
  void swap(record &) noexcept;
  void reset() noexcept;
  attribute_value_set::mapped_type 
  operator[](attribute_value_set::key_type) const;
  template<typename DescriptorT, template< typename > class ActorT> 
    result_of::extract< typename expressions::attribute_keyword< DescriptorT, ActorT >::value_type, DescriptorT >::type 
    operator[](expressions::attribute_keyword< DescriptorT, ActorT > const &) const;
  record_view lock();
};
.fi
.SH "DESCRIPTION"
.PP
The logging record encapsulates all information related to a single logging statement, in particular, attribute values view and the log message string\&. The record can be updated before pushing for further processing to the logging core\&.
.SS "record public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
record();
.fi

.sp
Default constructor\&. Creates an empty record that is equivalent to the invalid record handle\&.
.sp

.PP
Postconditions:
.RS 4
!*this == true
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
record(record && that) noexcept;
.fi

.sp
Move constructor\&. Source record contents unspecified after the operation\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
record & operator=(record && that) noexcept;
.fi

.sp
Move assignment\&. Source record contents unspecified after the operation\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
~record();
.fi

.sp
Destructor\&. Destroys the record, releases any sinks and attribute values that were involved in processing this record\&.
.RE

.SS "record public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
attribute_value_set & attribute_values() noexcept;
.fi

.sp

.PP
Requires:
.RS 4
!!*this
.RE
.PP
Returns:
.RS 4
A reference to the set of attribute values attached to this record
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
attribute_value_set const & attribute_values() const noexcept;
.fi

.sp

.PP
Requires:
.RS 4
!!*this
.RE
.PP
Returns:
.RS 4
A reference to the set of attribute values attached to this record
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
explicit operator bool() const noexcept;
.fi

.sp
Conversion to an unspecified boolean type
.sp

.PP
Returns:
.RS 4
true, if the
*this
identifies a log record,
false, if the
*this
is not valid
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
bool operator!() const noexcept;
.fi

.sp
Inverted conversion to an unspecified boolean type
.sp

.PP
Returns:
.RS 4
false, if the
*this
identifies a log record,
true, if the
*this
is not valid
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
void swap(record & that) noexcept;
.fi

.sp
Swaps two handles
.sp

.PP
Parameters:
.RS 4
.PP
that
.RS 4
Another record to swap with
\fBThrows:\fR
Nothing
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void reset() noexcept;
.fi

.sp
Resets the log record handle\&. If there are no other handles left, the log record is closed and all resources referenced by the record are released\&.
.sp

.PP
Postconditions:
.RS 4
!*this == true
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
attribute_value_set::mapped_type 
operator[](attribute_value_set::key_type name) const;
.fi

.sp
Attribute value lookup\&.
.sp

.PP
Parameters:
.RS 4
.PP
name
.RS 4
Attribute name\&.
.RE
.RE
.PP
Returns:
.RS 4
An
attribute_value, non\-empty if it is found, empty otherwise\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
template<typename DescriptorT, template< typename > class ActorT> 
  result_of::extract< typename expressions::attribute_keyword< DescriptorT, ActorT >::value_type, DescriptorT >::type 
  operator[](expressions::attribute_keyword< DescriptorT, ActorT > const & keyword) const;
.fi

.sp
Attribute value lookup\&.
.sp

.PP
Parameters:
.RS 4
.PP
keyword
.RS 4
Attribute keyword\&.
.RE
.RE
.PP
Returns:
.RS 4
A
value_ref
with extracted attribute value if it is found, empty
value_ref
otherwise\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
record_view lock();
.fi

.sp
The function ensures that the log record does not depend on any thread\-specific data\&. Then the record contents are used to construct a
record_view
which is returned from the function\&. The record is no longer valid after the call\&.
.sp

.PP
Requires:
.RS 4
!!*this
.RE
.PP
Postconditions:
.RS 4
!*this
.RE
.PP
Returns:
.RS 4
The record view that contains all attribute values from the original record\&.
.RE
.RE


