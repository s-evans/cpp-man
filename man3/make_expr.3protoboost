.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION MAKE_EXPR" 3 "" "" ""
.SH "NAME"
boost::proto::make_expr \- Construct an expression of the requested tag type with a domain and with the specified arguments as children\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/make_expr\&.hpp>


template<typename Tag, typename\&.\&.\&. A> 
  typename proto::result_of::make_expr<Tag, A const\&.\&.\&.>::type const 
  make_expr(A const &\&.\&.\&. a);
template<typename Tag, typename Domain, typename\&.\&.\&. A> 
  typename proto::result_of::make_expr<Tag, Domain, A const\&.\&.\&.>::type const 
  make_expr(A const &\&.\&.\&. a);
.fi
.SH "DESCRIPTION"
.PP
This function template may be invoked either with or without specifying a
Domain
template parameter\&. If no domain is specified, the domain is deduced by examining domains of the given arguments\&. See
proto::deduce_domain
for a full description of the procedure used\&.
.PP
Let
\fIWRAP\fR(x)
be defined such that:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
x
is a
boost::reference_wrapper<>,
\fIWRAP\fR(x)
is equivalent to
proto::as_child<Domain>(x\&.get())\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise,
\fIWRAP\fR(x)
is equivalent to
proto::as_expr<Domain>(x)\&.
.RE
.sp
.RE

.PP
If
proto::wants_basic_expr<typename Domain::proto_generator>::value
is true, then let
\fIE\fR
be
proto::basic_expr; otherwise, let
\fIE\fR
be
proto::expr\&.
.PP
Let
\fIMAKE\fR(Tag, b\&.\&.\&.)
be defined as
\fIE\fR<Tag, proto::listN<decltype(b)\&.\&.\&.> >::make(b\&.\&.\&.)\&.
.PP
If
Tag
is
proto::tag::terminal, then return
\fIWRAP\fR(a0)\&.
.PP
Otherwise, return
Domain()(\fIMAKE\fR(Tag, \fIWRAP\fR(a)\&.\&.\&.))\&.

