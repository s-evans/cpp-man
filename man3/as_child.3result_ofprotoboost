.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::proto::result_of::as_child \- A metafunction that computes the return type of the proto::as_child() function\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/traits\&.hpp>

template<typename T, typename Domain = proto::default_domain> 
struct as_child {
  // types
  typedef typename Domain::template as_child< T >::result_type type;
};
.fi
.SH "DESCRIPTION"
.PP
The
proto::result_of::as_child<>
metafunction turns types into Proto expression types, if they are not already, in a domain\-specific way\&. It is used by Proto to compute the type of an object to store as a child in another expression node\&.
.PP
See
proto::domain::as_child<>
for a complete description of the default behavior\&.

