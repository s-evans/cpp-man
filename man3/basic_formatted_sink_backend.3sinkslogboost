.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT" 3 "" "" ""
.SH "NAME"
boost::log::sinks::basic_formatted_sink_backend \- A base class for a logging sink backend with message formatting support\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/basic_sink_backend\&.hpp>

template<typename CharT, 
         typename FrontendRequirementsT = synchronized_feeding> 
struct basic_formatted_sink_backend : public basic_sink_backend< combine_requirements< FrontendRequirementsT, formatted_records >::type >
{
  // types
  typedef CharT                            char_type;              // Character type\&. 
  typedef std::basic_string< char_type >   string_type;            // Formatted string type\&. 
  typedef base_type::frontend_requirements frontend_requirements;  // Frontend requirements\&. 
};
.fi
.SH "DESCRIPTION"
.PP
The
basic_formatted_sink_backend
class template indicates to the frontend that the backend requires logging record formatting\&.
.PP
The class allows to request encoding conversion in case if the sink backend requires the formatted string in some particular encoding (e\&.g\&. if underlying API supports only narrow or wide characters)\&. In order to perform conversion one should specify the desired final character type in the
TargetCharT
template parameter\&.

