.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION FLATTEN" 3 "" "" ""
.SH "NAME"
boost::proto::flatten \- A function that returns a "flattened" view of a Proto expression tree\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/fusion\&.hpp>


template<typename Expr> 
  typename proto::result_of::flatten< Expr >::type const flatten(Expr & expr);
template<typename Expr> 
  typename proto::result_of::flatten< Expr const >::type const 
  flatten(Expr const & expr);
.fi
.SH "DESCRIPTION"
.PP
For a tree with a top\-most node tag of type
T, the elements of the flattened sequence are determined by recursing into each child node with the same tag type and returning those nodes of different type\&. So for instance, the Proto expression tree corresponding to the expression
a | b | c
has a flattened view with elements [a, b, c], even though the tree is grouped as
((a | b) | c)\&.
.PP
The returned view is a Fusion Forward Sequence\&.

