.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS NEW_ALLOCA" 3 "" "" ""
.SH "NAME"
boost::container::new_allocator<void> \- Specialization of new_allocator for void types\&.
.SH "SYNOPSIS"
.\" value_type: Class new_allocator<void>
.\" Class new_allocator<void>: value_type
.\" swap: Class new_allocator<void>
.\" Class new_allocator<void>: swap
.\" rebind: Class new_allocator<void>
.\" Class new_allocator<void>: rebind
.\" propagate_on_container_move_assignment: Class new_allocator<void>
.\" Class new_allocator<void>: propagate_on_container_move_assignment
.\" pointer: Class new_allocator<void>
.\" Class new_allocator<void>: pointer
.\" other: Class new_allocator<void>
.\" Class new_allocator<void>: other
.\" new_allocator: Class new_allocator<void>
.\" Class new_allocator<void>: new_allocator
.\" is_always_equal: Class new_allocator<void>
.\" Class new_allocator<void>: is_always_equal
.\" const_pointer: Class new_allocator<void>
.\" Class new_allocator<void>: const_pointer

.sp
.nf
// In header: <boost/container/new_allocator\&.hpp>


class new_allocator<void> {
public:
  // types
  typedef void                   value_type;                            
  typedef void *                 pointer;                               
  typedef const void *           const_pointer;                         
  typedef implementation_defined propagate_on_container_move_assignment;  // A integral constant of type bool with value true\&. 
  typedef implementation_defined is_always_equal;                         // A integral constant of type bool with value true\&. 

  // member classes/structs/unions
  template<typename T2> 
  struct rebind {
    // types
    typedef new_allocator< T2 > other;
  };

  // construct/copy/destruct
  new_allocator() noexcept;
  new_allocator(const new_allocator &) noexcept;
  template<typename T2> new_allocator(const new_allocator< T2 > &) noexcept;

  // friend functions
  friend void swap(new_allocator &, new_allocator &) noexcept;
  friend bool operator==(const new_allocator &, const new_allocator &) noexcept;
  friend bool operator!=(const new_allocator &, const new_allocator &) noexcept;
};
.fi
.SH "DESCRIPTION"
.SS "new_allocator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
new_allocator() noexcept;
.fi

.sp
Default constructor Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
new_allocator(const new_allocator &) noexcept;
.fi

.sp
Constructor from other
new_allocator\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename T2> new_allocator(const new_allocator< T2 > &) noexcept;
.fi

.sp
Constructor from related
new_allocator\&. Never throws
.RE

.SS "new_allocator friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" swap: Class new_allocator<void>
.\" Class new_allocator<void>: swap

.sp

.nf
friend void swap(new_allocator &, new_allocator &) noexcept;
.fi

.sp
Swaps two allocators, does nothing because this
new_allocator
is stateless
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
friend bool operator==(const new_allocator &, const new_allocator &) noexcept;
.fi

.sp
An
new_allocator
always compares to true, as memory allocated with one instance can be deallocated by another instance
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator!=(const new_allocator &, const new_allocator &) noexcept;
.fi

.sp
An
new_allocator
always compares to false, as memory allocated with one instance can be deallocated by another instance
.RE


