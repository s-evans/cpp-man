.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TE" 3 "" "" ""
.SH "NAME"
boost::log::sinks::basic_text_ostream_backend \- An implementation of a text output stream logging sink backend\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/text_ostream_backend\&.hpp>

template<typename CharT> 
class basic_text_ostream_backend : public basic_formatted_sink_backend< CharT, combine_requirements< synchronized_feeding, flushing >::type >
{
public:
  // types
  typedef base_type::char_type            char_type;    // Character type\&. 
  typedef base_type::string_type          string_type;  // String type to be used as a message text holder\&. 
  typedef std::basic_ostream< char_type > stream_type;  // Output stream type\&. 

  // construct/copy/destruct
  basic_text_ostream_backend();
  ~basic_text_ostream_backend();

  // public member functions
  void add_stream(shared_ptr< stream_type > const &);
  void remove_stream(shared_ptr< stream_type > const &);
  void auto_flush(bool = true);
  void consume(record_view const &, string_type const &);
  void flush();
};
.fi
.SH "DESCRIPTION"
.PP
The sink backend puts formatted log records to one or more text streams\&.
.SS "basic_text_ostream_backend public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_text_ostream_backend();
.fi

.sp
Constructor\&. No streams attached to the constructed backend, auto flush feature disabled\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~basic_text_ostream_backend();
.fi

.sp
Destructor
.RE

.SS "basic_text_ostream_backend public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void add_stream(shared_ptr< stream_type > const & strm);
.fi

.sp
The method adds a new stream to the sink\&.
.sp

.PP
Parameters:
.RS 4
.PP
strm
.RS 4
Pointer to the stream\&. Must not be NULL\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void remove_stream(shared_ptr< stream_type > const & strm);
.fi

.sp
The method removes a stream from the sink\&. If the stream is not attached to the sink, the method has no effect\&.
.sp

.PP
Parameters:
.RS 4
.PP
strm
.RS 4
Pointer to the stream\&. Must not be NULL\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void auto_flush(bool f = true);
.fi

.sp
Sets the flag to automatically flush buffers of all attached streams after each log record
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
void consume(record_view const & rec, string_type const & formatted_message);
.fi

.sp
The method writes the message to the sink
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
void flush();
.fi

.sp
The method flushes the associated streams
.RE


