.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::log::expressions::format_terminal \- Template expressions terminal node with Boost\&.Format\-like formatter\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/expressions/formatters/format\&.hpp>

template<typename CharT> 
class format_terminal {
public:
  // types
  typedef void                           _is_boost_log_terminal;  // Internal typedef for type categorization\&. 
  typedef CharT                          char_type;               // Character type\&. 
  typedef \fIunspecified\fR                    format_type;             // Boost\&.Format formatter type\&. 
  typedef std::basic_string< char_type > string_type;             // String type\&. 
  typedef format_type::pump              result_type;             // Terminal result type\&. 

  // construct/copy/destruct
  explicit format_terminal(const char_type *);
  format_terminal() = delete;

  // public member functions
  template<typename ContextT> result_type operator()(ContextT const &) const;
};
.fi
.SH "DESCRIPTION"
.SS "format_terminal public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit format_terminal(const char_type * format);
.fi

Initializing constructor\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
format_terminal() = delete;
.fi

.RE

.SS "format_terminal public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename ContextT> result_type operator()(ContextT const & ctx) const;
.fi

Invokation operator\&. .RE


