.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE CA" 3 "" "" ""
.SH "NAME"
boost::log::type_dispatcher::callback
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/type_dispatch/type_dispatcher\&.hpp>


template<typename T> 
class callback {
public:

  // public member functions
  void operator()(T const &) const;
  explicit operator bool() const noexcept;
  bool operator!() const noexcept;
};
.fi
.SH "DESCRIPTION"
.PP
This interface is used by type dispatchers to consume the dispatched value\&.
.SS "callback public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void operator()(T const & value) const;
.fi

.sp
The operator invokes the visitor\-specific logic with the given value
.sp

.PP
Parameters:
.RS 4
.PP
value
.RS 4
The dispatched value
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit operator bool() const noexcept;
.fi

.sp
The operator checks if the visitor is attached to a receiver
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
bool operator!() const noexcept;
.fi

.sp
The operator checks if the visitor is not attached to a receiver
.RE


