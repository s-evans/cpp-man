.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION AS_CHILD" 3 "" "" ""
.SH "NAME"
boost::proto::as_child \- A function that wraps non\-Proto objects in Proto terminals (by reference) and leaves Proto expression types alone\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/traits\&.hpp>


template<typename T> 
  typename proto::result_of::as_child< T >::type as_child(T & t);
template<typename T> 
  typename proto::result_of::as_child< T const >::type as_child(T const & t);
template<typename Domain, typename T> 
  typename proto::result_of::as_child< T, Domain >::type as_child(T & t);
template<typename Domain, typename T> 
  typename proto::result_of::as_child< T const, Domain >::type 
  as_child(T const & t);
.fi
.SH "DESCRIPTION"
.PP
The
proto::as_child()
function returns Proto expression objects that are suitable for storage as child nodes in an expression tree\&. It turns non\-Proto objects into Proto terminals\&. Its behavior is domain\-specific\&. By default, non\-Proto types are held wrapped by reference in a new Proto terminal expression, and objects that are already Proto expressions are simply returned by reference\&.
.PP
If
Domain
is not explicitly specified, it is assumed to be
proto::default_domain\&.
.PP
See
proto::domain::as_child<>
for a complete description of this function\'s default behavior\&.
.PP
Returns:
.RS 4
typename Domain::template as_child< T >()(t).RE

