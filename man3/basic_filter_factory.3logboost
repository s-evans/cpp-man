.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::log::basic_filter_factory
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/setup/filter_parser\&.hpp>

template<typename CharT, typename AttributeValueT> 
class basic_filter_factory : public boost::log::filter_factory< CharT > {
public:
  // types
  typedef AttributeValueT        value_type;   // The type(s) of the attribute value expected\&. 
  typedef base_type::string_type string_type;

  // public member functions
  virtual filter on_exists_test(attribute_name const &);
  virtual filter 
  on_equality_relation(attribute_name const &, string_type const &);
  virtual filter 
  on_inequality_relation(attribute_name const &, string_type const &);
  virtual filter on_less_relation(attribute_name const &, string_type const &);
  virtual filter 
  on_greater_relation(attribute_name const &, string_type const &);
  virtual filter 
  on_less_or_equal_relation(attribute_name const &, string_type const &);
  virtual filter 
  on_greater_or_equal_relation(attribute_name const &, string_type const &);
  virtual filter 
  on_custom_relation(attribute_name const &, string_type const &, 
                     string_type const &);
  virtual value_type parse_argument(string_type const &);
};
.fi
.SH "DESCRIPTION"
.PP
The base class for filter factories\&. The class defines default implementations for most filter expressions\&. In order to be able to construct filters, the attribute value type must support reading from a stream\&. Also, the default filters will rely on relational operators for the type, so these operators must also be defined\&.
.SS "basic_filter_factory public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual filter on_exists_test(attribute_name const & name);
.fi

.sp
The callback for filter for the attribute existence test
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
virtual filter 
on_equality_relation(attribute_name const & name, string_type const & arg);
.fi

.sp
The callback for equality relation filter
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
virtual filter 
on_inequality_relation(attribute_name const & name, string_type const & arg);
.fi

.sp
The callback for inequality relation filter
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
virtual filter 
on_less_relation(attribute_name const & name, string_type const & arg);
.fi

.sp
The callback for less relation filter
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
virtual filter 
on_greater_relation(attribute_name const & name, string_type const & arg);
.fi

.sp
The callback for greater relation filter
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
virtual filter 
on_less_or_equal_relation(attribute_name const & name, 
                          string_type const & arg);
.fi

.sp
The callback for less or equal relation filter
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
virtual filter 
on_greater_or_equal_relation(attribute_name const & name, 
                             string_type const & arg);
.fi

.sp
The callback for greater or equal relation filter
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
virtual filter 
on_custom_relation(attribute_name const & name, string_type const & rel, 
                   string_type const & arg);
.fi

.sp
The callback for custom relation filter
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
virtual value_type parse_argument(string_type const & arg);
.fi

.sp
The function parses the argument value for a binary relation
.RE


