.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::proto::context::callable_eval \- A BinaryFunction that accepts a Proto expression and a callable context and calls the context with the expression tag and children as arguments, effectively fanning the expression out\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/context/callable\&.hpp>

template<typename Expr, typename Context> 
struct callable_eval {
  // types
  typedef typename boost::result_of<
    Context(
      typename Expr::proto_tag,
      typename proto::result_of::child_c<0>::type,
      \&.\&.\&.
      typename proto::result_of::child_c<N>::type,
    )>::type
   result_type;

  // public member functions
  result_type operator()(Expr &, Context &) const;
};
.fi
.SH "DESCRIPTION"
.PP

proto::context::callable_eval<>
requires that
Context
is a
PolymorphicFunctionObject
that can be invoked with
Expr\'s tag and children as expressions, as follows:

.sp
.if n \{\
.RS 4
.\}
.nf
context(typename Expr::proto_tag(), proto::child_c<0>(expr), \&.\&.\&. proto::child_c<N>(expr))
.fi
.if n \{\
.RE
.\}
.sp

.SS "callable_eval public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()(Expr & expr, Context & context) const;
.fi

.PP
Parameters:
.RS 4
.PP
context
.RS 4
The callable evaluation context
.RE
.PP
expr
.RS 4
The current expression
.RE
.RE
.PP
Returns:
.RS 4

context(typename Expr::proto_tag(), proto::child_c<0>(expr),\&.\&.\&. proto::child_c<N>(expr))
.RE
.RE


