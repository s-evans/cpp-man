.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLA" 3 "" "" ""
.SH "NAME"
boost::accumulators::accumulator_set \- A set of accumulators\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/accumulators/accumulators_fwd\&.hpp>

template<typename Sample, typename Features, typename Weight> 
struct accumulator_set {
  // construct/copy/destruct
  template<typename A1> explicit accumulator_set(A1 const &);

  // public member functions
  template<typename UnaryFunction> void visit(UnaryFunction const &);
  template<typename FilterPred, typename UnaryFunction> 
    void visit_if(UnaryFunction const &);
  void operator()();
  template<typename A1> void operator()(A1 const &);
  template<typename Feature> apply< Feature >::type & extract();
  template<typename Feature> apply< Feature >::type const & extract() const;
  template<typename Feature> void drop();
};
.fi
.SH "DESCRIPTION"
.PP
accumulator_set
resolves the dependencies between features and ensures that the accumulators in the set are updated in the proper order\&.
.PP
acccumulator_set provides a general mechanism to visit the accumulators in the set in order, with or without a filter\&. You can also fetch a reference to an accumulator that corresponds to a feature\&.
.SS "accumulator_set public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename A1> explicit accumulator_set(A1 const & a1);
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.sp

.PP
Parameters:
.RS 4
.PP
a1
.RS 4
Optional named parameter to be passed to all the accumulators
.RE
.RE
.RE

.SS "accumulator_set public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename UnaryFunction> void visit(UnaryFunction const & func);
.fi

.sp
Visitation
.PP
Parameters:
.RS 4
.PP
func
.RS 4
UnaryFunction which is invoked with each accumulator in turn\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename FilterPred, typename UnaryFunction> 
  void visit_if(UnaryFunction const & func);
.fi

.sp
Conditional visitation
.PP
Parameters:
.RS 4
.PP
func
.RS 4
UnaryFunction which is invoked with each accumulator in turn, provided the accumulator satisfies the MPL predicate FilterPred\&.
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void operator()();
.fi

.sp
Accumulation
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename A1> void operator()(A1 const & a1);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename Feature> apply< Feature >::type & extract();
.fi

Extraction\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
template<typename Feature> apply< Feature >::type const & extract() const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename Feature> void drop();
.fi

Drop\&. .RE


