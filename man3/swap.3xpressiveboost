.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::xpressive::swap \- Swaps the contents of two basic_regex objects\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/basic_regex\&.hpp>


template<typename BidiIter> 
  void swap(basic_regex< BidiIter > & left, basic_regex< BidiIter > & right);
.fi
.SH "DESCRIPTION"
.PP

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
This is a shallow swap that does not do reference tracking\&. If you embed a
basic_regex
object by reference in another regular expression and then swap its contents with another
basic_regex
object, the change will not be visible to the enclosing regular expression\&. It is done this way to ensure that swap() cannot throw\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
left
.RS 4
The first
basic_regex
object\&.
.RE
.PP
right
.RS 4
The second
basic_regex
object\&.
.RE
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE

