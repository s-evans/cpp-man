.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::proto::is_callable \- Boolean metafunction which tells whether a type is a callable PolymorphicFunctionObject or not\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/traits\&.hpp>

template<typename T> 
struct is_callable :  mpl::bool_<\fItrue\-or\-false\fR> {
};
.fi
.SH "DESCRIPTION"
.PP

proto::is_callable<>
is used by the
proto::when<>
transform to determine whether a function type
R(A1,\&.\&.\&.An)
is a
CallableTransform
or an
ObjectTransform\&. The former are evaluated using
proto::call<>
and the later with
proto::make<>\&. If
proto::is_callable<R>::value
is
true, the function type is a
CallableTransform; otherwise, it is an
ObjectTransform\&.
.PP
Unless specialized for a type
T,
proto::is_callable<T>::value
is computed as follows:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is a template type
X<Y0,\&.\&.\&.Yn>, where all
Yx
are types for
x
in
[0,n],
proto::is_callable<T>::value
is
boost::is_same<Yn, proto::callable>::value\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is derived from
proto::callable,
proto::is_callable<T>::value
is
true\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise,
proto::is_callable<T>::value
is
false\&.
.RE
.sp
.RE


