.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "TYPE STYLE_T" 3 "" "" ""
.SH "NAME"
boost::program_options::command_line_style::style_t
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/cmdline\&.hpp>


enum style_t { allow_long = = 1, allow_short = = allow_long << 1, 
               allow_dash_for_short = = allow_short << 1, 
               allow_slash_for_short = = allow_dash_for_short << 1, 
               long_allow_adjacent = = allow_slash_for_short << 1, 
               long_allow_next = = long_allow_adjacent << 1, 
               short_allow_adjacent = = long_allow_next << 1, 
               short_allow_next = = short_allow_adjacent << 1, 
               allow_sticky = = short_allow_next << 1, 
               allow_guessing = = allow_sticky << 1, 
               long_case_insensitive = = allow_guessing << 1, 
               short_case_insensitive = = long_case_insensitive << 1, 
               case_insensitive = = (long_case_insensitive | short_case_insensitive), 
               allow_long_disguise = = short_case_insensitive << 1, 
               unix_style = = (allow_short | short_allow_adjacent | short_allow_next
                      | allow_long | long_allow_adjacent | long_allow_next
                      | allow_sticky | allow_guessing 
                      | allow_dash_for_short), 
               default_style = = unix_style };
.fi
.SH "DESCRIPTION"
.PP
Various possible styles of options\&.
.PP
There are "long" options, which start with "\-\-" and "short", which start with either "\-" or "/"\&. Both kinds can be allowed or disallowed, see allow_long and allow_short\&. The allowed character for short options is also configurable\&.
.PP
Option\'s value can be specified in the same token as name ("\-\-foo=bar"), or in the next token\&.
.PP
It\'s possible to introduce long options by the same character as short options, see allow_long_disguise\&.
.PP
Finally, guessing (specifying only prefix of option) and case insensitive processing are supported\&.
.PP
allow_long
.RS 4
Allow "\-\-long_name" style\&. .RE
.PP
allow_short
.RS 4
Allow "\-<single character" style\&. .RE
.PP
allow_dash_for_short
.RS 4
Allow "\-" in short options\&. .RE
.PP
allow_slash_for_short
.RS 4
Allow "/" in short options\&. .RE
.PP
long_allow_adjacent
.RS 4
Allow option parameter in the same token for long option, like in \-\-foo=10
.RE
.PP
long_allow_next
.RS 4
Allow option parameter in the next token for long options\&.
.RE
.PP
short_allow_adjacent
.RS 4
Allow option parameter in the same token for short options\&.
.RE
.PP
short_allow_next
.RS 4
Allow option parameter in the next token for short options\&.
.RE
.PP
allow_sticky
.RS 4
Allow to merge several short options together, so that "\-s \-k" become "\-sk"\&. All of the options but last should accept no parameter\&. For example, if "\-s" accept a parameter, then "k" will be taken as parameter, not another short option\&. Dos\-style short options cannot be sticky\&.
.RE
.PP
allow_guessing
.RS 4
Allow abbreviated spellings for long options, if they unambiguously identify long option\&. No long option name should be prefix of other long option name if guessing is in effect\&.
.RE
.PP
long_case_insensitive
.RS 4
Ignore the difference in case for long options\&.
.RE
.PP
short_case_insensitive
.RS 4
Ignore the difference in case for short options\&.
.RE
.PP
case_insensitive
.RS 4
Ignore the difference in case for all options\&.
.RE
.PP
allow_long_disguise
.RS 4
Allow long options with single option starting character, e\&.g
\-foo=10
.RE
.PP
unix_style
.RS 4
The more\-or\-less traditional unix style\&.
.RE
.PP
default_style
.RS 4
The default style\&.
.RE

