.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION SPLIT_UNIX" 3 "" "" ""
.SH "NAME"
boost::program_options::split_unix
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/parsers\&.hpp>


BOOST_PROGRAM_OPTIONS_DECL std::vector< std::string > 
split_unix(const std::string & cmdline, const std::string & seperator = " \et", 
           const std::string & quote = "\'\e"", 
           const std::string & escape = "\e\e");
BOOST_PROGRAM_OPTIONS_DECL std::vector< std::wstring > 
split_unix(const std::wstring & cmdline, 
           const std::wstring & seperator = L" \et", 
           const std::wstring & quote = L"\'\e"", 
           const std::wstring & escape = L"\e\e");
.fi
.SH "DESCRIPTION"
.PP
Splits a given string to a collection of single strings which can be passed to command_line_parser\&. The second parameter is used to specify a collection of possible seperator chars used for splitting\&. The seperator is defaulted to space " "\&. Splitting is done in a unix style way, with respect to quotes \'"\' and escape characters \'\e\'

