.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMP" 3 "" "" ""
.SH "NAME"
boost::log::parse_filter
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/setup/filter_parser\&.hpp>


template<typename CharT> filter parse_filter(const CharT * str);
.fi
.SH "DESCRIPTION"
.PP
The function parses a filter from the string
.PP

\fBThrows:\fR
An
std::exception\-based exception, if a filter cannot be recognized in the character sequence\&.
.PP
Parameters:
.RS 4
.PP
str
.RS 4
A string that contains filter description\&.
.RE
.RE
.PP
Requires:
.RS 4
str != NULL,
str
points to a zero\-terminated string\&.
.RE
.PP
Returns:
.RS 4
A function object that can be used as a filter\&.
.RE

