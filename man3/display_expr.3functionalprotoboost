.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT DISPLAY_EXPR" 3 "" "" ""
.SH "NAME"
boost::proto::functional::display_expr \- Pretty\-print a Proto expression tree\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/debug\&.hpp>


struct display_expr {
  // types
  typedef void result_type;

  // construct/copy/destruct
  display_expr(std::ostream & = std::cout, int = 0);

  // public member functions
  template<typename Expr> void operator()(Expr const &) const;
};
.fi
.SH "DESCRIPTION"
.PP
A
PolymorphicFunctionObject
which accepts a Proto expression tree and pretty\-prints it to an
ostream
for debugging purposes\&.
.SS "display_expr public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
display_expr(std::ostream & sout = std::cout, int depth = 0);
.fi

.PP
Parameters:
.RS 4
.PP
depth
.RS 4
The starting indentation depth for this node\&. Children nodes will be displayed at a starting depth of
depth+4\&.
.RE
.PP
sout
.RS 4
The
ostream
to which the expression tree will be written\&.
.RE
.RE
.RE

.SS "display_expr public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Expr> void operator()(Expr const & expr) const;
.fi

.RE


