.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE IM" 3 "" "" ""
.SH "NAME"
boost::proto::make::impl
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/make\&.hpp>


template<typename Expr, typename State, typename Data> 
struct impl :  proto::transform_impl< Expr, State, Data > {
  // types
  typedef \fIsee\fR\fI\-\fR\fIbelow\fR result_type;

  // public member functions
  result_type operator()(typename impl::expr_param, 
                         typename impl::state_param, 
                         typename impl::data_param) const;
};
.fi
.SH "DESCRIPTION"
.SS "impl public types"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

typedef
\fIsee\fR\fI\-\fR\fIbelow\fR
result_type;
.sp

proto::make<T>::impl<Expr, State, Data>::result_type
is computed as follows:
.sp
If
T
is an
ObjectTransform
of the form
Object(A0,&#8230;An)
or
Object(A0,&#8230;An \&.\&.\&.), then let
O
be the return type
Object\&. Otherwise, let
O
be
T\&. The
result_type
typedef is then computed as follows:
.sp


.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
proto::is_transform<O>::value
is
true, then let the result type be
boost::result_of<proto::when<_, O>(Expr, State, Data)>::type\&. Note that a substitution took place\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

                    If O is a template like
                    proto::noinvoke<S<X0,&#8230;Xn> >,
                    then the result type is calculated as follows:
                    
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
For each
i
in
[0,n], let
Xi\'
be
boost::result_of<proto::make<Xi>(Expr, State, Data)>::type
(which evaluates this procedure recursively)\&. Note that a substitution took place\&. (In this case, Proto merely assumes that a substitution took place for the sake of compile\-time efficiency\&. There would be no reason to use
proto::noinvoke<>
otherwise\&.)
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The result type is
S<X0\',&#8230;Xn\'>\&.
.RE
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

                    If O is a template like
                    S<X0,&#8230;Xn>,
                    then the result type is calculated as follows:
                    
.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
For each
i
in
[0,n], let
Xi\'
be
boost::result_of<proto::make<Xi>(Expr, State, Data)>::type
(which evaluates this procedure recursively)\&. Note whether any substitutions took place during this operation\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If any substitutions took place in the above step and
S<X0\',&#8230;Xn\'>
has a nested
type
typedef, the result type is
S<X0\',&#8230;Xn\'>::type\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise, the result type is
S<X0\',&#8230;Xn\'>\&.
.RE
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

                    Otherwise, the result type is O, and note that no
                    substitution took place\&.
                  .RE
.RS 4

.sp
Note that
proto::when<>
is implemented in terms of
proto::call<>
and
proto::make<>, so the above procedure is evaluated recursively\&.
.RE

.SS "impl public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
result_type operator()(typename impl::expr_param expr, 
                       typename impl::state_param state, 
                       typename impl::data_param data) const;
.fi

.sp

proto::make<T>::impl<Expr,State,Data>::operator()
behaves as follows:
.sp


.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is of the form
O(A0,&#8230;An), then:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
proto::is_aggregate<result_type>::value
is
true, then construct and return an object
that
as follows:

.sp
.if n \{\
.RS 4
.\}
.nf
result_type that = {
  proto::when<_, A0>()(expr, state, data),
  &#8230;
  proto::when<_, An>()(expr, state, data)
};
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise, construct and return an object
that
as follows:

.sp
.if n \{\
.RS 4
.\}
.nf
result_type that(
  proto::when<_, A0>()(expr, state, data),
  &#8230;
  proto::when<_, An>()(expr, state, data)
);
.fi
.if n \{\
.RE
.\}
.sp

.RE
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is of the form
O(A0,&#8230;An \&.\&.\&.), then let
T\'
be
O(A0,&#8230;An\-1, \fIS\fR), where
\fIS\fR
is a type sequence computed from the unpacking expression
An
as described in the reference for
proto::pack\&. Then, return:

.sp
.if n \{\
.RS 4
.\}
.nf
proto::make<T\'>()(expr, state, data)
.fi
.if n \{\
.RE
.\}
.sp

.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise, construct and return an object
that
as follows:

.sp
.if n \{\
.RS 4
.\}
.nf
result_type that = result_type();
.fi
.if n \{\
.RE
.\}
.sp

.RE
.RS 4

.RE


