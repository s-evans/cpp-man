.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION AS_ENV" 3 "" "" ""
.SH "NAME"
boost::proto::as_env \- For ensuring that the given argument is a transform environment\&. If it is not already, it is made one as if by (proto::data = t)\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/transform/env\&.hpp>


template<typename T> 
  typename proto::result_of::as_env<T &>::type as_env(T & t);
template<typename T> 
  typename proto::result_of::as_env<T const &>::type as_env(T const & t);
.fi
.SH "DESCRIPTION"
.PP
See also:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
proto::data_type::operator=.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
proto::functional::as_env::operator().RE
.sp
.RE

.PP
Returns:
.RS 4
proto::functional::as_env()(t).RE

