.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MACRO BOOST_V" 3 "" "" ""
.SH "NAME"
BOOST_VARIANT_ENUM_PARAMS \- Enumerate parameters for use with variant\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/variant/variant_fwd\&.hpp>

BOOST_VARIANT_ENUM_PARAMS(param)
.fi
.SH "DESCRIPTION"
.PP
When variadic templates are available and
BOOST_VARIANT_DO_NOT_USE_VARIADIC_TEMPLATES
is not defined, expands to variadic template list in the following manner:
.sp .if n \{\ .RS 4 .\} .nf BOOST_VARIANT_ENUM_PARAMS(T) => T0, TN\&.\&.\&. BOOST_VARIANT_ENUM_PARAMS(class T) => class T0, class\&.\&.\&. TN BOOST_VARIANT_ENUM_PARAMS(class Something) => class Something0, class\&.\&.\&. SomethingN BOOST_VARIANT_ENUM_PARAMS(typename Something) => typename Something0, typename\&.\&.\&. SomethingN BOOST_VARIANT_ENUM_PARAMS(Something) => Something0, SomethingN\&.\&.\&. BOOST_VARIANT_ENUM_PARAMS(Something) => Something0, SomethingN\&.\&.\&. .fi .if n \{\ .RE .\}
.PP
Otherwise expands to a comma\-separated sequence of length
BOOST_VARIANT_LIMIT_TYPES, where each element in the sequence consists of the concatenation of
\fIparam\fR
with its zero\-based index into the sequence\&. That is,
param ## 0, param ## 1, \&.\&.\&., param ## BOOST_VARIANT_LIMIT_TYPES \- 1\&.
.PP
\fBRationale\fR: This macro greatly simplifies for the user the process of declaring
variant
types in function templates or explicit partial specializations of class templates, as shown in the
tutorial\&.

