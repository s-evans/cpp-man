.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::intrusive::cache_last
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/intrusive/options\&.hpp>

template<bool Enabled> 
struct cache_last {
};
.fi
.SH "DESCRIPTION"
.\" splice_after: Struct template cache_last
.\" Struct template cache_last: splice_after
.\" push_back: Struct template cache_last
.\" Struct template cache_last: push_back
.\" back: Struct template cache_last
.\" Struct template cache_last: back
.PP
If true, slist also stores a pointer to the last element of the singly linked list\&. This allows O(1) swap and splice_after(iterator, slist &) for circular slists and makes possible new functions like push_back(reference) and back()\&.

