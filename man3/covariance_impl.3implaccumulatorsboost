.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLA" 3 "" "" ""
.SH "NAME"
boost::accumulators::impl::covariance_impl \- Covariance Estimator\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/accumulators/statistics_fwd\&.hpp>

template<typename Sample, typename VariateType, typename VariateTag> 
struct covariance_impl : public accumulator_base {
  // construct/copy/destruct
  template<typename Args> covariance_impl(Args const &);

  // public member functions
  template<typename Args> void operator()(Args const &);
  result_type result(dont_care) const;
};
.fi
.SH "DESCRIPTION"
.PP
An iterative Monte Carlo estimator for the covariance
\&\s-2\u[1]\d\s+2[IMAGE]\&\s-2\u[2]\d\s+2 [$\mathrm{Cov}(X,X')$], where
\&\s-2\u[3]\d\s+2[IMAGE]\&\s-2\u[4]\d\s+2 [$X$]
is a sample and
\&\s-2\u[5]\d\s+2[IMAGE]\&\s-2\u[6]\d\s+2 [$X'$]
is a variate, is given by:
.PP
\fBEquation 1.17. \fR \&\s-2\u[7]\d\s+2.sp .RS 4 [IMAGE]\&\s-2\u[8]\d\s+2 \e[ \ehat{c}_n = \efrac{n\-1}{n} \ehat{c}_{n\-1} + \efrac{1}{n\-1}(X_n \- \ehat{\emu}_n)(X_n\' \- \ehat{\emu}_n\'),\equad n\ege2,\equad\ehat{c}_1 = 0, \e] .RE
.PP
\&\s-2\u[9]\d\s+2[IMAGE]\&\s-2\u[10]\d\s+2 [$\hat{\mu}_n$]
and
\&\s-2\u[11]\d\s+2[IMAGE]\&\s-2\u[12]\d\s+2 [$\hat{\mu}_n'$]
being the means of the samples and variates\&.
.SS "covariance_impl public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Args> covariance_impl(Args const & args);
.fi

.RE

.SS "covariance_impl public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Args> void operator()(Args const & args);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
result_type result(dont_care) const;
.fi

.RE


