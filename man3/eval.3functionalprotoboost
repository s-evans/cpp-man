.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT EVAL" 3 "" "" ""
.SH "NAME"
boost::proto::functional::eval \- A PolymorphicFunctionObject type for evaluating a given Proto expression with a given context\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/eval\&.hpp>


struct eval :  proto::callable {
  // member classes/structs/unions
  template<typename This, typename Expr, typename Context> 
  struct result<This(Expr, Context)> :  
    proto::result_of::eval<
      typename boost::remove_reference< Expr >::type, 
      typename boost::remove_reference< Context >::type 
    >
  {
  };

  // public member functions
  template<typename Expr, typename Context> 
    typename proto::result_of::eval< Expr, Context >::type 
    operator()(Expr &, Context &) const;
  template<typename Expr, typename Context> 
    typename proto::result_of::eval< Expr, Context >::type 
    operator()(Expr &, Context const &) const;
};
.fi
.SH "DESCRIPTION"
.SS "eval public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename Expr, typename Context> 
  typename proto::result_of::eval< Expr, Context >::type 
  operator()(Expr & expr, Context & context) const;
.fi

Evaluate a given Proto expression with a given context\&. .PP
Parameters:
.RS 4
.PP
context
.RS 4
The context in which the expression should be evaluated\&.
.RE
.PP
expr
.RS 4
The Proto expression to evaluate\&.
.RE
.RE
.PP
Returns:
.RS 4

typename Context::template eval<Expr>()(expr, context)
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename Expr, typename Context> 
  typename proto::result_of::eval< Expr, Context >::type 
  operator()(Expr & expr, Context const & context) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


