.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEXT_MUL" 3 "" "" ""
.SH "NAME"
boost::log::sinks::text_multifile_backend \- An implementation of a text multiple files logging sink backend\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/text_multifile_backend\&.hpp>


class text_multifile_backend : public basic_formatted_sink_backend< char > {
public:
  // types
  typedef base_type::char_type   char_type;                // Character type\&. 
  typedef base_type::string_type string_type;              // String type to be used as a message text holder\&. 
  typedef \fIunspecified\fR            file_name_composer_type;  // File name composer functor type\&. 

  // construct/copy/destruct
  text_multifile_backend();
  ~text_multifile_backend();

  // public member functions
  template<typename ComposerT> void set_file_name_composer(ComposerT const &);
  void consume(record_view const &, string_type const &);
};
.fi
.SH "DESCRIPTION"
.PP
The sink backend puts formatted log records to one of the text files\&. The particular file is chosen upon each record\'s attribute values, which allows to distribute records into individual files or to group records related to some entity or process in a separate file\&.
.SS "text_multifile_backend public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
text_multifile_backend();
.fi

.sp
Default constructor\&. The constructed sink backend has no file name composer and thus will not write any files\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~text_multifile_backend();
.fi

.sp
Destructor
.RE

.SS "text_multifile_backend public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename ComposerT> 
  void set_file_name_composer(ComposerT const & composer);
.fi

.sp
The method sets file name composer functional object\&. Log record formatters are accepted, too\&.
.sp

.PP
Parameters:
.RS 4
.PP
composer
.RS 4
File name composer functor
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void consume(record_view const & rec, string_type const & formatted_message);
.fi

.sp
The method writes the message to the sink
.RE


