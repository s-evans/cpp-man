.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MACRO BOOST_T" 3 "" "" ""
.SH "NAME"
BOOST_TYPE_ERASURE_MEMBER \- Defines a primitive concept for a member function\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_erasure/member\&.hpp>

BOOST_TYPE_ERASURE_MEMBER(qualified_name, member, N)
.fi
.SH "DESCRIPTION"
.PP
The declaration of the concept is

.sp
.if n \{\
.RS 4
.\}
.nf
template<class Sig, class T = _self>
struct ::namespace1::namespace2::\&.\&.\&.::concept_name;

.fi
.if n \{\
.RE
.\}
.sp
where Sig is a function type giving the signature of the member function, and T is the object type\&. T may be const\-qualified for const member functions\&.
.PP
This macro can only be used in the global namespace\&.
.PP
Example:
.PP

.sp
.if n \{\
.RS 4
.\}
.nf
BOOST_TYPE_ERASURE_MEMBER((boost)(has_push_back), push_back, 1)
typedef boost::has_push_back<void(int), _self> push_back_concept;

.fi
.if n \{\
.RE
.\}

.PP
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
In C++11 the argument N is ignored and may be omitted\&. BOOST_TYPE_ERASURE_MEMBER will always define a variadic concept\&.
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
N
.RS 4
is the number of arguments of the function\&.
.RE
.PP
member
.RS 4
is the name of the member function\&.
.RE
.PP
qualified_name
.RS 4
should be a preprocessor sequence of the form (namespace1)(namespace2)\&.\&.\&.(concept_name)\&.
.RE
.RE

