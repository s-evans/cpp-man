.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPL" 3 "" "" ""
.SH "NAME"
boost::date_time::year_based_generator \- Base class for all generators that take a year and produce a date\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/date_generators\&.hpp>

template<typename date_type> 
class year_based_generator {
public:
  // types
  typedef date_type::calendar_type calendar_type;
  typedef calendar_type::year_type year_type;    

  // construct/copy/destruct
  year_based_generator();
  ~year_based_generator();

  // public member functions
  virtual date_type get_date(year_type) const = 0;
  virtual std::string to_string() const = 0;
};
.fi
.SH "DESCRIPTION"
.PP
This class is a base class for polymorphic function objects that take a year and produce a concrete date\&.
.SS "year_based_generator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
year_based_generator();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~year_based_generator();
.fi

.RE

.SS "year_based_generator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual date_type get_date(year_type y) const = 0;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
virtual std::string to_string() const = 0;
.fi

Returns a string for use in a POSIX time_zone string\&. .RE


