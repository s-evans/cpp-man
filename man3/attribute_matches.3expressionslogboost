.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLA" 3 "" "" ""
.SH "NAME"
boost::log::expressions::attribute_matches
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/expressions/predicates/matches\&.hpp>

template<typename T, typename RegexT, 
         typename FallbackPolicyT = fallback_to_none> 
class attribute_matches {
public:
  // construct/copy/destruct
  attribute_matches(attribute_name const &, RegexT const &);
  template<typename U> 
    attribute_matches(attribute_name const &, RegexT const &, U const &);
};
.fi
.SH "DESCRIPTION"
.PP
The predicate checks if the attribute value matches a regular expression\&. The attribute value is assumed to be of a string type\&.
.SS "attribute_matches public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
attribute_matches(attribute_name const & name, RegexT const & rex);
.fi

.sp
Initializing constructor
.sp

.PP
Parameters:
.RS 4
.PP
name
.RS 4
Attribute name
.RE
.PP
rex
.RS 4
The regular expression to match the attribute value against
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename U> 
  attribute_matches(attribute_name const & name, RegexT const & rex, 
                    U const & arg);
.fi

.sp
Initializing constructor
.sp

.PP
Parameters:
.RS 4
.PP
arg
.RS 4
Additional parameter for the fallback policy
.RE
.PP
name
.RS 4
Attribute name
.RE
.PP
rex
.RS 4
The regular expression to match the attribute value against
.RE
.RE
.RE


