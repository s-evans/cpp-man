.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLA" 3 "" "" ""
.SH "NAME"
boost::type_erasure::placeholder_of
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_erasure/placeholder_of\&.hpp>

template<typename T> 
struct placeholder_of {
  // types
  typedef \fIunspecified\fR type;
};
.fi
.SH "DESCRIPTION"
.PP
A metafunction returning the (const/reference qualified) placeholder corresponding to an any\&. It will also work for all bases of any, so it can be applied to the
Base
parameter of
concept_interface\&.

