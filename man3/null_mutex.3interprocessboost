.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS NULL_MUTEX" 3 "" "" ""
.SH "NAME"
boost::interprocess::null_mutex
.SH "SYNOPSIS"
.\" unlock_upgradable_and_lock_sharable: Class null_mutex
.\" Class null_mutex: unlock_upgradable_and_lock_sharable
.\" unlock_upgradable_and_lock: Class null_mutex
.\" Class null_mutex: unlock_upgradable_and_lock
.\" unlock_upgradable: Class null_mutex
.\" Class null_mutex: unlock_upgradable
.\" unlock_sharable: Class null_mutex
.\" Class null_mutex: unlock_sharable
.\" unlock_and_lock_upgradable: Class null_mutex
.\" Class null_mutex: unlock_and_lock_upgradable
.\" unlock_and_lock_sharable: Class null_mutex
.\" Class null_mutex: unlock_and_lock_sharable
.\" unlock: Class null_mutex
.\" Class null_mutex: unlock
.\" try_unlock_upgradable_and_lock: Class null_mutex
.\" Class null_mutex: try_unlock_upgradable_and_lock
.\" try_unlock_sharable_and_lock_upgradable: Class null_mutex
.\" Class null_mutex: try_unlock_sharable_and_lock_upgradable
.\" try_unlock_sharable_and_lock: Class null_mutex
.\" Class null_mutex: try_unlock_sharable_and_lock
.\" try_lock_upgradable: Class null_mutex
.\" Class null_mutex: try_lock_upgradable
.\" try_lock_sharable: Class null_mutex
.\" Class null_mutex: try_lock_sharable
.\" try_lock: Class null_mutex
.\" Class null_mutex: try_lock
.\" timed_unlock_upgradable_and_lock: Class null_mutex
.\" Class null_mutex: timed_unlock_upgradable_and_lock
.\" timed_lock_upgradable: Class null_mutex
.\" Class null_mutex: timed_lock_upgradable
.\" timed_lock_sharable: Class null_mutex
.\" Class null_mutex: timed_lock_sharable
.\" timed_lock: Class null_mutex
.\" Class null_mutex: timed_lock
.\" null_mutex: Class null_mutex
.\" Class null_mutex: null_mutex
.\" lock_upgradable: Class null_mutex
.\" Class null_mutex: lock_upgradable
.\" lock_sharable: Class null_mutex
.\" Class null_mutex: lock_sharable
.\" lock: Class null_mutex
.\" Class null_mutex: lock

.sp
.nf
// In header: <boost/interprocess/sync/null_mutex\&.hpp>


class null_mutex {
public:
  // construct/copy/destruct
  null_mutex();
  ~null_mutex();

  // public member functions
  void lock();
  bool try_lock();
  bool timed_lock(const boost::posix_time::ptime &);
  void unlock();
  void lock_sharable();
  bool try_lock_sharable();
  bool timed_lock_sharable(const boost::posix_time::ptime &);
  void unlock_sharable();
  void lock_upgradable();
  bool try_lock_upgradable();
  bool timed_lock_upgradable(const boost::posix_time::ptime &);
  void unlock_upgradable();
  void unlock_and_lock_upgradable();
  void unlock_and_lock_sharable();
  void unlock_upgradable_and_lock_sharable();
  void unlock_upgradable_and_lock();
  bool try_unlock_upgradable_and_lock();
  bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &);
  bool try_unlock_sharable_and_lock();
  bool try_unlock_sharable_and_lock_upgradable();
};
.fi
.SH "DESCRIPTION"
.PP
Implements a mutex that simulates a mutex without doing any operation and simulates a successful operation\&.
.SS "null_mutex public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
null_mutex();
.fi

.sp
Constructor\&. Empty\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~null_mutex();
.fi

.sp
Destructor\&. Empty\&.
.RE

.SS "null_mutex public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" lock: Class null_mutex
.\" Class null_mutex: lock
.\" lock: Class null_mutex
.\" Class null_mutex: lock

.sp

.nf
void lock();
.fi

Simulates a mutex lock() operation\&. Empty function\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" try_lock: Class null_mutex
.\" Class null_mutex: try_lock
.\" try_lock: Class null_mutex
.\" Class null_mutex: try_lock

.sp

.nf
bool try_lock();
.fi

.sp
Simulates a mutex try_lock() operation\&. Equivalent to "return true;"
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
.\" timed_lock: Class null_mutex
.\" Class null_mutex: timed_lock
.\" timed_lock: Class null_mutex
.\" Class null_mutex: timed_lock

.sp

.nf
bool timed_lock(const boost::posix_time::ptime &);
.fi

.sp
Simulates a mutex timed_lock() operation\&. Equivalent to "return true;"
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" unlock: Class null_mutex
.\" Class null_mutex: unlock
.\" unlock: Class null_mutex
.\" Class null_mutex: unlock

.sp

.nf
void unlock();
.fi

.sp
Simulates a mutex unlock() operation\&. Empty function\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
.\" lock_sharable: Class null_mutex
.\" Class null_mutex: lock_sharable
.\" lock_sharable: Class null_mutex
.\" Class null_mutex: lock_sharable

.sp

.nf
void lock_sharable();
.fi

.sp
Simulates a mutex lock_sharable() operation\&. Empty function\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
.\" try_lock_sharable: Class null_mutex
.\" Class null_mutex: try_lock_sharable
.\" try_lock_sharable: Class null_mutex
.\" Class null_mutex: try_lock_sharable

.sp

.nf
bool try_lock_sharable();
.fi

.sp
Simulates a mutex try_lock_sharable() operation\&. Equivalent to "return true;"
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
.\" timed_lock_sharable: Class null_mutex
.\" Class null_mutex: timed_lock_sharable
.\" timed_lock_sharable: Class null_mutex
.\" Class null_mutex: timed_lock_sharable

.sp

.nf
bool timed_lock_sharable(const boost::posix_time::ptime &);
.fi

.sp
Simulates a mutex timed_lock_sharable() operation\&. Equivalent to "return true;"
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}
.\" unlock_sharable: Class null_mutex
.\" Class null_mutex: unlock_sharable
.\" unlock_sharable: Class null_mutex
.\" Class null_mutex: unlock_sharable

.sp

.nf
void unlock_sharable();
.fi

.sp
Simulates a mutex unlock_sharable() operation\&. Empty function\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}
.\" lock_upgradable: Class null_mutex
.\" Class null_mutex: lock_upgradable
.\" lock_upgradable: Class null_mutex
.\" Class null_mutex: lock_upgradable

.sp

.nf
void lock_upgradable();
.fi

.sp
Simulates a mutex lock_upgradable() operation\&. Empty function\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}
.\" try_lock_upgradable: Class null_mutex
.\" Class null_mutex: try_lock_upgradable
.\" try_lock_upgradable: Class null_mutex
.\" Class null_mutex: try_lock_upgradable

.sp

.nf
bool try_lock_upgradable();
.fi

.sp
Simulates a mutex try_lock_upgradable() operation\&. Equivalent to "return true;"
.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}
.\" timed_lock_upgradable: Class null_mutex
.\" Class null_mutex: timed_lock_upgradable
.\" timed_lock_upgradable: Class null_mutex
.\" Class null_mutex: timed_lock_upgradable

.sp

.nf
bool timed_lock_upgradable(const boost::posix_time::ptime &);
.fi

.sp
Simulates a mutex timed_lock_upgradable() operation\&. Equivalent to "return true;"
.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}
.\" unlock_upgradable: Class null_mutex
.\" Class null_mutex: unlock_upgradable
.\" unlock_upgradable: Class null_mutex
.\" Class null_mutex: unlock_upgradable

.sp

.nf
void unlock_upgradable();
.fi

.sp
Simulates a mutex unlock_upgradable() operation\&. Empty function\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "13." 4.2
.\}
.\" unlock_and_lock_upgradable: Class null_mutex
.\" Class null_mutex: unlock_and_lock_upgradable
.\" unlock_and_lock_upgradable: Class null_mutex
.\" Class null_mutex: unlock_and_lock_upgradable

.sp

.nf
void unlock_and_lock_upgradable();
.fi

.sp
Simulates unlock_and_lock_upgradable()\&. Empty function\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'14.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "14." 4.2
.\}
.\" unlock_and_lock_sharable: Class null_mutex
.\" Class null_mutex: unlock_and_lock_sharable
.\" unlock_and_lock_sharable: Class null_mutex
.\" Class null_mutex: unlock_and_lock_sharable

.sp

.nf
void unlock_and_lock_sharable();
.fi

.sp
Simulates unlock_and_lock_sharable()\&. Empty function\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'15.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "15." 4.2
.\}
.\" unlock_upgradable_and_lock_sharable: Class null_mutex
.\" Class null_mutex: unlock_upgradable_and_lock_sharable
.\" unlock_upgradable_and_lock_sharable: Class null_mutex
.\" Class null_mutex: unlock_upgradable_and_lock_sharable

.sp

.nf
void unlock_upgradable_and_lock_sharable();
.fi

.sp
Simulates unlock_upgradable_and_lock_sharable()\&. Empty function\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'16.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "16." 4.2
.\}
.\" unlock_upgradable_and_lock: Class null_mutex
.\" Class null_mutex: unlock_upgradable_and_lock
.\" unlock_upgradable_and_lock: Class null_mutex
.\" Class null_mutex: unlock_upgradable_and_lock

.sp

.nf
void unlock_upgradable_and_lock();
.fi

.sp
Simulates unlock_upgradable_and_lock()\&. Empty function\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'17.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "17." 4.2
.\}
.\" try_unlock_upgradable_and_lock: Class null_mutex
.\" Class null_mutex: try_unlock_upgradable_and_lock
.\" try_unlock_upgradable_and_lock: Class null_mutex
.\" Class null_mutex: try_unlock_upgradable_and_lock

.sp

.nf
bool try_unlock_upgradable_and_lock();
.fi

.sp
Simulates try_unlock_upgradable_and_lock()\&. Equivalent to "return true;"
.RE


.sp
.RS 4
.ie n \{\
\h'-04'18.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "18." 4.2
.\}
.\" timed_unlock_upgradable_and_lock: Class null_mutex
.\" Class null_mutex: timed_unlock_upgradable_and_lock
.\" timed_unlock_upgradable_and_lock: Class null_mutex
.\" Class null_mutex: timed_unlock_upgradable_and_lock

.sp

.nf
bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &);
.fi

.sp
Simulates timed_unlock_upgradable_and_lock()\&. Equivalent to "return true;"
.RE


.sp
.RS 4
.ie n \{\
\h'-04'19.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "19." 4.2
.\}
.\" try_unlock_sharable_and_lock: Class null_mutex
.\" Class null_mutex: try_unlock_sharable_and_lock
.\" try_unlock_sharable_and_lock: Class null_mutex
.\" Class null_mutex: try_unlock_sharable_and_lock

.sp

.nf
bool try_unlock_sharable_and_lock();
.fi

.sp
Simulates try_unlock_sharable_and_lock()\&. Equivalent to "return true;"
.RE


.sp
.RS 4
.ie n \{\
\h'-04'20.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "20." 4.2
.\}
.\" try_unlock_sharable_and_lock_upgradable: Class null_mutex
.\" Class null_mutex: try_unlock_sharable_and_lock_upgradable
.\" try_unlock_sharable_and_lock_upgradable: Class null_mutex
.\" Class null_mutex: try_unlock_sharable_and_lock_upgradable

.sp

.nf
bool try_unlock_sharable_and_lock_upgradable();
.fi

.sp
Simulates try_unlock_sharable_and_lock_upgradable()\&. Equivalent to "return true;"
.RE


