.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::type_erasure::callable
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/type_erasure/callable\&.hpp>

template<typename Sig, typename F = _self> 
struct callable {

  // public static functions
  static R apply(F &, T\&.\&.\&.);
};
.fi
.SH "DESCRIPTION"
.PP
The
callable
concept allows an any to hold function objects\&.
Sig
is interpreted in the same way as for Boost\&.Function, except that the arguments and return type are allowed to be placeholders\&.
F
must be a
placeholder\&.
.PP
Multiple instances of
callable
can be used simultaneously\&. Overload resolution works normally\&. Note that unlike Boost\&.Function,
callable
does not provide result_type\&. It does, however, support
boost::result_of\&.
.SS "callable public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static R apply(F & f, T\&.\&.\&. arg);
.fi

.sp
R
is the result type of
Sig
and
T
is the argument types of
Sig\&.
.RE


