.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::log::attributes::mutable_constant \- A class of an attribute that holds a single constant value with ability to change it\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/mutable_constant\&.hpp>

template<typename T, typename MutexT = void, typename ScopedWriteLockT = auto, 
         typename ScopedReadLockT = auto> 
class mutable_constant : public attribute {
public:
  // types
  typedef T value_type;  // The attribute value type\&. 

  // member classes/structs/unions

  // Factory implementation\&.

  class impl : public attribute::impl {
  public:
    // construct/copy/destruct
    explicit impl(value_type const &);
    explicit impl(value_type &&);

    // public member functions
    virtual attribute_value get_value();
    void set(value_type const &);
    void set(value_type &&);
    value_type get() const;
  };

  // construct/copy/destruct
  explicit mutable_constant(value_type const &);
  explicit mutable_constant(value_type &&);
  explicit mutable_constant(cast_source const &);

  // public member functions
  void set(value_type const &);
  void set(value_type &&);
  value_type get() const;

  // protected member functions
  impl * get_impl() const;
};
.fi
.SH "DESCRIPTION"
.PP
The
mutable_constant
attribute stores a single value of type, specified as the first template argument\&. This value is returned on each attribute value acquisition\&.
.PP
The attribute also allows to modify the stored value, even if the attribute is registered in an attribute set\&. In order to ensure thread safety of such modifications the
mutable_constant
class is also parametrized with three additional template arguments: mutex type, scoped write and scoped read lock types\&. If not specified, the lock types are automatically deduced based on the mutex type\&.
.PP
The implementation may avoid using these types to actually create and use the mutex, if a more efficient synchronization method is available (such as atomic operations on the value type)\&. By default no synchronization is done\&.
.SS "mutable_constant public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit mutable_constant(value_type const & value);
.fi

.sp
Constructor with the stored value initialization
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit mutable_constant(value_type && value);
.fi

.sp
Constructor with the stored value initialization
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
explicit mutable_constant(cast_source const & source);
.fi

.sp
Constructor for casting support
.RE

.SS "mutable_constant public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void set(value_type const & value);
.fi

.sp
The method sets a new attribute value\&. The implementation exclusively locks the mutex in order to protect the value assignment\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void set(value_type && value);
.fi

.sp
The method sets a new attribute value\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
value_type get() const;
.fi

.sp
The method acquires the current attribute value\&. The implementation non\-exclusively locks the mutex in order to protect the value acquisition\&.
.RE

.SS "mutable_constant protected member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
impl * get_impl() const;
.fi

.sp

.PP
Returns:
.RS 4
Pointer to the factory implementation
.RE
.RE

.SS "Specializations"

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Class template mutable_constant<T, void, void, void>
.RE

