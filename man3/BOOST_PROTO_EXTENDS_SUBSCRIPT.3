.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "MACRO BOOST" 3 "" "" ""
.SH "NAME"
BOOST_PROTO_EXTENDS_SUBSCRIPT \- For adding to an expression extension class an overloaded subscript operator that builds an expression template\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/extends\&.hpp>

BOOST_PROTO_EXTENDS_SUBSCRIPT()
.fi
.SH "DESCRIPTION"
.PP
Use
BOOST_PROTO_EXTENDS_SUBSCRIPT()
after
BOOST_PROTO_BASIC_EXTENDS()
to give an expression extension class an overloaded subscript operator that builds an expression template\&.
.PP
See also:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BOOST_PROTO_BASIC_EXTENDS().RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BOOST_PROTO_EXTENDS_ASSIGN().RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BOOST_PROTO_EXTENDS_FUNCTION().RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BOOST_PROTO_EXTENDS().RE
.sp
.RE


