.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS CAST_SOURCE" 3 "" "" ""
.SH "NAME"
boost::log::attributes::cast_source
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/attribute_cast\&.hpp>


class cast_source {
public:
  // construct/copy/destruct
  explicit cast_source(attribute::impl *);

  // public member functions
  template<typename T> T * as() const;
};
.fi
.SH "DESCRIPTION"
.PP
The class holds a reference to the attribute factory implementation being casted
.SS "cast_source public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit cast_source(attribute::impl * p);
.fi

.sp
Initializing constructor\&. Creates a source that refers to the specified factory implementation\&.
.RE

.SS "cast_source public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T> T * as() const;
.fi

.sp
The function attempts to cast the aggregated pointer to the implementation to the specified type\&.
.sp

.PP
Returns:
.RS 4
The converted pointer or
NULL, if the conversion fails\&.
.RE
.RE


