.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::container::node_allocator
.SH "SYNOPSIS"
.\" version: Class template node_allocator
.\" Class template node_allocator: version
.\" value_type: Class template node_allocator
.\" Class template node_allocator: value_type
.\" swap: Class template node_allocator
.\" Class template node_allocator: swap
.\" size_type: Class template node_allocator
.\" Class template node_allocator: size_type
.\" reference: Class template node_allocator
.\" Class template node_allocator: reference
.\" rebind: Class template node_allocator
.\" Class template node_allocator: rebind
.\" priv_allocation_command: Class template node_allocator
.\" Class template node_allocator: priv_allocation_command
.\" pointer: Class template node_allocator
.\" Class template node_allocator: pointer
.\" other: Class template node_allocator
.\" Class template node_allocator: other
.\" node_allocator: Class template node_allocator
.\" Class template node_allocator: node_allocator
.\" difference_type: Class template node_allocator
.\" Class template node_allocator: difference_type
.\" deallocate_one: Class template node_allocator
.\" Class template node_allocator: deallocate_one
.\" deallocate_individual: Class template node_allocator
.\" Class template node_allocator: deallocate_individual
.\" deallocate: Class template node_allocator
.\" Class template node_allocator: deallocate
.\" const_reference: Class template node_allocator
.\" Class template node_allocator: const_reference
.\" const_pointer: Class template node_allocator
.\" Class template node_allocator: const_pointer
.\" allocation_command: Class template node_allocator
.\" Class template node_allocator: allocation_command
.\" allocate_one: Class template node_allocator
.\" Class template node_allocator: allocate_one
.\" allocate_many: Class template node_allocator
.\" Class template node_allocator: allocate_many
.\" allocate_individual: Class template node_allocator
.\" Class template node_allocator: allocate_individual
.\" allocate: Class template node_allocator
.\" Class template node_allocator: allocate

.sp
.nf
// In header: <boost/container/node_allocator\&.hpp>

template<typename T, std::size_t NodesPerBlock = NodeAlloc_nodes_per_block> 
class node_allocator {
public:
  // types
  typedef T              value_type;     
  typedef T *            pointer;        
  typedef const T *      const_pointer;  
  typedef \fIunspecified\fR    reference;      
  typedef \fIunspecified\fR    const_reference;
  typedef std::size_t    size_type;      
  typedef std::ptrdiff_t difference_type;
  typedef \fIunspecified\fR    version;        

  // member classes/structs/unions
  template<typename T2> 
  struct rebind {
    // types
    typedef node_allocator< T2, NodesPerBlock > other;
  };

  // construct/copy/destruct
  node_allocator() noexcept;
  node_allocator(const node_allocator &) noexcept;
  template<typename T2> 
    node_allocator(const node_allocator< T2, NodesPerBlock > &) noexcept;
  ~node_allocator();

  // public member functions
  size_type max_size() const;
  pointer allocate(size_type, const void * = 0);
  void deallocate(const pointer &, size_type) noexcept;
  pointer allocation_command(allocation_type, size_type, size_type &, 
                             pointer &);
  size_type size(pointer) const noexcept;
  pointer allocate_one();
  void allocate_individual(std::size_t, multiallocation_chain &);
  void deallocate_one(pointer) noexcept;
  void deallocate_individual(multiallocation_chain &) noexcept;
  void allocate_many(size_type, std::size_t, multiallocation_chain &);
  void allocate_many(const size_type *, size_type, multiallocation_chain &);
  void deallocate_many(multiallocation_chain &) noexcept;

  // public static functions
  static void deallocate_free_blocks() noexcept;

  // friend functions
  friend void swap(self_t &, self_t &) noexcept;
  friend bool operator==(const node_allocator &, const node_allocator &) noexcept;
  friend bool operator!=(const node_allocator &, const node_allocator &) noexcept;

  // private member functions
  pointer priv_allocation_command(allocation_type, std::size_t, size_type &, 
                                  pointer &);
};
.fi
.SH "DESCRIPTION"
.\" sizeof: Class template node_allocator
.\" Class template node_allocator: sizeof
.PP
An STL node allocator that uses a modified DlMalloc as memory source\&.
.PP
This node allocator shares a segregated storage between all instances of
node_allocator
with equal sizeof(T)\&.
.PP
NodesPerBlock is the number of nodes allocated at once when the allocator runs out of nodes
.SS "node_allocator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
node_allocator() noexcept;
.fi

Default constructor\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
node_allocator(const node_allocator &) noexcept;
.fi

Copy constructor from other node_allocator\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename T2> 
  node_allocator(const node_allocator< T2, NodesPerBlock > &) noexcept;
.fi

Copy constructor from related node_allocator\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
~node_allocator();
.fi

Destructor\&. .RE

.SS "node_allocator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
size_type max_size() const;
.fi

.sp
Returns the number of elements that could be allocated\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" allocate: Class template node_allocator
.\" Class template node_allocator: allocate

.sp

.nf
pointer allocate(size_type count, const void * = 0);
.fi

.sp
Allocate memory for an array of count elements\&. Throws std::bad_alloc if there is no enough memory
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
.\" deallocate: Class template node_allocator
.\" Class template node_allocator: deallocate

.sp

.nf
void deallocate(const pointer & ptr, size_type count) noexcept;
.fi

.sp
Deallocate allocated memory\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
.\" allocation_command: Class template node_allocator
.\" Class template node_allocator: allocation_command

.sp

.nf
pointer allocation_command(allocation_type command, size_type limit_size, 
                           size_type & prefer_in_recvd_out_size, 
                           pointer & reuse);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
size_type size(pointer p) const noexcept;
.fi

.sp
Returns maximum the number of objects the previously allocated memory pointed by p can hold\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
.\" deallocate_one: Class template node_allocator
.\" Class template node_allocator: deallocate_one
.\" allocate_one: Class template node_allocator
.\" Class template node_allocator: allocate_one

.sp

.nf
pointer allocate_one();
.fi

.sp
Allocates just one object\&. Memory allocated with this function must be deallocated only with deallocate_one()\&. Throws bad_alloc if there is no enough memory
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
.\" deallocate_one: Class template node_allocator
.\" Class template node_allocator: deallocate_one
.\" allocate_individual: Class template node_allocator
.\" Class template node_allocator: allocate_individual

.sp

.nf
void allocate_individual(std::size_t num_elements, 
                         multiallocation_chain & chain);
.fi

.sp
Allocates many elements of size == 1\&. Elements must be individually deallocated with deallocate_one()
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}
.\" allocate_one: Class template node_allocator
.\" Class template node_allocator: allocate_one
.\" deallocate_one: Class template node_allocator
.\" Class template node_allocator: deallocate_one

.sp

.nf
void deallocate_one(pointer p) noexcept;
.fi

.sp
Deallocates memory previously allocated with allocate_one()\&. You should never use deallocate_one to deallocate memory allocated with other functions different from allocate_one()\&. Never throws
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}
.\" deallocate_individual: Class template node_allocator
.\" Class template node_allocator: deallocate_individual

.sp

.nf
void deallocate_individual(multiallocation_chain & chain) noexcept;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}
.\" deallocate: Class template node_allocator
.\" Class template node_allocator: deallocate
.\" allocate_many: Class template node_allocator
.\" Class template node_allocator: allocate_many

.sp

.nf
void allocate_many(size_type elem_size, std::size_t n_elements, 
                   multiallocation_chain & chain);
.fi

.sp
Allocates many elements of size elem_size\&. Elements must be individually deallocated with deallocate()
.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}
.\" deallocate: Class template node_allocator
.\" Class template node_allocator: deallocate
.\" allocate_many: Class template node_allocator
.\" Class template node_allocator: allocate_many

.sp

.nf
void allocate_many(const size_type * elem_sizes, size_type n_elements, 
                   multiallocation_chain & chain);
.fi

.sp
Allocates n_elements elements, each one of size elem_sizes[i] Elements must be individually deallocated with deallocate()
.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
void deallocate_many(multiallocation_chain & chain) noexcept;
.fi

.RE

.SS "node_allocator public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static void deallocate_free_blocks() noexcept;
.fi

Deallocates all free blocks of the pool\&. .RE

.SS "node_allocator friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" swap: Class template node_allocator
.\" Class template node_allocator: swap

.sp

.nf
friend void swap(self_t &, self_t &) noexcept;
.fi

.sp
Swaps allocators\&. Does not throw\&. If each allocator is placed in a different memory segment, the result is undefined\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
friend bool operator==(const node_allocator &, const node_allocator &) noexcept;
.fi

.sp
An allocator always compares to true, as memory allocated with one instance can be deallocated by another instance
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator!=(const node_allocator &, const node_allocator &) noexcept;
.fi

.sp
An allocator always compares to false, as memory allocated with one instance can be deallocated by another instance
.RE

.SS "node_allocator private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" priv_allocation_command: Class template node_allocator
.\" Class template node_allocator: priv_allocation_command

.sp

.nf
pointer priv_allocation_command(allocation_type command, 
                                std::size_t limit_size, 
                                size_type & prefer_in_recvd_out_size, 
                                pointer & reuse);
.fi

.RE


