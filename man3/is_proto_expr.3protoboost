.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT IS_PROTO_EX" 3 "" "" ""
.SH "NAME"
boost::proto::is_proto_expr \- Empty type to be used as a dummy template parameter of POD expression wrappers\&. It allows argument\-dependent lookup to find Proto\'s operator overloads\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/extends\&.hpp>


struct is_proto_expr {
};
.fi
.SH "DESCRIPTION"
.PP

proto::is_proto_expr
allows argument\-dependent lookup to find Proto\'s operator overloads\&. For example:
.PP


.sp
.if n \{\
.RS 4
.\}
.nf
 template<typename T, typename Dummy = proto::is_proto_expr>
 struct my_terminal
 {
     BOOST_PROTO_BASIC_EXTENDS(
         typename proto::terminal<T>::type
       , my_terminal<T>
       , proto::default_domain
     )
 };

 // \&.\&.\&.
 my_terminal<int> _1, _2;
 _1 + _2; // OK, uses proto::operator+
.fi
.if n \{\
.RE
.\}
.sp

.PP
Without the second
Dummy
template parameter, Proto\'s operator overloads would not be considered by name lookup\&.

