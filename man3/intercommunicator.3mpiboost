.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS INTERCOMMUN" 3 "" "" ""
.SH "NAME"
boost::mpi::intercommunicator \- Communication facilities among processes in different groups\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/mpi/intercommunicator\&.hpp>


class intercommunicator : public boost::mpi::communicator {
public:
  // construct/copy/destruct
  intercommunicator(const MPI_Comm &, comm_create_kind);
  intercommunicator(const communicator &, int, const communicator &, int);

  // public member functions
  int local_size() const;
  boost::mpi::group local_group() const;
  int local_rank() const;
  int remote_size() const;
  boost::mpi::group remote_group() const;
  communicator merge(bool) const;
};
.fi
.SH "DESCRIPTION"
.PP
The
intercommunicator
class provides communication facilities among processes from different groups\&. An intercommunicator is always associated with two process groups: one "local" process group, containing the process that initiates an MPI operation (e\&.g\&., the sender in a
send
operation), and one "remote" process group, containing the process that is the target of the MPI operation\&.
.PP
While intercommunicators have essentially the same point\-to\-point operations as intracommunicators (the latter communicate only within a single process group), all communication with intercommunicators occurs between the processes in the local group and the processes in the remote group; communication within a group must use a different (intra\-)communicator\&.
.SS "intercommunicator public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
intercommunicator(const MPI_Comm & comm, comm_create_kind kind);
.fi

.sp
Build a new Boost\&.MPI intercommunicator based on the MPI intercommunicator
comm\&.
.sp
comm
may be any valid MPI intercommunicator\&. If
comm
is MPI_COMM_NULL, an empty communicator (that cannot be used for communication) is created and the
kind
parameter is ignored\&. Otherwise, the
kind
parameter determines how the Boost\&.MPI communicator will be related to
comm:
.sp

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
kind
is
comm_duplicate, duplicate
comm
to create a new communicator\&. This new communicator will be freed when the Boost\&.MPI communicator (and all copies of it) is destroyed\&. This option is only permitted if the underlying MPI implementation supports MPI 2\&.0; duplication of intercommunicators is not available in MPI 1\&.x\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
kind
is
comm_take_ownership, take ownership of
comm\&. It will be freed automatically when all of the Boost\&.MPI communicators go out of scope\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
kind
is
comm_attach, this Boost\&.MPI communicator will reference the existing MPI communicator
comm
but will not free
comm
when the Boost\&.MPI communicator goes out of scope\&. This option should only be used when the communicator is managed by the user\&.
.RE
.RS 4

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
intercommunicator(const communicator & local, int local_leader, 
                  const communicator & peer, int remote_leader);
.fi

.sp
Constructs a new intercommunicator whose local group is
local
and whose remote group is
peer\&. The intercommunicator can then be used to communicate between processes in the two groups\&. This constructor is equivalent to a call to
MPI_Intercomm_create\&.
.sp

.PP
Parameters:
.RS 4
.PP
local
.RS 4
The intracommunicator containing all of the processes that will go into the local group\&.
.RE
.PP
local_leader
.RS 4
The rank within the
local
intracommunicator that will serve as its leader\&.
.RE
.PP
peer
.RS 4
The intracommunicator containing all of the processes that will go into the remote group\&.
.RE
.PP
remote_leader
.RS 4
The rank within the
peer
group that will serve as its leader\&.
.RE
.RE
.RE

.SS "intercommunicator public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
int local_size() const;
.fi

.sp
Returns the size of the local group, i\&.e\&., the number of local processes that are part of the group\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
boost::mpi::group local_group() const;
.fi

.sp
Returns the local group, containing all of the local processes in this intercommunicator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
int local_rank() const;
.fi

.sp
Returns the rank of this process within the local group\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
int remote_size() const;
.fi

.sp
Returns the size of the remote group, i\&.e\&., the number of processes that are part of the remote group\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
boost::mpi::group remote_group() const;
.fi

.sp
Returns the remote group, containing all of the remote processes in this intercommunicator\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
communicator merge(bool high) const;
.fi

.sp
Merge the local and remote groups in this intercommunicator into a new intracommunicator containing the union of the processes in both groups\&. This method is equivalent to
MPI_Intercomm_merge\&.
.sp

.PP
Parameters:
.RS 4
.PP
high
.RS 4
Whether the processes in this group should have the higher rank numbers than the processes in the other group\&. Each of the processes within a particular group shall have the same "high" value\&.
.RE
.RE
.PP
Returns:
.RS 4
the new, merged intracommunicator
.RE
.RE


