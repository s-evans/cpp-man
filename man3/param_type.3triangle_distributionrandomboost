.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS PARAM_TYPE" 3 "" "" ""
.SH "NAME"
boost::random::triangle_distribution::param_type
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/triangle_distribution\&.hpp>



class param_type {
public:
  // types
  typedef triangle_distribution distribution_type;

  // construct/copy/destruct
  explicit param_type(RealType = 0\&.0, RealType = 0\&.5, RealType = 1\&.0);

  // public member functions
  RealType a() const;
  RealType b() const;
  RealType c() const;

  // friend functions
  template<typename CharT, typename Traits> 
    friend std::basic_ostream< CharT, Traits > & 
    operator<<(std::basic_ostream< CharT, Traits > &, const param_type &);
  template<typename CharT, typename Traits> 
    friend std::basic_istream< CharT, Traits > & 
    operator>>(std::basic_istream< CharT, Traits > &, const param_type &);
  friend bool operator==(const param_type &, const param_type &);
  friend bool operator!=(const param_type &, const param_type &);
};
.fi
.SH "DESCRIPTION"
.SS "param_type public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit param_type(RealType a = 0\&.0, RealType b = 0\&.5, RealType c = 1\&.0);
.fi

.sp
Constructs the parameters of a
triangle_distribution\&.
.RE

.SS "param_type public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
RealType a() const;
.fi

.sp
Returns the minimum value of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
RealType b() const;
.fi

.sp
Returns the mode of the distribution\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
RealType c() const;
.fi

.sp
Returns the maximum value of the distribution\&.
.RE

.SS "param_type friend functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_ostream< CharT, Traits > & 
  operator<<(std::basic_ostream< CharT, Traits > & os, 
             const param_type & param);
.fi

.sp
Writes the parameters to a
std::ostream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename CharT, typename Traits> 
  friend std::basic_istream< CharT, Traits > & 
  operator>>(std::basic_istream< CharT, Traits > & is, 
             const param_type & param);
.fi

.sp
Reads the parameters from a
std::istream\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
friend bool operator==(const param_type & lhs, const param_type & rhs);
.fi

.sp
Returns true if the two sets of parameters are equal\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
friend bool operator!=(const param_type & lhs, const param_type & rhs);
.fi

.sp
Returns true if the two sets of parameters are different\&.
.RE


