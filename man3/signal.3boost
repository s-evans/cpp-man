.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE SIG" 3 "" "" ""
.SH "NAME"
boost::signal \- Safe multicast callback\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/signal\&.hpp>

template<typename Signature, typename Combiner = last_value<R>, 
         typename Group = int, typename GroupCompare = std::less<Group>, 
         typename SlotFunction = functionN<Signature> > 
class signal : public signalN<R, T1, T2, \&.\&.\&., TN, Combiner, Group, GroupCompare, SlotFunction>
{
public:
  // construct/copy/destruct
  signal(const combiner_type& = combiner_type(), 
         const group_compare_type& = group_compare_type());
};
.fi
.SH "DESCRIPTION"
.PP
Class template
signal
is a thin wrapper around the numbered class templates
signal0,
signal1, etc\&. It accepts a function type with N arguments instead of N separate arguments, and derives from the appropriate
signalN
instantiation\&.
.PP
All functionality of this class template is in its base class
signalN\&.
.SS "Template Parameters"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
typename Signature
.fi

.sp

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
typename Combiner = last_value<R>
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
typename Group = int
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
typename GroupCompare = std::less<Group>
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
typename SlotFunction = functionN<Signature>
.fi

.RE

.SS "signal public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
signal(const combiner_type& combiner = combiner_type(), 
       const group_compare_type& compare = group_compare_type());
.fi

.PP
Effects:
.RS 4
Initializes the base class with the given combiner and comparison objects\&.
.RE
.RE


