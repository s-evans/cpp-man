.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE LO" 3 "" "" ""
.SH "NAME"
boost::xpressive::local \- local<> is a lazy wrapper for a reference to a value that is stored within the local itself\&. It is for use within xpressive semantic actions\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_actions\&.hpp>

template<typename T> 
struct local : public proto::terminal::type< reference_wrapper< T > > {
  // construct/copy/destruct
  local();
  explicit local(T const &);

  // public member functions
  T & get();
  T const & get() const;
};
.fi
.SH "DESCRIPTION"
.PP
Below is an example of how to use
local<>
in semantic actions\&.
.sp
.if n \{\
.RS 4
.\}
.nf
using namespace boost::xpressive;
local<int> i(0);
std::string str("1!2!3?");
// count the exciting digits, but not the
// questionable ones\&.
sregex rex = +( _d [ ++i ] >> \'!\' );
regex_search(str, rex);
assert( i\&.get() == 2 );

.fi
.if n \{\
.RE
.\}
.sp

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
As the name "local" suggests,
local<>
objects and the regexes that refer to them should never leave the local scope\&. The value stored within the local object will be destroyed at the end of the
local<>\'s
lifetime, and any regex objects still holding the
local<>
will be left with a dangling reference\&.
.sp .5v
.RE

.SS "Template Parameters"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
typename T
.fi

.sp
The type of the local variable\&.
.RE

.SS "local public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
local();
.fi

Store a default\-constructed value of type T\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit local(T const & t);
.fi

Store a default\-constructed value of type T\&. 
.PP
Parameters:
.RS 4
.PP
t
.RS 4
The initial value\&.
.RE
.RE
.RE

.SS "local public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
T & get();
.fi

Fetch the wrapped value\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
T const & get() const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


