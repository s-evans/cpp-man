.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPL" 3 "" "" ""
.SH "NAME"
boost::units::conversion_helper
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/units/conversion\&.hpp>

template<typename From, typename To> 
struct conversion_helper {

  // public static functions
  static To convert(const From &);
};
.fi
.SH "DESCRIPTION"
.PP
Template for defining conversions between quantities\&. This template should be specialized for every quantity that allows conversions\&. For example, if you have a two units called pair and dozen you would write

.sp
.if n \{\
.RS 4
.\}
.nf
namespace boost {
namespace units {
template<class T0, class T1>
struct conversion_helper<quantity<dozen, T0>, quantity<pair, T1> >
{
    static quantity<pair, T1> convert(const quantity<dozen, T0>& source)
    {
        return(quantity<pair, T1>::from_value(6 * source\&.value()));
    }
};
}
}

.fi
.if n \{\
.RE
.\}

.PP
In most cases, the predefined specializations for
unit
and
absolute
should be sufficient, so users should rarely need to use this\&.
.SS "conversion_helper public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static To convert(const From &);
.fi

.RE


