.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMP" 3 "" "" ""
.SH "NAME"
boost::log::fallback_to_default
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/fallback_policy_fwd\&.hpp>

template<typename DefaultT> 
struct fallback_to_default {
  // construct/copy/destruct
  fallback_to_default();
  explicit fallback_to_default(default_type const &);

  // public member functions
  template<typename FunT> bool apply_default(FunT &) const;
  template<typename FunT> bool apply_default(FunT const &) const;

  // public static functions
  static void on_invalid_type(typeindex::type_index const &);
  static void on_missing_value();
};
.fi
.SH "DESCRIPTION"
.PP
The
fallback_to_default
policy results in a default value if the attribute value cannot be extracted\&.
.SS "fallback_to_default public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
fallback_to_default();
.fi

.sp
Default constructor\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit fallback_to_default(default_type const & def_val);
.fi

.sp
Initializing constructor\&.
.RE

.SS "fallback_to_default public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename FunT> bool apply_default(FunT & fun) const;
.fi

.sp
The method is called in order to apply a function object to the default value\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename FunT> bool apply_default(FunT const & fun) const;
.fi

.sp
The method is called in order to apply a function object to the default value\&.
.RE

.SS "fallback_to_default public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static void on_invalid_type(typeindex::type_index const &);
.fi

.sp
The method is called when value extraction failed because the attribute value has different type than requested\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static void on_missing_value();
.fi

.sp
The method is called when value extraction failed because the attribute value was not found\&.
.RE


