.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMP" 3 "" "" ""
.SH "NAME"
boost::date_time::date_generator_parser \- Class for date_generator parsing\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/date_generator_parser\&.hpp>

template<typename date_type, typename charT> 
class date_generator_parser {
public:
  // types
  typedef std::basic_string< charT >                string_type;      
  typedef std::istreambuf_iterator< charT >         stream_itr_type;  
  typedef date_type::month_type                     month_type;       
  typedef date_type::day_of_week_type               day_of_week_type; 
  typedef date_type::day_type                       day_type;         
  typedef string_parse_tree< charT >                parse_tree_type;  
  typedef parse_tree_type::parse_match_result_type  match_results;    
  typedef std::vector< std::basic_string< charT > > collection_type;  
  typedef partial_date< date_type >                 partial_date_type;
  typedef nth_kday_of_month< date_type >            nth_kday_type;    
  typedef first_kday_of_month< date_type >          first_kday_type;  
  typedef last_kday_of_month< date_type >           last_kday_type;   
  typedef first_kday_after< date_type >             kday_after_type;  
  typedef first_kday_before< date_type >            kday_before_type; 
  typedef charT                                     char_type;        

  enum phrase_elements { first = =0, second, third, fourth, fifth, last, 
                         before, after, of, number_of_phrase_elements };

  // construct/copy/destruct
  date_generator_parser();
  date_generator_parser(const string_type &, const string_type &, 
                        const string_type &, const string_type &, 
                        const string_type &, const string_type &, 
                        const string_type &, const string_type &, 
                        const string_type &);

  // public member functions
  void element_strings(const string_type &, const string_type &, 
                       const string_type &, const string_type &, 
                       const string_type &, const string_type &, 
                       const string_type &, const string_type &, 
                       const string_type &);
  void element_strings(const collection_type &);
  template<typename facet_type> 
    partial_date_type 
    get_partial_date_type(stream_itr_type &, stream_itr_type &, 
                          std::ios_base &, const facet_type &) const;
  template<typename facet_type> 
    nth_kday_type 
    get_nth_kday_type(stream_itr_type &, stream_itr_type &, std::ios_base &, 
                      const facet_type &) const;
  template<typename facet_type> 
    first_kday_type 
    get_first_kday_type(stream_itr_type &, stream_itr_type &, std::ios_base &, 
                        const facet_type &) const;
  template<typename facet_type> 
    last_kday_type 
    get_last_kday_type(stream_itr_type &, stream_itr_type &, std::ios_base &, 
                       const facet_type &) const;
  template<typename facet_type> 
    kday_before_type 
    get_kday_before_type(stream_itr_type &, stream_itr_type &, 
                         std::ios_base &, const facet_type &) const;
  template<typename facet_type> 
    kday_after_type 
    get_kday_after_type(stream_itr_type &, stream_itr_type &, std::ios_base &, 
                        const facet_type &) const;

  // private member functions
  void extract_element(stream_itr_type &, stream_itr_type &, 
                       typename date_generator_parser::phrase_elements) const;

  // public data members
  static const char_type first_string;
  static const char_type second_string;
  static const char_type third_string;
  static const char_type fourth_string;
  static const char_type fifth_string;
  static const char_type last_string;
  static const char_type before_string;
  static const char_type after_string;
  static const char_type of_string;
};
.fi
.SH "DESCRIPTION"
.PP
The elements of a date_generator "phrase" are parsed from the input stream in a particular order\&. All elements are required and the order in which they appear cannot change, however, the elements themselves can be changed\&. The default elements and their order are as follows:
.PP

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
partial_date
=> "dd Month"
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
nth_day_of_the_week_in_month => "nth weekday of month"
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
first_day_of_the_week_in_month => "first weekday of month"
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
last_day_of_the_week_in_month => "last weekday of month"
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
first_day_of_the_week_after => "weekday after"
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
first_day_of_the_week_before => "weekday before"
.RE
.sp
.RE

.PP
Weekday and Month names and formats are handled via the
date_input_facet\&.
.SS "date_generator_parser public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
date_generator_parser();
.fi

Creates a date_generator_parser with the default set of "element_strings"\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
date_generator_parser(const string_type & first_str, 
                      const string_type & second_str, 
                      const string_type & third_str, 
                      const string_type & fourth_str, 
                      const string_type & fifth_str, 
                      const string_type & last_str, 
                      const string_type & before_str, 
                      const string_type & after_str, 
                      const string_type & of_str);
.fi

Creates a date_generator_parser using a user defined set of element strings\&. .RE

.SS "date_generator_parser public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void element_strings(const string_type & first_str, 
                     const string_type & second_str, 
                     const string_type & third_str, 
                     const string_type & fourth_str, 
                     const string_type & fifth_str, 
                     const string_type & last_str, 
                     const string_type & before_str, 
                     const string_type & after_str, 
                     const string_type & of_str);
.fi

Replace strings that determine nth week for generator\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void element_strings(const collection_type & col);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename facet_type> 
  partial_date_type 
  get_partial_date_type(stream_itr_type & sitr, stream_itr_type & stream_end, 
                        std::ios_base & a_ios, const facet_type & facet) const;
.fi

returns partial_date parsed from stream .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename facet_type> 
  nth_kday_type 
  get_nth_kday_type(stream_itr_type & sitr, stream_itr_type & stream_end, 
                    std::ios_base & a_ios, const facet_type & facet) const;
.fi

returns nth_kday_of_week parsed from stream .RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
template<typename facet_type> 
  first_kday_type 
  get_first_kday_type(stream_itr_type & sitr, stream_itr_type & stream_end, 
                      std::ios_base & a_ios, const facet_type & facet) const;
.fi

returns first_kday_of_week parsed from stream .RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
template<typename facet_type> 
  last_kday_type 
  get_last_kday_type(stream_itr_type & sitr, stream_itr_type & stream_end, 
                     std::ios_base & a_ios, const facet_type & facet) const;
.fi

returns last_kday_of_week parsed from stream .RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
template<typename facet_type> 
  kday_before_type 
  get_kday_before_type(stream_itr_type & sitr, stream_itr_type & stream_end, 
                       std::ios_base & a_ios, const facet_type & facet) const;
.fi

returns first_kday_of_week parsed from stream .RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
template<typename facet_type> 
  kday_after_type 
  get_kday_after_type(stream_itr_type & sitr, stream_itr_type & stream_end, 
                      std::ios_base & a_ios, const facet_type & facet) const;
.fi

returns first_kday_of_week parsed from stream .RE

.SS "date_generator_parser private member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void extract_element(stream_itr_type & sitr, stream_itr_type & stream_end, 
                     typename date_generator_parser::phrase_elements ele) const;
.fi

Extracts phrase element from input\&. Throws ios_base::failure on error\&. .RE


