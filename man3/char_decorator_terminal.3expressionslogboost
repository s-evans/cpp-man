.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEM" 3 "" "" ""
.SH "NAME"
boost::log::expressions::char_decorator_terminal
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/expressions/formatters/char_decorator\&.hpp>

template<typename SubactorT, typename ImplT> 
class char_decorator_terminal {
public:
  // types
  typedef void                                  _is_boost_log_terminal;  // Internal typedef for type categorization\&. 
  typedef ImplT                                 impl_type;               // Implementation type\&. 
  typedef impl_type::char_type                  char_type;               // Character type\&. 
  typedef impl_type::string_type                string_type;             // String type\&. 
  typedef basic_formatting_ostream< char_type > stream_type;             // Stream type\&. 
  typedef SubactorT                             subactor_type;           // Adopted actor type\&. 
  typedef string_type                           result_type;             // Result type definition\&. 

  // construct/copy/destruct
  char_decorator_terminal(subactor_type const &, impl_type const &);
  char_decorator_terminal(char_decorator_terminal const &);
  char_decorator_terminal() = delete;

  // public member functions
  subactor_type const & get_subactor() const;
  impl_type const & get_impl() const;
  template<typename ContextT> result_type operator()(ContextT const &);
  template<typename ContextT> result_type operator()(ContextT const &) const;
};
.fi
.SH "DESCRIPTION"
.PP
Character decorator terminal class\&. This formatter allows to modify strings generated by other formatters on character level\&. The most obvious application of decorators is replacing a certain set of characters with decorated equivalents to satisfy requirements of text\-based sinks\&.
.PP
The
char_decorator_terminal
class aggregates the formatter being decorated, and a set of string pairs that are used as decorations\&. All decorations are applied sequentially\&. The
char_decorator_terminal
class is a formatter itself, so it can be used to construct more complex formatters, including nesting decorators\&.
.SS "char_decorator_terminal public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
char_decorator_terminal(subactor_type const & sub, impl_type const & impl);
.fi

.sp
Initializing constructor\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
char_decorator_terminal(char_decorator_terminal const & that);
.fi

.sp
Copy constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
char_decorator_terminal() = delete;
.fi

.RE

.SS "char_decorator_terminal public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
subactor_type const & get_subactor() const;
.fi

.sp

.PP
Returns:
.RS 4
Adopted subactor
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
impl_type const & get_impl() const;
.fi

.sp

.PP
Returns:
.RS 4
Implementation
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename ContextT> result_type operator()(ContextT const & ctx);
.fi

.sp
Invokation operator
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename ContextT> result_type operator()(ContextT const & ctx) const;
.fi

.sp
Invokation operator
.RE


