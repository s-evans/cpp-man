.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE " 3 "" "" ""
.SH "NAME"
boost::xpressive::reference \- reference<> is a lazy wrapper for a reference that can be used in xpressive semantic actions\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_actions\&.hpp>

template<typename T> 
struct reference : public proto::extends< proto::terminal< reference_wrapper< T > >::type, reference< T > >
{
  // construct/copy/destruct
  explicit reference(T &);

  // public member functions
  T & get() const;
};
.fi
.SH "DESCRIPTION"
.PP
Here is an example of how to use
reference<>
to create a lazy reference to an existing object so it can be read and written in an xpressive semantic action\&.
.sp
.if n \{\
.RS 4
.\}
.nf
using namespace boost::xpressive;
std::map<std::string, int> result;
reference<std::map<std::string, int> > result_ref(result);

// Match a word and an integer, separated by =>,
// and then stuff the result into a std::map<>
sregex pair = ( (s1= +_w) >> "=>" >> (s2= +_d) )
    [ result_ref[s1] = as<int>(s2) ];

.fi
.if n \{\
.RE
.\}
.sp

.SS "Template Parameters"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
typename T
.fi

.sp
The type of the referent\&.
.RE

.SS "reference public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit reference(T & t);
.fi

Store a reference to t\&. 
.PP
Parameters:
.RS 4
.PP
t
.RS 4
Reference to object
.RE
.RE
.RE

.SS "reference public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
T & get() const;
.fi

Fetch the stored value\&. .RE


