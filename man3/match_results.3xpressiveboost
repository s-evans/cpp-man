.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::xpressive::match_results \- Class template match_results<> holds the results of a regex_match() or a regex_search() as a collection of sub_match objects\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/match_results\&.hpp>

template<typename BidiIter> 
struct match_results {
  // types
  typedef iterator_value< BidiIter >::type      char_type;          
  typedef \fIunspecified\fR                           string_type;        
  typedef std::size_t                           size_type;          
  typedef sub_match< BidiIter >                 value_type;         
  typedef iterator_difference< BidiIter >::type difference_type;    
  typedef value_type const &                    reference;          
  typedef value_type const &                    const_reference;    
  typedef \fIunspecified\fR                           iterator;           
  typedef \fIunspecified\fR                           const_iterator;     
  typedef \fIunspecified\fR                           nested_results_type;

  // construct/copy/destruct
  match_results();
  match_results(match_results< BidiIter > const &);
  match_results< BidiIter > & operator=(match_results< BidiIter > const &);
  ~match_results();

  // public member functions
  size_type size() const;
  bool empty() const;
  difference_type length(size_type = 0) const;
  difference_type position(size_type = 0) const;
  string_type str(size_type = 0) const;
  template<typename Sub> const_reference operator[](Sub const &) const;
  const_reference prefix() const;
  const_reference suffix() const;
  const_iterator begin() const;
  const_iterator end() const;
  operator bool_type() const;
  bool operator!() const;
  regex_id_type regex_id() const;
  nested_results_type const & nested_results() const;
  template<typename Format, typename OutputIterator> 
    OutputIterator 
    format(OutputIterator, Format const &, 
           regex_constants::match_flag_type = regex_constants::format_default, 
           \fIunspecified\fR = 0) const;
  template<typename OutputIterator> 
    OutputIterator 
    format(OutputIterator, char_type const *, 
           regex_constants::match_flag_type = regex_constants::format_default) const;
  template<typename Format, typename OutputIterator> 
    string_type format(Format const &, 
                       regex_constants::match_flag_type = regex_constants::format_default, 
                       \fIunspecified\fR = 0) const;
  string_type format(char_type const *, 
                     regex_constants::match_flag_type = regex_constants::format_default) const;
  void swap(match_results< BidiIter > &);
  template<typename Arg> match_results< BidiIter > & let(Arg const &);
};
.fi
.SH "DESCRIPTION"
.PP
Class template
match_results<> denotes a collection of sequences representing the result of a regular expression match\&. Storage for the collection is allocated and freed as necessary by the member functions of class
match_results<>\&.
.PP
The class template
match_results<> conforms to the requirements of a Sequence, as specified in (lib\&.sequence\&.reqmts), except that only operations defined for const\-qualified Sequences are supported\&.
.SS "match_results public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
match_results();
.fi

.sp

.PP
Postconditions:
.RS 4
regex_id() == 0
.RE
.PP
Postconditions:
.RS 4
size() == 0
.RE
.PP
Postconditions:
.RS 4
empty() == true
.RE
.PP
Postconditions:
.RS 4
str() == string_type()
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
match_results(match_results< BidiIter > const & that);
.fi

.sp

.PP
Parameters:
.RS 4
.PP
that
.RS 4
The
match_results
object to copy
.RE
.RE
.PP
Postconditions:
.RS 4
regex_id() == that\&.regex_id()\&.
.RE
.PP
Postconditions:
.RS 4
size() == that\&.size()\&.
.RE
.PP
Postconditions:
.RS 4
empty() == that\&.empty()\&.
.RE
.PP
Postconditions:
.RS 4
str(n) == that\&.str(n) for all positive integers n < that\&.size()\&.
.RE
.PP
Postconditions:
.RS 4
prefix() == that\&.prefix()\&.
.RE
.PP
Postconditions:
.RS 4
suffix() == that\&.suffix()\&.
.RE
.PP
Postconditions:
.RS 4
(*this)[n] == that[n] for all positive integers n < that\&.size()\&.
.RE
.PP
Postconditions:
.RS 4
length(n) == that\&.length(n) for all positive integers n < that\&.size()\&.
.RE
.PP
Postconditions:
.RS 4
position(n) == that\&.position(n) for all positive integers n < that\&.size()\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
match_results< BidiIter > & operator=(match_results< BidiIter > const & that);
.fi

.sp

.PP
Parameters:
.RS 4
.PP
that
.RS 4
The
match_results
object to copy\&.
.RE
.RE
.PP
Postconditions:
.RS 4
regex_id() == that\&.regex_id()\&.
.RE
.PP
Postconditions:
.RS 4
size() == that\&.size()\&.
.RE
.PP
Postconditions:
.RS 4
empty() == that\&.empty()\&.
.RE
.PP
Postconditions:
.RS 4
str(n) == that\&.str(n) for all positive integers n < that\&.size()\&.
.RE
.PP
Postconditions:
.RS 4
prefix() == that\&.prefix()\&.
.RE
.PP
Postconditions:
.RS 4
suffix() == that\&.suffix()\&.
.RE
.PP
Postconditions:
.RS 4
(*this)[n] == that[n] for all positive integers n < that\&.size()\&.
.RE
.PP
Postconditions:
.RS 4
length(n) == that\&.length(n) for all positive integers n < that\&.size()\&.
.RE
.PP
Postconditions:
.RS 4
position(n) == that\&.position(n) for all positive integers n < that\&.size()\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
~match_results();
.fi

.RE

.SS "match_results public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
size_type size() const;
.fi

.sp
Returns one plus the number of marked sub\-expressions in the regular expression that was matched if *this represents the result of a successful match\&. Otherwise returns 0\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
bool empty() const;
.fi

.sp
Returns size() == 0\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
difference_type length(size_type sub = 0) const;
.fi

.sp
Returns (*this)[sub]\&.length()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
difference_type position(size_type sub = 0) const;
.fi

.sp
If !(*this)[sub]\&.matched then returns \-1\&. Otherwise returns std::distance(base, (*this)[sub]\&.first), where base is the start iterator of the sequence that was searched\&. [Note \- unless this is part of a repeated search with a
regex_iterator
then base is the same as prefix()\&.first \- end note]
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
string_type str(size_type sub = 0) const;
.fi

.sp
Returns (*this)[sub]\&.str()\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
template<typename Sub> const_reference operator[](Sub const & sub) const;
.fi

.sp
Returns a reference to the
sub_match
object representing the sequence that matched marked sub\-expression sub\&. If sub == 0 then returns a reference to a
sub_match
object representing the sequence that matched the whole regular expression\&. If sub >= size() then returns a
sub_match
object representing an unmatched sub\-expression\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
const_reference prefix() const;
.fi

.sp
Returns a reference to the
sub_match
object representing the character sequence from the start of the string being matched/searched, to the start of the match found\&.
.sp

.PP
Requires:
.RS 4
(*this)[0]\&.matched is true
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
const_reference suffix() const;
.fi

.sp
Returns a reference to the
sub_match
object representing the character sequence from the end of the match found to the end of the string being matched/searched\&.
.sp

.PP
Requires:
.RS 4
(*this)[0]\&.matched is true
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
const_iterator begin() const;
.fi

.sp
Returns a starting iterator that enumerates over all the marked sub\-expression matches stored in *this\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
const_iterator end() const;
.fi

.sp
Returns a terminating iterator that enumerates over all the marked sub\-expression matches stored in *this\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'11.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "11." 4.2
.\}

.sp

.nf
operator bool_type() const;
.fi

.sp
Returns a true value if (*this)[0]\&.matched, else returns a false value\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'12.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "12." 4.2
.\}

.sp

.nf
bool operator!() const;
.fi

.sp
Returns true if empty() || !(*this)[0]\&.matched, else returns false\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'13.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "13." 4.2
.\}

.sp

.nf
regex_id_type regex_id() const;
.fi

.sp
Returns the id of the
basic_regex
object most recently used with this
match_results
object\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'14.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "14." 4.2
.\}

.sp

.nf
nested_results_type const & nested_results() const;
.fi

.sp
Returns a Sequence of nested
match_results
elements\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'15.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "15." 4.2
.\}

.sp

.nf
template<typename Format, typename OutputIterator> 
  OutputIterator 
  format(OutputIterator out, Format const & fmt, 
         regex_constants::match_flag_type flags = regex_constants::format_default, 
         \fIunspecified\fR = 0) const;
.fi

.sp
If
Format
models
ForwardRange
or is a null\-terminated string, this function copies the character sequence in
fmt
to
OutputIterator
out\&. For each format specifier or escape sequence in
fmt, replace that sequence with either the character(s) it represents, or the sequence within
*this
to which it refers\&. The bitmasks specified in flags determines what format specifiers or escape sequences are recognized\&. By default, this is the format used by ECMA\-262, ECMAScript Language Specification, Chapter 15 part 5\&.4\&.11 String\&.prototype\&.replace\&.
.sp
Otherwise, if
Format
models
Callable<match_results<BidiIter>, OutputIterator, regex_constants::match_flag_type>, this function returns
fmt(*this, out, flags)\&.
.sp
Otherwise, if
Format
models
Callable<match_results<BidiIter>, OutputIterator>, this function returns
fmt(*this, out)\&.
.sp
Otherwise, if
Format
models
Callable<match_results<BidiIter> >, this function returns
std::copy(x\&.begin(), x\&.end(), out), where
x
is the result of calling
fmt(*this)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'16.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "16." 4.2
.\}

.sp

.nf
template<typename OutputIterator> 
  OutputIterator 
  format(OutputIterator out, char_type const * fmt, 
         regex_constants::match_flag_type flags = regex_constants::format_default) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'17.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "17." 4.2
.\}

.sp

.nf
template<typename Format, typename OutputIterator> 
  string_type format(Format const & fmt, 
                     regex_constants::match_flag_type flags = regex_constants::format_default, 
                     \fIunspecified\fR = 0) const;
.fi

.sp
If
Format
models
ForwardRange
or is a null\-terminated string, this function returns a copy of the character sequence
fmt\&. For each format specifier or escape sequence in
fmt, replace that sequence with either the character(s) it represents, or the sequence within
*this
to which it refers\&. The bitmasks specified in
flags
determines what format specifiers or escape sequences are recognized\&. By default this is the format used by ECMA\-262, ECMAScript Language Specification, Chapter 15 part 5\&.4\&.11 String\&.prototype\&.replace\&.
.sp
Otherwise, if
Format
models
Callable<match_results<BidiIter>, OutputIterator, regex_constants::match_flag_type>, this function returns a
string_type
object
x
populated by calling
fmt(*this, out, flags), where
out
is a
back_insert_iterator
into
x\&.
.sp
Otherwise, if
Format
models
Callable<match_results<BidiIter>, OutputIterator>, this function returns a
string_type
object
x
populated by calling
fmt(*this, out), where
out
is a
back_insert_iterator
into
x\&.
.sp
Otherwise, if
Format
models
Callable<match_results<BidiIter> >, this function returns
fmt(*this)\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'18.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "18." 4.2
.\}

.sp

.nf
string_type format(char_type const * fmt, 
                   regex_constants::match_flag_type flags = regex_constants::format_default) const;
.fi

.sp
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04'19.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "19." 4.2
.\}

.sp

.nf
void swap(match_results< BidiIter > & that);
.fi

.sp
Swaps the contents of two
match_results
objects\&. Guaranteed not to throw\&.
.PP
Parameters:
.RS 4
.PP
that
.RS 4
The
match_results
object to swap with\&.
.RE
.RE
.PP
Postconditions:
.RS 4
*this contains the sequence of matched sub\-expressions that were in that, that contains the sequence of matched sub\-expressions that were in *this\&.
.RE
.PP
Throws:
.RS 4
Will not throw\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'20.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "20." 4.2
.\}

.sp

.nf
template<typename Arg> match_results< BidiIter > & let(Arg const & arg);
.fi

.sp
TODO document me
.RE


