.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::proto::is_transform \- Boolean metafunction which tells whether a type is a PrimitiveTransform or not\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/traits\&.hpp>

template<typename T> 
struct is_transform :  mpl::bool_<\fItrue\-or\-false\fR> {
};
.fi
.SH "DESCRIPTION"
.PP

proto::is_transform<>
is used by the
proto::make<>
transform to determine whether a type
R
represents a
PrimitiveTransform
to apply, or whether it merely represents itself\&.
.PP
It is also used by the
proto::call<>
transform to determine whether the function types
R(),
R(A1), and
R(A1, A2)
should be passed the expression, state and data parameters (as needed)\&.
.PP
Unless specialized for a type
T,
proto::is_transform<T>::value
is computed as follows:

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If
T
is a class type that inherits directly or indirectly from an instantiation of
proto::transform<>,
proto::is_transform<T>::value
is
true\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Otherwise,
proto::is_transform<T>::value
is
false\&.
.RE
.sp
.RE


