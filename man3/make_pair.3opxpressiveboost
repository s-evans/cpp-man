.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT MAKE_PAIR" 3 "" "" ""
.SH "NAME"
boost::xpressive::op::make_pair \- make_pair is a PolymorphicFunctionObject for building a std::pair out of two parameters
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/xpressive/regex_actions\&.hpp>


struct make_pair {
  // member classes/structs/unions
  template<typename Sig> 
  struct result {
  };
  template<typename This, typename First, typename Second> 
  struct result<This(First, Second)> {
    // types
    typedef decay< First >::type                 first_type;   // For exposition only\&. 
    typedef decay< Second >::type                second_type;  // For exposition only\&. 
    typedef std::pair< first_type, second_type > type;       
  };

  // public member functions
  template<typename First, typename Second> 
    std::pair< First, Second > operator()(First const &, Second const &) const;
};
.fi
.SH "DESCRIPTION"
.SS "make_pair public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename First, typename Second> 
  std::pair< First, Second > 
  operator()(First const & first, Second const & second) const;
.fi

.sp

.PP
Parameters:
.RS 4
.PP
first
.RS 4
The first element of the pair
.RE
.PP
second
.RS 4
The second element of the pair
.RE
.RE
.PP
Returns:
.RS 4
std::make_pair(first, second)
.RE
.RE


