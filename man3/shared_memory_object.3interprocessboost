.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS SHARED_ME" 3 "" "" ""
.SH "NAME"
boost::interprocess::shared_memory_object
.SH "SYNOPSIS"
.\" truncate: Class shared_memory_object
.\" Class shared_memory_object: truncate
.\" swap: Class shared_memory_object
.\" Class shared_memory_object: swap
.\" shared_memory_object: Class shared_memory_object
.\" Class shared_memory_object: shared_memory_object
.\" remove: Class shared_memory_object
.\" Class shared_memory_object: remove

.sp
.nf
// In header: <boost/interprocess/shared_memory_object\&.hpp>


class shared_memory_object {
public:
  // construct/copy/destruct
  shared_memory_object();
  shared_memory_object(create_only_t, const char *, mode_t, 
                       const permissions & = permissions());
  shared_memory_object(open_or_create_t, const char *, mode_t, 
                       const permissions & = permissions());
  shared_memory_object(open_only_t, const char *, mode_t);
  shared_memory_object(shared_memory_object &&);
  shared_memory_object & operator=(shared_memory_object &&);
  ~shared_memory_object();

  // public member functions
  void swap(shared_memory_object &);
  void truncate(offset_t);
  const char * get_name() const;
  bool get_size(offset_t &) const;
  mode_t get_mode() const;
  mapping_handle_t get_mapping_handle() const;

  // public static functions
  static bool remove(const char *);
};
.fi
.SH "DESCRIPTION"
.PP
A class that wraps a shared memory mapping that can be used to create mapped regions from the mapped files
.SS "shared_memory_object public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
shared_memory_object();
.fi

Default constructor\&. Represents an empty shared_memory_object\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
shared_memory_object(create_only_t, const char * name, mode_t mode, 
                     const permissions & perm = permissions());
.fi

.sp
Creates a shared memory object with name "name" and mode "mode", with the access mode "mode" If the file previously exists, throws an error\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
shared_memory_object(open_or_create_t, const char * name, mode_t mode, 
                     const permissions & perm = permissions());
.fi

.sp
Tries to create a shared memory object with name "name" and mode "mode", with the access mode "mode"\&. If the file previously exists, it tries to open it with mode "mode"\&. Otherwise throws an error\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
shared_memory_object(open_only_t, const char * name, mode_t mode);
.fi

.sp
Tries to open a shared memory object with name "name", with the access mode "mode"\&. If the file does not previously exist, it throws an error\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
shared_memory_object(shared_memory_object && moved);
.fi

.sp
Moves the ownership of "moved"\'s shared memory object to *this\&. After the call, "moved" does not represent any shared memory object\&. Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
shared_memory_object & operator=(shared_memory_object && moved);
.fi

.sp
Moves the ownership of "moved"\'s shared memory to *this\&. After the call, "moved" does not represent any shared memory\&. Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
.\" remove: Class shared_memory_object
.\" Class shared_memory_object: remove

.sp

.nf
~shared_memory_object();
.fi

.sp
Destroys *this and indicates that the calling process is finished using the resource\&. All mapped regions are still valid after destruction\&. The destructor function will deallocate any system resources allocated by the system for use by this process for this resource\&. The resource can still be opened again calling the open constructor overload\&. To erase the resource from the system use remove()\&.
.RE

.SS "shared_memory_object public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" swap: Class shared_memory_object
.\" Class shared_memory_object: swap

.sp

.nf
void swap(shared_memory_object & moved);
.fi

Swaps the shared_memory_objects\&. Does not throw\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" truncate: Class shared_memory_object
.\" Class shared_memory_object: truncate

.sp

.nf
void truncate(offset_t length);
.fi

Sets the size of the shared memory mapping\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
const char * get_name() const;
.fi

Returns the name of the shared memory object\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
bool get_size(offset_t & size) const;
.fi

.sp
Returns true if the size of the shared memory object can be obtained and writes the size in the passed reference
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
mode_t get_mode() const;
.fi

Returns access mode\&. .RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
mapping_handle_t get_mapping_handle() const;
.fi

Returns mapping handle\&. Never throws\&. .RE

.SS "shared_memory_object public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" remove: Class shared_memory_object
.\" Class shared_memory_object: remove

.sp

.nf
static bool remove(const char * name);
.fi

.sp
Erases a shared memory object from the system\&. Returns false on error\&. Never throws
.RE


