.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS SYSLOG_BACKE" 3 "" "" ""
.SH "NAME"
boost::log::sinks::syslog_backend \- An implementation of a syslog sink backend\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/syslog_backend\&.hpp>


class syslog_backend : public basic_formatted_sink_backend< char > {
public:
  // types
  typedef base_type::char_type   char_type;             // Character type\&. 
  typedef base_type::string_type string_type;           // String type that is used to pass message test\&. 
  typedef \fIunspecified\fR            severity_mapper_type;  // Syslog severity level mapper type\&. 

  // construct/copy/destruct
  syslog_backend();
  template<typename\&.\&.\&. ArgsT> explicit syslog_backend(ArgsT\&.\&.\&.const &);
  ~syslog_backend();

  // public member functions
  void set_severity_mapper(severity_mapper_type const &);
  void set_local_address(std::string const &, unsigned short = 514);
  void set_local_address(boost::asio::ip::address const &, 
                         unsigned short = 514);
  void set_target_address(std::string const &, unsigned short = 514);
  void set_target_address(boost::asio::ip::address const &, 
                          unsigned short = 514);
  void consume(record_view const &, string_type const &);
};
.fi
.SH "DESCRIPTION"
.PP
The backend provides support for the syslog protocol, defined in RFC3164\&. The backend sends log records to a remote host via UDP\&. The host name can be specified by calling the
set_target_address
method\&. By default log records will be sent to localhost:514\&. The local address can be specified as well, by calling the
set_local_address
method\&. By default syslog packets will be sent from any local address available\&.
.PP
It is safe to create several sink backends with the same local addresses \- the backends within the process will share the same socket\&. The same applies to different processes that use the syslog backends to send records from the same socket\&. However, it is not guaranteed to work if some third party facility is using the socket\&.
.PP
On systems with native syslog implementation it may be preferable to utilize the POSIX syslog API instead of direct socket management in order to bypass possible security limitations that may be in action\&. To do so one has to pass the
use_impl = native
to the backend constructor\&. Note, however, that in that case you will only have one chance to specify syslog facility and process identification string \- on the first native syslog backend construction\&. Other native syslog backends will ignore these parameters\&. Obviously, the
set_local_address
and
set_target_address
methods have no effect for native backends\&. Using
use_impl = native
on platforms with no native support for POSIX syslog API will have no effect\&.
.SS "syslog_backend public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
syslog_backend();
.fi

.sp
Constructor\&. Creates a UDP socket\-based backend with
syslog::user
facility code\&. IPv4 protocol will be used\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename\&.\&.\&. ArgsT> explicit syslog_backend(ArgsT\&.\&.\&.const & args);
.fi

.sp
Constructor\&. Creates a sink backend with the specified named parameters\&. The following named parameters are supported:
.sp

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
facility
\- Specifies the facility code\&. If not specified,
syslog::user
will be used\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
use_impl
\- Specifies the backend implementation\&. Can be one of:
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
native
\- Use the native syslog API, if available\&. If no native API is available, it is equivalent to
udp_socket_based\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
udp_socket_based
\- Use the UDP socket\-based implementation, conforming to RFC3164 protocol specification\&. This is the default\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ip_version
\- Specifies IP protocol version to use, in case if socket\-based implementation is used\&. Can be either
v4
(the default one) or
v6\&.
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ident
\- Process identification string\&. This parameter is only supported by native syslog implementation\&.
.RE
.RS 4

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
~syslog_backend();
.fi

.sp
Destructor
.RE

.SS "syslog_backend public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void set_severity_mapper(severity_mapper_type const & mapper);
.fi

.sp
The method installs the function object that maps application severity levels to syslog levels
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void set_local_address(std::string const & addr, unsigned short port = 514);
.fi

.sp
The method sets the local host name which log records will be sent from\&. The host name is resolved to obtain the final IP address\&.
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Does not have effect if the backend was constructed to use native syslog API
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
addr
.RS 4
The local address
.RE
.PP
port
.RS 4
The local port number
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void set_local_address(boost::asio::ip::address const & addr, 
                       unsigned short port = 514);
.fi

.sp
The method sets the local address which log records will be sent from\&.
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Does not have effect if the backend was constructed to use native syslog API
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
addr
.RS 4
The local address
.RE
.PP
port
.RS 4
The local port number
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
void set_target_address(std::string const & addr, unsigned short port = 514);
.fi

.sp
The method sets the remote host name where log records will be sent to\&. The host name is resolved to obtain the final IP address\&.
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Does not have effect if the backend was constructed to use native syslog API
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
addr
.RS 4
The remote host address
.RE
.PP
port
.RS 4
The port number on the remote host
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
void set_target_address(boost::asio::ip::address const & addr, 
                        unsigned short port = 514);
.fi

.sp
The method sets the address of the remote host where log records will be sent to\&.
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Does not have effect if the backend was constructed to use native syslog API
.sp .5v
.RE

.PP
Parameters:
.RS 4
.PP
addr
.RS 4
The remote host address
.RE
.PP
port
.RS 4
The port number on the remote host
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
void consume(record_view const & rec, string_type const & formatted_message);
.fi

.sp
The method passes the formatted message to the syslog API or sends to a syslog server
.RE


