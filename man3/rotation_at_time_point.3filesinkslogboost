.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS ROTATION" 3 "" "" ""
.SH "NAME"
boost::log::sinks::file::rotation_at_time_point
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/text_file_backend\&.hpp>


class rotation_at_time_point {
public:
  // types
  typedef bool result_type;

  // construct/copy/destruct
  explicit rotation_at_time_point(unsigned char, unsigned char, unsigned char);
  explicit rotation_at_time_point(date_time::weekdays, unsigned char = 0, 
                                  unsigned char = 0, unsigned char = 0);
  explicit rotation_at_time_point(gregorian::greg_day, unsigned char = 0, 
                                  unsigned char = 0, unsigned char = 0);

  // public member functions
  bool operator()() const;
};
.fi
.SH "DESCRIPTION"
.PP
The class represents the time point of log file rotation\&. One can specify one of three types of time point based rotation:
.PP

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rotation takes place every day, at the specified time
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rotation takes place on the specified day of every week, at the specified time
.RE

.sp
.RS 4
.ie n \{\
\h'-04'&#8226;\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rotation takes place on the specified day of every month, at the specified time
.RE
.sp
.RE
The time points are considered to be local time\&.
.SS "rotation_at_time_point public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
explicit rotation_at_time_point(unsigned char hour, unsigned char minute, 
                                unsigned char second);
.fi

.sp
Creates a rotation time point of every day at the specified time
.sp

.PP
Parameters:
.RS 4
.PP
hour
.RS 4
The rotation hour, should be within 0 and 23
.RE
.PP
minute
.RS 4
The rotation minute, should be within 0 and 59
.RE
.PP
second
.RS 4
The rotation second, should be within 0 and 59
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit rotation_at_time_point(date_time::weekdays wday, 
                                unsigned char hour = 0, 
                                unsigned char minute = 0, 
                                unsigned char second = 0);
.fi

.sp
Creates a rotation time point of each specified weekday at the specified time
.sp

.PP
Parameters:
.RS 4
.PP
hour
.RS 4
The rotation hour, should be within 0 and 23
.RE
.PP
minute
.RS 4
The rotation minute, should be within 0 and 59
.RE
.PP
second
.RS 4
The rotation second, should be within 0 and 59
.RE
.PP
wday
.RS 4
The weekday of the rotation
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
explicit rotation_at_time_point(gregorian::greg_day mday, 
                                unsigned char hour = 0, 
                                unsigned char minute = 0, 
                                unsigned char second = 0);
.fi

.sp
Creates a rotation time point of each specified day of month at the specified time
.sp

.PP
Parameters:
.RS 4
.PP
hour
.RS 4
The rotation hour, should be within 0 and 23
.RE
.PP
mday
.RS 4
The monthday of the rotation, should be within 1 and 31
.RE
.PP
minute
.RS 4
The rotation minute, should be within 0 and 59
.RE
.PP
second
.RS 4
The rotation second, should be within 0 and 59
.RE
.RE
.RE

.SS "rotation_at_time_point public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
bool operator()() const;
.fi

.sp
Checks if it\'s time to rotate the file
.RE


