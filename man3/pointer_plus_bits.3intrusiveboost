.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPL" 3 "" "" ""
.SH "NAME"
boost::intrusive::pointer_plus_bits
.SH "SYNOPSIS"
.\" pointer_plus_bits: Struct template pointer_plus_bits
.\" Struct template pointer_plus_bits: pointer_plus_bits

.sp
.nf
// In header: <boost/intrusive/pointer_plus_bits\&.hpp>

template<typename Pointer, std::size_t NumBits> 
struct pointer_plus_bits {
};
.fi
.SH "DESCRIPTION"
.PP
This is class that is supposed to have static methods to embed extra bits of information in a pointer\&. This is a declaration and there is no default implementation, because operations to embed the bits change with every pointer type\&.
.PP
An implementation that detects that a pointer type whose has_pointer_plus_bits<>::value is non\-zero can make use of these operations to embed the bits in the pointer\&.

