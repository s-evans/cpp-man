.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "STRUCT TEMPLATE L" 3 "" "" ""
.SH "NAME"
boost::proto::literal \- A simple wrapper for a terminal, provided for ease of use\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/proto/literal\&.hpp>

template<typename T, typename Domain = proto::default_domain> 
struct literal :  
  proto::extends<proto::basic_expr<proto::tag::terminal, proto::term< T > >, proto::literal<T, Domain>, Domain>
{
  // types
  typedef proto::basic_expr<proto::tag::terminal, proto::term< T > > X;                // For exposition only
  typedef typename proto::result_of::value<X>::type                  value_type;     
  typedef typename proto::result_of::value<X &>::type                reference;      
  typedef typename proto::result_of::value<X const &>::type          const_reference;

  // construct/copy/destruct
  literal();
  template<typename U> literal(U &);
  template<typename U> literal(U const &);
  template<typename U> literal(proto::literal< U, Domain > const &);

  // public member functions
  reference get();
  const_reference get() const;
};
.fi
.SH "DESCRIPTION"
.PP
A simple wrapper for a terminal, provided for ease of use\&. In all cases,
proto::literal<X> l(x);
is equivalent to
proto::terminal<X>::type l = {x};\&.
.PP
The
Domain
template parameter defaults to
proto::default_domain\&.
.SS "literal public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
literal();
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
template<typename U> literal(U & u);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename U> literal(U const & u);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
template<typename U> literal(proto::literal< U, Domain > const & u);
.fi

.RE

.SS "literal public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
reference get();
.fi

.PP
Returns:
.RS 4
proto::value(*this).RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
const_reference get() const;
.fi

.PP
Returns:
.RS 4
proto::value(*this).RE
.RE


