.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "FUNCTION TEMPL" 3 "" "" ""
.SH "NAME"
boost::date_time::find_match \- Find index of a string in either of 2 arrays\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/date_parsing\&.hpp>


template<typename charT> 
  short find_match(const charT *const * short_names, 
                   const charT *const * long_names, short size, 
                   const std::basic_string< charT > & s);
.fi
.SH "DESCRIPTION"
.PP
find_match searches both arrays for a match to \'s\'\&. Both arrays must contain \'size\' elements\&. The index of the match is returned\&. If no match is found, \'size\' is returned\&. Ex\&. "Jan" returns 0, "Dec" returns 11, "Tue" returns 2\&. \'size\' can be sent in with: (greg_month::max)() (which 12), (greg_weekday::max)() + 1 (which is 7) or date_time::NumSpecialValues

