.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS RANDOM_DEVICE" 3 "" "" ""
.SH "NAME"
boost::random::random_device
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/random/random_device\&.hpp>


class random_device : private noncopyable {
public:
  // types
  typedef unsigned int result_type;

  // construct/copy/destruct
  random_device();
  explicit random_device(const std::string &);
  ~random_device();

  // public static functions
  static result_type min();
  static result_type max();

  // public member functions
  double entropy() const;
  unsigned int operator()();
  template<typename Iter> void generate(Iter, Iter);

  // public data members
  static const bool has_fixed_range;
};
.fi
.SH "DESCRIPTION"
.PP
Class
random_device
models a
non\-deterministic random number generator
\&. It uses one or more implementation\-defined stochastic processes to generate a sequence of uniformly distributed non\-deterministic random numbers\&. For those environments where a non\-deterministic random number generator is not available, class
random_device
must not be implemented\&. See
.PP

.PP "Randomness Recommendations for Security", D\&. Eastlake, S\&. Crocker, J\&. Schiller, Network Working Group, RFC 1750, December 1994
.PP
for further discussions\&.
.PP

.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Some operating systems abstract the computer hardware enough to make it difficult to non\-intrusively monitor stochastic processes\&. However, several do provide a special device for exactly this purpose\&. It seems to be impossible to emulate the functionality using Standard C++ only, so users should be aware that this class may not be available on all platforms\&.
.sp .5v
.RE

.PP
\fBImplementation Note for Linux\fR
.PP
On the Linux operating system, token is interpreted as a filesystem path\&. It is assumed that this path denotes an operating system pseudo\-device which generates a stream of non\-deterministic random numbers\&. The pseudo\-device should never signal an error or end\-of\-file\&. Otherwise,
std::ios_base::failure
is thrown\&. By default,
random_device
uses the /dev/urandom pseudo\-device to retrieve the random numbers\&. Another option would be to specify the /dev/random pseudo\-device, which blocks on reads if the entropy pool has no more random bits available\&.
.PP
\fBImplementation Note for Windows\fR
.PP
On the Windows operating system, token is interpreted as the name of a cryptographic service provider\&. By default
random_device
uses MS_DEF_PROV\&.
.PP
\fBPerformance\fR
.PP
The test program
\m[blue]\fBnondet_random_speed\&.cpp\fR\m[]\&\s-2\u[1]\d\s+2
measures the execution times of the random_device\&.hpp implementation of the above algorithms in a tight loop\&. The performance has been evaluated on an Intel(R) Core(TM) i7 CPU Q 840 @ 1\&.87GHz, 1867 Mhz with Visual C++ 2010, Microsoft Windows 7 Professional and with gcc 4\&.4\&.5, Ubuntu Linux 2\&.6\&.35\-25\-generic\&.
.PP
.TS
allbox tab(:);
l l
l l
l l.
T{
\fBPlatform\fR
T}:T{
\fBtime per invocation [microseconds] \fR
T}
T{
Windows
T}:T{
2\&.9
T}
T{
Linux
T}:T{
1\&.7
T}
.TE
.sp 1

.PP
The measurement error is estimated at +/\- 1 usec\&.
.SS "random_device public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
random_device();
.fi

.sp
Constructs a
random_device, optionally using the default device\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit random_device(const std::string & token);
.fi

.sp
Constructs a
random_device, optionally using the given token as an access specification (for example, a URL) to some implementation\-defined service for monitoring a stochastic process\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
~random_device();
.fi

.RE

.SS "random_device public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
static result_type min();
.fi

.sp
Returns the smallest value that the
random_device
can produce\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
static result_type max();
.fi

.sp
Returns the largest value that the
random_device
can produce\&.
.RE

.SS "random_device public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
double entropy() const;
.fi

.sp
Returns: An entropy estimate for the random numbers returned by operator(), in the range min() to log2( max()+1)\&. A deterministic random number generator (e\&.g\&. a pseudo\-random number engine) has entropy 0\&.
.sp
Throws: Nothing\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
unsigned int operator()();
.fi

.sp
Returns a random value in the range [min, max]\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
template<typename Iter> void generate(Iter begin, Iter end);
.fi

.sp
Fills a range with random 32\-bit values\&.
.RE


