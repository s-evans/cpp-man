.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS ERROR_WI" 3 "" "" ""
.SH "NAME"
boost::program_options::error_with_option_name
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/program_options/errors\&.hpp>


class error_with_option_name : public boost::program_options::error {
public:
  // construct/copy/destruct
  error_with_option_name(const std::string &, const std::string & = "", 
                         const std::string & = "", int = 0);
  ~error_with_option_name();

  // public member functions
  void set_substitute(const std::string &, const std::string &);
  void set_substitute_default(const std::string &, const std::string &, 
                              const std::string &);
  void add_context(const std::string &, const std::string &, int);
  void set_prefix(int);
  virtual void set_option_name(const std::string &);
  std::string get_option_name() const;
  void set_original_token(const std::string &);
  virtual const char * what() const;

  // protected member functions
  virtual void substitute_placeholders(const std::string &) const;
  void replace_token(const std::string &, const std::string &) const;
  std::string get_canonical_option_name() const;
  std::string get_canonical_option_prefix() const;

  // public data members
  std::string m_error_template;
};
.fi
.SH "DESCRIPTION"
.PP
Base class for most exceptions in the library\&.
.PP
Substitutes the values for the parameter name placeholders in the template to create the human readable error message
.PP
Placeholders are surrounded by % signs: example% Poor man\'s version of boost::format
.PP
If a parameter name is absent, perform default substitutions instead so ugly placeholders are never left in\-place\&.
.PP
Options are displayed in "canonical" form This is the most unambiguous form of the
\fIparsed\fR
option name and would correspond to option_description::format_name() i\&.e\&. what is shown by print_usage()
.PP
The "canonical" form depends on whether the option is specified in short or long form, using dashes or slashes or without a prefix (from a configuration file)
.SS "error_with_option_name public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
error_with_option_name(const std::string & template_, 
                       const std::string & option_name = "", 
                       const std::string & original_token = "", 
                       int option_style = 0);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
~error_with_option_name();
.fi

.sp
gcc says that throw specification on dtor is loosened without this line
.RE

.SS "error_with_option_name public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
void set_substitute(const std::string & parameter_name, 
                    const std::string & value);
.fi

.sp
Substitute parameter_name\->value to create the error message from the error template
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void set_substitute_default(const std::string & parameter_name, 
                            const std::string & from, const std::string & to);
.fi

.sp
If the parameter is missing, then make the from\->to substitution instead
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
void add_context(const std::string & option_name, 
                 const std::string & original_token, int option_style);
.fi

.sp
Add context to an exception
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
void set_prefix(int option_style);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
virtual void set_option_name(const std::string & option_name);
.fi

.sp
Overridden in
error_with_no_option_name
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
std::string get_option_name() const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
void set_original_token(const std::string & original_token);
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
virtual const char * what() const;
.fi

.sp
Creates the error_message on the fly Currently a thin wrapper for substitute_placeholders()
.RE

.SS "error_with_option_name protected member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
virtual void substitute_placeholders(const std::string & error_template) const;
.fi

.sp
Makes all substitutions using the template
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
void replace_token(const std::string & from, const std::string & to) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
std::string get_canonical_option_name() const;
.fi

.sp
Construct option name in accordance with the appropriate prefix style: i\&.e\&. long dash or short slash etc
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
std::string get_canonical_option_prefix() const;
.fi

.RE

.SS "error_with_option_name public public data members"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
std::string m_error_template;
.fi

.sp
template with placeholders
.RE


