.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLATE" 3 "" "" ""
.SH "NAME"
boost::date_time::month_functor \- Provides calculation to find next nth month given a date\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/date_time/adjust_functors\&.hpp>

template<typename date_type> 
class month_functor {
public:
  // types
  typedef date_type::duration_type duration_type;
  typedef date_type::calendar_type cal_type;     
  typedef cal_type::ymd_type       ymd_type;     
  typedef cal_type::day_type       day_type;     

  // construct/copy/destruct
  month_functor(int);

  // public member functions
  duration_type get_offset(const date_type &) const;
  duration_type get_neg_offset(const date_type &) const;
};
.fi
.SH "DESCRIPTION"
.PP
This adjustment function provides the logic for \'month\-based\' advancement on a ymd based calendar\&. The policy it uses to handle the non existant end of month days is to back up to the last day of the month\&. Also, if the starting date is the last day of a month, this functor will attempt to adjust to the end of the month\&.
.SS "month_functor public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
month_functor(int f);
.fi

.RE

.SS "month_functor public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
duration_type get_offset(const date_type & d) const;
.fi

.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
duration_type get_neg_offset(const date_type & d) const;
.fi

Returns a negative duration_type\&. .RE


