.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS DYNAMIC_" 3 "" "" ""
.SH "NAME"
boost::log::dynamic_type_dispatcher \- A dynamic type dispatcher\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/utility/type_dispatch/dynamic_type_dispatcher\&.hpp>


class dynamic_type_dispatcher : public type_dispatcher {
public:
  // construct/copy/destruct
  dynamic_type_dispatcher();
  dynamic_type_dispatcher(dynamic_type_dispatcher const &);
  dynamic_type_dispatcher & operator=(dynamic_type_dispatcher const &);

  // public member functions
  template<typename T, typename VisitorT> void register_type(VisitorT const &);
  dispatching_map::size_type registered_types_count() const;
};
.fi
.SH "DESCRIPTION"
.PP
The type dispatcher can be used to pass objects of arbitrary types from one component to another\&. With regard to the library, the type dispatcher can be used to extract attribute values\&.
.PP
The dynamic type dispatcher can be initialized in run time and, therefore, can support different types, depending on runtime conditions\&. Each supported type is associated with a functional object that will be called when an object of the type is dispatched\&.
.SS "dynamic_type_dispatcher public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
dynamic_type_dispatcher();
.fi

.sp
Default constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
dynamic_type_dispatcher(dynamic_type_dispatcher const & that);
.fi

.sp
Copy constructor
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
dynamic_type_dispatcher & operator=(dynamic_type_dispatcher const & that);
.fi

.sp
Copy assignment
.RE

.SS "dynamic_type_dispatcher public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
template<typename T, typename VisitorT> 
  void register_type(VisitorT const & visitor);
.fi

.sp
The method registers a new type
.sp

.PP
Parameters:
.RS 4
.PP
visitor
.RS 4
Function object that will be associated with the type
T
.RE
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
dispatching_map::size_type registered_types_count() const;
.fi

.sp
The method returns the number of registered types
.RE


