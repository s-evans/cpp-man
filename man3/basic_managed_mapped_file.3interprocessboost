.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TE" 3 "" "" ""
.SH "NAME"
boost::interprocess::basic_managed_mapped_file
.SH "SYNOPSIS"
.\" swap: Class template basic_managed_mapped_file
.\" Class template basic_managed_mapped_file: swap
.\" size_type: Class template basic_managed_mapped_file
.\" Class template basic_managed_mapped_file: size_type
.\" shrink_to_fit: Class template basic_managed_mapped_file
.\" Class template basic_managed_mapped_file: shrink_to_fit
.\" grow: Class template basic_managed_mapped_file
.\" Class template basic_managed_mapped_file: grow
.\" flush: Class template basic_managed_mapped_file
.\" Class template basic_managed_mapped_file: flush

.sp
.nf
// In header: <boost/interprocess/managed_mapped_file\&.hpp>

template<typename CharType, typename AllocationAlgorithm, 
         template< class IndexConfig > class IndexType> 
class basic_managed_mapped_file {
public:
  // types
  typedef implementation_defined size_type;

  // construct/copy/destruct
  basic_managed_mapped_file();
  basic_managed_mapped_file(create_only_t, const char *, size_type, 
                            const void * = 0, 
                            const permissions & = permissions());
  basic_managed_mapped_file(open_or_create_t, const char *, size_type, 
                            const void * = 0, 
                            const permissions & = permissions());
  basic_managed_mapped_file(open_only_t, const char *, const void * = 0);
  basic_managed_mapped_file(open_copy_on_write_t, const char *, 
                            const void * = 0);
  basic_managed_mapped_file(open_read_only_t, const char *, const void * = 0);
  basic_managed_mapped_file(basic_managed_mapped_file &&);
  basic_managed_mapped_file & operator=(basic_managed_mapped_file &&);
  ~basic_managed_mapped_file();

  // public member functions
  void swap(basic_managed_mapped_file &);
  bool flush();

  // public static functions
  static bool grow(const char *, size_type);
  static bool shrink_to_fit(const char *);
};
.fi
.SH "DESCRIPTION"
.PP
A basic mapped file named object creation class\&. Initializes the mapped file\&. Inherits all basic functionality from basic_managed_memory_impl<CharType, AllocationAlgorithm, IndexType>
.SS "basic_managed_mapped_file public types"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" size_type: Class template basic_managed_mapped_file
.\" Class template basic_managed_mapped_file: size_type

typedef
implementation_defined
size_type;
.sp
Unsigned integral type enough to represent the size of a
basic_managed_mapped_file\&.
.RE

.SS "basic_managed_mapped_file public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
basic_managed_mapped_file();
.fi

.sp
Creates mapped file and creates and places the segment manager\&. This can throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
basic_managed_mapped_file(create_only_t, const char * name, size_type size, 
                          const void * addr = 0, 
                          const permissions & perm = permissions());
.fi

.sp
Creates mapped file and creates and places the segment manager\&. This can throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
basic_managed_mapped_file(open_or_create_t, const char * name, size_type size, 
                          const void * addr = 0, 
                          const permissions & perm = permissions());
.fi

.sp
Creates mapped file and creates and places the segment manager if segment was not created\&. If segment was created it connects to the segment\&. This can throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
basic_managed_mapped_file(open_only_t, const char * name, 
                          const void * addr = 0);
.fi

.sp
Connects to a created mapped file and its segment manager\&. This can throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
basic_managed_mapped_file(open_copy_on_write_t, const char * name, 
                          const void * addr = 0);
.fi

.sp
Connects to a created mapped file and its segment manager in copy_on_write mode\&. This can throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
basic_managed_mapped_file(open_read_only_t, const char * name, 
                          const void * addr = 0);
.fi

.sp
Connects to a created mapped file and its segment manager in read\-only mode\&. This can throw\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
basic_managed_mapped_file(basic_managed_mapped_file && moved);
.fi

.sp
Moves the ownership of "moved"\'s managed memory to *this\&. Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
basic_managed_mapped_file & operator=(basic_managed_mapped_file && moved);
.fi

.sp
Moves the ownership of "moved"\'s managed memory to *this\&. Does not throw
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}
.\" remove: Class template basic_managed_mapped_file
.\" Class template basic_managed_mapped_file: remove

.sp

.nf
~basic_managed_mapped_file();
.fi

.sp
Destroys *this and indicates that the calling process is finished using the resource\&. The destructor function will deallocate any system resources allocated by the system for use by this process for this resource\&. The resource can still be opened again calling the open constructor overload\&. To erase the resource from the system use remove()\&.
.RE

.SS "basic_managed_mapped_file public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" swap: Class template basic_managed_mapped_file
.\" Class template basic_managed_mapped_file: swap

.sp

.nf
void swap(basic_managed_mapped_file & other);
.fi

.sp
Swaps the ownership of the managed mapped memories managed by *this and other\&. Never throws\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" flush: Class template basic_managed_mapped_file
.\" Class template basic_managed_mapped_file: flush

.sp

.nf
bool flush();
.fi

.sp
Flushes cached data to file\&. Never throws
.RE

.SS "basic_managed_mapped_file public static functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
.\" grow: Class template basic_managed_mapped_file
.\" Class template basic_managed_mapped_file: grow

.sp

.nf
static bool grow(const char * filename, size_type extra_bytes);
.fi

.sp
Tries to resize mapped file so that we have room for more objects\&.
.sp
This function is not synchronized so no other thread or process should be reading or writing the file
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
.\" shrink_to_fit: Class template basic_managed_mapped_file
.\" Class template basic_managed_mapped_file: shrink_to_fit

.sp

.nf
static bool shrink_to_fit(const char * filename);
.fi

.sp
Tries to resize mapped file to minimized the size of the file\&.
.sp
This function is not synchronized so no other thread or process should be reading or writing the file
.RE


