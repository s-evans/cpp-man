.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS TEMPLAT" 3 "" "" ""
.SH "NAME"
boost::log::sinks::synchronous_sink \- Synchronous logging sink frontend\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/sinks/sync_frontend\&.hpp>

template<typename SinkBackendT> 
class synchronous_sink : public basic_sink_frontend {
public:
  // types
  typedef SinkBackendT           sink_backend_type;   // Sink implementation type\&. 
  typedef implementation_defined locked_backend_ptr;  // A pointer type that locks the backend until it\'s destroyed\&. 

  // construct/copy/destruct
  synchronous_sink();
  explicit synchronous_sink(shared_ptr< sink_backend_type > const &);

  // public member functions
  locked_backend_ptr locked_backend();
  virtual void consume(record_view const &);
  virtual bool try_consume(record_view const &);
  virtual void flush();
};
.fi
.SH "DESCRIPTION"
.PP
The sink frontend serializes threads before passing logging records to the backend
.SS "synchronous_sink public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
synchronous_sink();
.fi

.sp
Default constructor\&. Constructs the sink backend instance\&. Requires the backend to be default\-constructible\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
explicit synchronous_sink(shared_ptr< sink_backend_type > const & backend);
.fi

.sp
Constructor attaches user\-constructed backend instance
.sp

.PP
Parameters:
.RS 4
.PP
backend
.RS 4
Pointer to the backend instance
.RE
.RE
.PP
Requires:
.RS 4
\fIbackend\fR
is not
NULL\&.
.RE
.RE

.SS "synchronous_sink public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
locked_backend_ptr locked_backend();
.fi

.sp
Locking accessor to the attached backend
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
virtual void consume(record_view const & rec);
.fi

.sp
Passes the log record to the backend
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
virtual bool try_consume(record_view const & rec);
.fi

.sp
The method attempts to pass logging record to the backend
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
virtual void flush();
.fi

.sp
The method performs flushing of any internal buffers that may hold log records\&. The method may take considerable time to complete and may block both the calling thread and threads attempting to put new records into the sink while this call is in progress\&.
.RE


