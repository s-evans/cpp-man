.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "CLASS ATTRIBUTE_NA" 3 "" "" ""
.SH "NAME"
boost::log::attribute_name \- The class represents an attribute name in containers used by the library\&.
.SH "SYNOPSIS"

.sp
.nf
// In header: <boost/log/attributes/attribute_name\&.hpp>


class attribute_name {
public:
  // types
  typedef std::string string_type;  // String type\&. 
  typedef unspecified id_type;      // Associated identifier\&. 

  // construct/copy/destruct
  attribute_name() noexcept;
  attribute_name(const char *);
  attribute_name(string_type const &);

  // public member functions
  bool operator==(attribute_name const &) const noexcept;
  bool operator!=(attribute_name const &) const noexcept;
  bool operator==(const char *) const;
  bool operator!=(const char *) const;
  bool operator==(string_type const &) const;
  bool operator!=(string_type const &) const;
  explicit operator bool() const noexcept;
  bool operator!() const noexcept;
  id_type id() const noexcept;
  string_type const & string() const;
};
.fi
.SH "DESCRIPTION"
.PP
The class mostly serves for optimization purposes\&. Each attribute name that is used with the library is automatically associated with a unique identifier, which is much lighter in terms of memory footprint and operations complexity\&. This is done transparently by this class, on object construction\&. Passing objects of this class to other library methods, such as attribute lookup functions, will not require this translation and/or string copying and thus will result in a more efficient code\&.
.SS "attribute_name public construct/copy/destruct"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
attribute_name() noexcept;
.fi

.sp
Default constructor\&. Creates an object that does not refer to any attribute name\&.
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
attribute_name(const char * name);
.fi

.sp
Constructs an attribute name from the specified string
.sp

.PP
Parameters:
.RS 4
.PP
name
.RS 4
An attribute name
.RE
.RE
.PP
Requires:
.RS 4
\fIname\fR
is not NULL and points to a zero\-terminated string
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
attribute_name(string_type const & name);
.fi

.sp
Constructs an attribute name from the specified string
.sp

.PP
Parameters:
.RS 4
.PP
name
.RS 4
An attribute name
.RE
.RE
.RE

.SS "attribute_name public member functions"

.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}

.sp

.nf
bool operator==(attribute_name const & that) const noexcept;
.fi

.sp
Compares the attribute names
.sp

.PP
Returns:
.RS 4
true
if
*this
and
that
refer to the same attribute name, and
false
otherwise\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

.sp

.nf
bool operator!=(attribute_name const & that) const noexcept;
.fi

.sp
Compares the attribute names
.sp

.PP
Returns:
.RS 4
true
if
*this
and
that
refer to different attribute names, and
false
otherwise\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}

.sp

.nf
bool operator==(const char * that) const;
.fi

.sp
Compares the attribute names
.sp

.PP
Returns:
.RS 4
true
if
*this
and
that
refer to the same attribute name, and
false
otherwise\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}

.sp

.nf
bool operator!=(const char * that) const;
.fi

.sp
Compares the attribute names
.sp

.PP
Returns:
.RS 4
true
if
*this
and
that
refer to different attribute names, and
false
otherwise\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}

.sp

.nf
bool operator==(string_type const & that) const;
.fi

.sp
Compares the attribute names
.sp

.PP
Returns:
.RS 4
true
if
*this
and
that
refer to the same attribute name, and
false
otherwise\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}

.sp

.nf
bool operator!=(string_type const & that) const;
.fi

.sp
Compares the attribute names
.sp

.PP
Returns:
.RS 4
true
if
*this
and
that
refer to different attribute names, and
false
otherwise\&.
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}

.sp

.nf
explicit operator bool() const noexcept;
.fi

.sp
Checks if the object was default\-constructed
.sp

.PP
Returns:
.RS 4
true
if
*this
was constructed with an attribute name,
false
otherwise
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}

.sp

.nf
bool operator!() const noexcept;
.fi

.sp
Checks if the object was default\-constructed
.sp

.PP
Returns:
.RS 4
true
if
*this
was default\-constructed and does not refer to any attribute name,
false
otherwise
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}

.sp

.nf
id_type id() const noexcept;
.fi

.sp

.PP
Requires:
.RS 4
(!*this) == false
.RE
.PP
Returns:
.RS 4
The associated id value
.RE
.RE


.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}

.sp

.nf
string_type const & string() const;
.fi

.sp

.PP
Requires:
.RS 4
(!*this) == false
.RE
.PP
Returns:
.RS 4
The attribute name string that was used during the object construction
.RE
.RE


